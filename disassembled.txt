
Debug/MKE18F512xxx16_Project.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__Vectors>:
       0:	00 80 00 20 e1 01 00 00 35 02 00 00 4d 0a 00 00     ... ....5...M...
      10:	39 02 00 00 3b 02 00 00 3d 02 00 00 00 00 00 00     9...;...=.......
	...
      2c:	3f 02 00 00 41 02 00 00 00 00 00 00 43 02 00 00     ?...A.......C...
      3c:	45 02 00 00 ad 38 00 00 b5 38 00 00 bd 38 00 00     E....8...8...8..
      4c:	c5 38 00 00 cd 38 00 00 d5 38 00 00 dd 38 00 00     .8...8...8...8..
      5c:	e5 38 00 00 ed 38 00 00 f5 38 00 00 fd 38 00 00     .8...8...8...8..
      6c:	05 39 00 00 0d 39 00 00 15 39 00 00 1d 39 00 00     .9...9...9...9..
      7c:	25 39 00 00 2d 39 00 00 35 39 00 00 3d 39 00 00     %9..-9..59..=9..
      8c:	45 39 00 00 4d 39 00 00 55 39 00 00 5d 39 00 00     E9..M9..U9..]9..
      9c:	65 39 00 00 6d 39 00 00 75 39 00 00 7d 39 00 00     e9..m9..u9..}9..
      ac:	85 39 00 00 8d 39 00 00 95 39 00 00 9d 39 00 00     .9...9...9...9..
      bc:	a5 39 00 00 ad 39 00 00 b5 39 00 00 bd 39 00 00     .9...9...9...9..
      cc:	c5 39 00 00 cd 39 00 00 d5 39 00 00 dd 39 00 00     .9...9...9...9..
      dc:	e5 39 00 00 ed 39 00 00 f5 39 00 00 fd 39 00 00     .9...9...9...9..
      ec:	05 3a 00 00 0d 3a 00 00 15 3a 00 00 1d 3a 00 00     .:...:...:...:..
      fc:	25 3a 00 00 2d 3a 00 00 35 3a 00 00 3d 3a 00 00     %:..-:..5:..=:..
     10c:	45 3a 00 00 4d 3a 00 00 55 3a 00 00 5d 3a 00 00     E:..M:..U:..]:..
     11c:	65 3a 00 00 6d 3a 00 00 75 3a 00 00 7d 3a 00 00     e:..m:..u:..}:..
     12c:	85 3a 00 00 8d 3a 00 00 95 3a 00 00 9d 3a 00 00     .:...:...:...:..
     13c:	a5 3a 00 00 ad 3a 00 00 b5 3a 00 00 bd 3a 00 00     .:...:...:...:..
     14c:	c5 3a 00 00 cd 3a 00 00 d5 3a 00 00 dd 3a 00 00     .:...:...:...:..
     15c:	e5 3a 00 00 ed 3a 00 00 f5 3a 00 00 fd 3a 00 00     .:...:...:...:..
     16c:	05 3b 00 00 0d 3b 00 00 15 3b 00 00 1d 3b 00 00     .;...;...;...;..
     17c:	25 3b 00 00 2d 3b 00 00 35 3b 00 00 3d 3b 00 00     %;..-;..5;..=;..
     18c:	45 3b 00 00 4d 3b 00 00 55 3b 00 00 5d 3b 00 00     E;..M;..U;..];..
     19c:	65 3b 00 00 6d 3b 00 00                             e;..m;..

000001a4 <__data_section_table>:
     1a4:	00004b98 	.word	0x00004b98
     1a8:	20000000 	.word	0x20000000
     1ac:	00000068 	.word	0x00000068
     1b0:	00004b98 	.word	0x00004b98
     1b4:	1fff8000 	.word	0x1fff8000
     1b8:	00000000 	.word	0x00000000
     1bc:	00004b98 	.word	0x00004b98
     1c0:	14000000 	.word	0x14000000
     1c4:	00000000 	.word	0x00000000

000001c8 <__bss_section_table>:
     1c8:	20000068 	.word	0x20000068
     1cc:	00000048 	.word	0x00000048
     1d0:	1fff8000 	.word	0x1fff8000
     1d4:	00000000 	.word	0x00000000
     1d8:	14000000 	.word	0x14000000
     1dc:	00000000 	.word	0x00000000

000001e0 <ResetISR>:
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors.reset")))
void ResetISR(void) {
     1e0:	b510      	push	{r4, lr}

    // Disable interrupts
    __asm volatile ("cpsid i");
     1e2:	b672      	cpsid	i

#if defined (__USE_CMSIS)
// If __USE_CMSIS defined, then call CMSIS SystemInit code
    SystemInit();
     1e4:	f001 fd2a 	bl	1c3c <SystemInit>
    //
	unsigned int LoadAddr, ExeAddr, SectionLen;
	unsigned int *SectionTableAddr;

	// Load base address of Global Section Table
	SectionTableAddr = &__data_section_table;
     1e8:	4b0f      	ldr	r3, [pc, #60]	; (228 <ResetISR+0x48>)
     1ea:	e007      	b.n	1fc <ResetISR+0x1c>

    // Copy the data sections from flash to SRAM.
	while (SectionTableAddr < &__data_section_table_end) {
		LoadAddr = *SectionTableAddr++;
		ExeAddr = *SectionTableAddr++;
		SectionLen = *SectionTableAddr++;
     1ec:	f103 040c 	add.w	r4, r3, #12
		data_init(LoadAddr, ExeAddr, SectionLen);
     1f0:	689a      	ldr	r2, [r3, #8]
     1f2:	6859      	ldr	r1, [r3, #4]
     1f4:	6818      	ldr	r0, [r3, #0]
     1f6:	f000 f827 	bl	248 <_Z9data_initjjj>
		SectionLen = *SectionTableAddr++;
     1fa:	4623      	mov	r3, r4
	while (SectionTableAddr < &__data_section_table_end) {
     1fc:	4a0b      	ldr	r2, [pc, #44]	; (22c <ResetISR+0x4c>)
     1fe:	4293      	cmp	r3, r2
     200:	d3f4      	bcc.n	1ec <ResetISR+0xc>
	}

	// At this point, SectionTableAddr = &__bss_section_table;
	// Zero fill the bss segment
	while (SectionTableAddr < &__bss_section_table_end) {
     202:	4a0b      	ldr	r2, [pc, #44]	; (230 <ResetISR+0x50>)
     204:	4293      	cmp	r3, r2
     206:	d209      	bcs.n	21c <ResetISR+0x3c>
		ExeAddr = *SectionTableAddr++;
     208:	461c      	mov	r4, r3
		SectionLen = *SectionTableAddr++;
		bss_init(ExeAddr, SectionLen);
     20a:	6859      	ldr	r1, [r3, #4]
     20c:	f854 0b08 	ldr.w	r0, [r4], #8
     210:	f000 f828 	bl	264 <_Z8bss_initjj>
		SectionLen = *SectionTableAddr++;
     214:	4623      	mov	r3, r4
	while (SectionTableAddr < &__bss_section_table_end) {
     216:	4a06      	ldr	r2, [pc, #24]	; (230 <ResetISR+0x50>)
     218:	4293      	cmp	r3, r2
     21a:	d3f5      	bcc.n	208 <ResetISR+0x28>

#if defined (__cplusplus)
    //
    // Call C++ library initialisation
    //
    __libc_init_array();
     21c:	f002 fcec 	bl	2bf8 <__libc_init_array>
#endif

    // Reenable interrupts
    __asm volatile ("cpsie i");
     220:	b662      	cpsie	i

#if defined (__REDLIB__)
	// Call the Redlib library, which in turn calls main()
	__main();
#else
	main();
     222:	f000 fbe9 	bl	9f8 <main>
     226:	e7fe      	b.n	226 <ResetISR+0x46>
     228:	000001a4 	.word	0x000001a4
     22c:	000001c8 	.word	0x000001c8
     230:	000001e0 	.word	0x000001e0

00000234 <NMI_Handler>:
//*****************************************************************************
// Default core exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
WEAK_AV void NMI_Handler(void)
{ while(1) {}
     234:	e7fe      	b.n	234 <NMI_Handler>
}

WEAK_AV void HardFault_Handler(void)
{ while(1) {}
     236:	e7fe      	b.n	236 <NMI_Handler+0x2>

00000238 <MemManage_Handler>:
}

WEAK_AV void MemManage_Handler(void)
{ while(1) {}
     238:	e7fe      	b.n	238 <MemManage_Handler>

0000023a <BusFault_Handler>:
}

WEAK_AV void BusFault_Handler(void)
{ while(1) {}
     23a:	e7fe      	b.n	23a <BusFault_Handler>

0000023c <UsageFault_Handler>:
}

WEAK_AV void UsageFault_Handler(void)
{ while(1) {}
     23c:	e7fe      	b.n	23c <UsageFault_Handler>

0000023e <SVC_Handler>:
}

WEAK_AV void SVC_Handler(void)
{ while(1) {}
     23e:	e7fe      	b.n	23e <SVC_Handler>

00000240 <DebugMon_Handler>:
}

WEAK_AV void DebugMon_Handler(void)
{ while(1) {}
     240:	e7fe      	b.n	240 <DebugMon_Handler>

00000242 <PendSV_Handler>:
}

WEAK_AV void PendSV_Handler(void)
{ while(1) {}
     242:	e7fe      	b.n	242 <PendSV_Handler>

00000244 <SysTick_Handler>:
}

WEAK_AV void SysTick_Handler(void)
{ while(1) {}
     244:	e7fe      	b.n	244 <SysTick_Handler>

00000246 <ADC0_DriverIRQHandler>:
//*****************************************************************************
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//*****************************************************************************
WEAK_AV void IntDefaultHandler(void)
{ while(1) {}
     246:	e7fe      	b.n	246 <ADC0_DriverIRQHandler>

00000248 <_Z9data_initjjj>:
	for (loop = 0; loop < len; loop = loop + 4)
     248:	2300      	movs	r3, #0
     24a:	4293      	cmp	r3, r2
     24c:	d209      	bcs.n	262 <_Z9data_initjjj+0x1a>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
     24e:	b410      	push	{r4}
		*pulDest++ = *pulSrc++;
     250:	6804      	ldr	r4, [r0, #0]
     252:	600c      	str	r4, [r1, #0]
	for (loop = 0; loop < len; loop = loop + 4)
     254:	3304      	adds	r3, #4
		*pulDest++ = *pulSrc++;
     256:	3004      	adds	r0, #4
     258:	3104      	adds	r1, #4
	for (loop = 0; loop < len; loop = loop + 4)
     25a:	4293      	cmp	r3, r2
     25c:	d3f8      	bcc.n	250 <_Z9data_initjjj+0x8>
}
     25e:	bc10      	pop	{r4}
     260:	4770      	bx	lr
     262:	4770      	bx	lr

00000264 <_Z8bss_initjj>:
	for (loop = 0; loop < len; loop = loop + 4)
     264:	2300      	movs	r3, #0
     266:	e003      	b.n	270 <_Z8bss_initjj+0xc>
		*pulDest++ = 0;
     268:	2200      	movs	r2, #0
     26a:	6002      	str	r2, [r0, #0]
	for (loop = 0; loop < len; loop = loop + 4)
     26c:	3304      	adds	r3, #4
		*pulDest++ = 0;
     26e:	3004      	adds	r0, #4
	for (loop = 0; loop < len; loop = loop + 4)
     270:	428b      	cmp	r3, r1
     272:	d3f9      	bcc.n	268 <_Z8bss_initjj+0x4>
}
     274:	4770      	bx	lr
     276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     302:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     306:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     30a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     30e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     312:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     316:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     31a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     31e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     322:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     326:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     32a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     32e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     332:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     336:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     33a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     33e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     342:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     346:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     34a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     34e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     352:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     356:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     35a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     35e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     362:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     366:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     36a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     36e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     372:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     376:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     37a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     37e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     382:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     386:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     38a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     38e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     392:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     396:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     39a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     39e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3fe:	Address 0x00000000000003fe is out of bounds.


00000400 <__FLASH_CONFIG_START__>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffff7dfe 	.word	0xffff7dfe

00000410 <memchr>:
     410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     414:	2a10      	cmp	r2, #16
     416:	db2b      	blt.n	470 <memchr+0x60>
     418:	f010 0f07 	tst.w	r0, #7
     41c:	d008      	beq.n	430 <memchr+0x20>
     41e:	f810 3b01 	ldrb.w	r3, [r0], #1
     422:	3a01      	subs	r2, #1
     424:	428b      	cmp	r3, r1
     426:	d02d      	beq.n	484 <memchr+0x74>
     428:	f010 0f07 	tst.w	r0, #7
     42c:	b342      	cbz	r2, 480 <memchr+0x70>
     42e:	d1f6      	bne.n	41e <memchr+0xe>
     430:	b4f0      	push	{r4, r5, r6, r7}
     432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     43a:	f022 0407 	bic.w	r4, r2, #7
     43e:	f07f 0700 	mvns.w	r7, #0
     442:	2300      	movs	r3, #0
     444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     448:	3c08      	subs	r4, #8
     44a:	ea85 0501 	eor.w	r5, r5, r1
     44e:	ea86 0601 	eor.w	r6, r6, r1
     452:	fa85 f547 	uadd8	r5, r5, r7
     456:	faa3 f587 	sel	r5, r3, r7
     45a:	fa86 f647 	uadd8	r6, r6, r7
     45e:	faa5 f687 	sel	r6, r5, r7
     462:	b98e      	cbnz	r6, 488 <memchr+0x78>
     464:	d1ee      	bne.n	444 <memchr+0x34>
     466:	bcf0      	pop	{r4, r5, r6, r7}
     468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     46c:	f002 0207 	and.w	r2, r2, #7
     470:	b132      	cbz	r2, 480 <memchr+0x70>
     472:	f810 3b01 	ldrb.w	r3, [r0], #1
     476:	3a01      	subs	r2, #1
     478:	ea83 0301 	eor.w	r3, r3, r1
     47c:	b113      	cbz	r3, 484 <memchr+0x74>
     47e:	d1f8      	bne.n	472 <memchr+0x62>
     480:	2000      	movs	r0, #0
     482:	4770      	bx	lr
     484:	3801      	subs	r0, #1
     486:	4770      	bx	lr
     488:	2d00      	cmp	r5, #0
     48a:	bf06      	itte	eq
     48c:	4635      	moveq	r5, r6
     48e:	3803      	subeq	r0, #3
     490:	3807      	subne	r0, #7
     492:	f015 0f01 	tst.w	r5, #1
     496:	d107      	bne.n	4a8 <memchr+0x98>
     498:	3001      	adds	r0, #1
     49a:	f415 7f80 	tst.w	r5, #256	; 0x100
     49e:	bf02      	ittt	eq
     4a0:	3001      	addeq	r0, #1
     4a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     4a6:	3001      	addeq	r0, #1
     4a8:	bcf0      	pop	{r4, r5, r6, r7}
     4aa:	3801      	subs	r0, #1
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop

000004b0 <DbgConsole_RelocateLog>:

    return ch;
}

static void DbgConsole_RelocateLog(char *buf, int32_t *indicator, char val, int len)
{
     4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int i = 0;

    for (i = 0; i < len; i++)
     4b4:	f1b3 0a00 	subs.w	sl, r3, #0
     4b8:	dd19      	ble.n	4ee <DbgConsole_RelocateLog+0x3e>
     4ba:	2400      	movs	r4, #0
     4bc:	460d      	mov	r5, r1
     4be:	4691      	mov	r9, r2
     4c0:	4607      	mov	r7, r0
     4c2:	6809      	ldr	r1, [r1, #0]
    {
        if ((*indicator + 1) >= DEBUG_CONSOLE_PRINTF_MAX_LOG_LEN)
        {
            LOG_Push((uint8_t *)buf, *indicator);
            *indicator = 0U;
     4c4:	46a0      	mov	r8, r4
     4c6:	e008      	b.n	4da <DbgConsole_RelocateLog+0x2a>
     4c8:	4439      	add	r1, r7
        }

        buf[*indicator] = val;
     4ca:	f881 9000 	strb.w	r9, [r1]
        (*indicator)++;
     4ce:	6829      	ldr	r1, [r5, #0]
    for (i = 0; i < len; i++)
     4d0:	3401      	adds	r4, #1
        (*indicator)++;
     4d2:	3101      	adds	r1, #1
    for (i = 0; i < len; i++)
     4d4:	45a2      	cmp	sl, r4
        (*indicator)++;
     4d6:	6029      	str	r1, [r5, #0]
    for (i = 0; i < len; i++)
     4d8:	d009      	beq.n	4ee <DbgConsole_RelocateLog+0x3e>
        if ((*indicator + 1) >= DEBUG_CONSOLE_PRINTF_MAX_LOG_LEN)
     4da:	1c4e      	adds	r6, r1, #1
     4dc:	2e7f      	cmp	r6, #127	; 0x7f
     4de:	d9f3      	bls.n	4c8 <DbgConsole_RelocateLog+0x18>
            LOG_Push((uint8_t *)buf, *indicator);
     4e0:	4638      	mov	r0, r7
     4e2:	f000 f893 	bl	60c <LOG_Push>
            *indicator = 0U;
     4e6:	f8c5 8000 	str.w	r8, [r5]
     4ea:	4639      	mov	r1, r7
     4ec:	e7ed      	b.n	4ca <DbgConsole_RelocateLog+0x1a>
    }
}
     4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4f2:	bf00      	nop

000004f4 <DbgConsole_Init>:
{
     4f4:	b510      	push	{r4, lr}
    assert(device != DEBUG_CONSOLE_DEVICE_TYPE_NONE);
     4f6:	b132      	cbz	r2, 506 <DbgConsole_Init+0x12>
     4f8:	4614      	mov	r4, r2
    return LOG_Init(baseAddr, device, baudRate, clkSrcFreq);
     4fa:	460a      	mov	r2, r1
     4fc:	4621      	mov	r1, r4
}
     4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return LOG_Init(baseAddr, device, baudRate, clkSrcFreq);
     502:	f000 b873 	b.w	5ec <LOG_Init>
    assert(device != DEBUG_CONSOLE_DEVICE_TYPE_NONE);
     506:	4b03      	ldr	r3, [pc, #12]	; (514 <DbgConsole_Init+0x20>)
     508:	4a03      	ldr	r2, [pc, #12]	; (518 <DbgConsole_Init+0x24>)
     50a:	4804      	ldr	r0, [pc, #16]	; (51c <DbgConsole_Init+0x28>)
     50c:	2169      	movs	r1, #105	; 0x69
     50e:	f002 fb43 	bl	2b98 <__assert_func>
     512:	bf00      	nop
     514:	00003e80 	.word	0x00003e80
     518:	00003ed0 	.word	0x00003ed0
     51c:	00003eac 	.word	0x00003eac

00000520 <DbgConsole_Printf>:
{
     520:	b40f      	push	{r0, r1, r2, r3}
     522:	b530      	push	{r4, r5, lr}
     524:	b0a3      	sub	sp, #140	; 0x8c
     526:	ac26      	add	r4, sp, #152	; 0x98
    char printBuf[DEBUG_CONSOLE_PRINTF_MAX_LOG_LEN] = {0U};
     528:	a802      	add	r0, sp, #8
{
     52a:	f854 5b04 	ldr.w	r5, [r4], #4
    char printBuf[DEBUG_CONSOLE_PRINTF_MAX_LOG_LEN] = {0U};
     52e:	2280      	movs	r2, #128	; 0x80
     530:	2100      	movs	r1, #0
     532:	f003 fb31 	bl	3b98 <memset>
    logLength = StrFormatPrintf(fmt_s, ap, printBuf, DbgConsole_RelocateLog);
     536:	4621      	mov	r1, r4
     538:	aa02      	add	r2, sp, #8
     53a:	4b07      	ldr	r3, [pc, #28]	; (558 <DbgConsole_Printf+0x38>)
    va_start(ap, fmt_s);
     53c:	9401      	str	r4, [sp, #4]
    logLength = StrFormatPrintf(fmt_s, ap, printBuf, DbgConsole_RelocateLog);
     53e:	4628      	mov	r0, r5
     540:	f000 f87e 	bl	640 <StrFormatPrintf>
    result = LOG_Push((uint8_t *)printBuf, logLength);
     544:	4601      	mov	r1, r0
     546:	a802      	add	r0, sp, #8
     548:	f000 f860 	bl	60c <LOG_Push>
}
     54c:	b023      	add	sp, #140	; 0x8c
     54e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     552:	b004      	add	sp, #16
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	000004b1 	.word	0x000004b1

0000055c <IO_Init>:
}
#endif /* defined DEBUG_CONSOLE_IO_FLEXCOMM) || (defined DEBUG_CONSOLE_IO_VUSART */
#endif /* DEBUG_CONSOLE_TRANSFER_NON_BLOCKING */

void IO_Init(io_state_t *io, uint32_t baudRate, uint32_t clkSrcFreq, uint8_t *ringBuffer)
{
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	b086      	sub	sp, #24
    assert(NULL != io);
     560:	b1e0      	cbz	r0, 59c <IO_Init+0x40>

    /* record device type/base */
    s_debugConsoleIO.ioType = io->ioType;
     562:	7903      	ldrb	r3, [r0, #4]
     564:	4c10      	ldr	r4, [pc, #64]	; (5a8 <IO_Init+0x4c>)
     566:	460d      	mov	r5, r1
    s_debugConsoleIO.ioBase = (void *)(io->ioBase);

    switch (s_debugConsoleIO.ioType)
     568:	2b02      	cmp	r3, #2
    s_debugConsoleIO.ioBase = (void *)(io->ioBase);
     56a:	6801      	ldr	r1, [r0, #0]
     56c:	6021      	str	r1, [r4, #0]
    s_debugConsoleIO.ioType = io->ioType;
     56e:	7123      	strb	r3, [r4, #4]
    switch (s_debugConsoleIO.ioType)
     570:	d112      	bne.n	598 <IO_Init+0x3c>
     572:	4616      	mov	r6, r2

#if defined DEBUG_CONSOLE_IO_LPUART
        case DEBUG_CONSOLE_DEVICE_TYPE_LPUART:
        {
            lpuart_config_t lpuart_config;
            LPUART_GetDefaultConfig(&lpuart_config);
     574:	a801      	add	r0, sp, #4
     576:	f000 fe57 	bl	1228 <LPUART_GetDefaultConfig>
            lpuart_config.baudRate_Bps = baudRate;
            /* Enable clock and initial UART module follow user configure structure. */
            LPUART_Init((LPUART_Type *)s_debugConsoleIO.ioBase, &lpuart_config, clkSrcFreq);
     57a:	4632      	mov	r2, r6
     57c:	a901      	add	r1, sp, #4
     57e:	6820      	ldr	r0, [r4, #0]
            lpuart_config.baudRate_Bps = baudRate;
     580:	9501      	str	r5, [sp, #4]
            LPUART_Init((LPUART_Type *)s_debugConsoleIO.ioBase, &lpuart_config, clkSrcFreq);
     582:	f000 fd27 	bl	fd4 <LPUART_Init>
            LPUART_EnableTx(s_debugConsoleIO.ioBase, true);
     586:	6823      	ldr	r3, [r4, #0]
 */
static inline void LPUART_EnableTx(LPUART_Type *base, bool enable)
{
    if (enable)
    {
        base->CTRL |= LPUART_CTRL_TE_MASK;
     588:	699a      	ldr	r2, [r3, #24]
     58a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     58e:	619a      	str	r2, [r3, #24]
 */
static inline void LPUART_EnableRx(LPUART_Type *base, bool enable)
{
    if (enable)
    {
        base->CTRL |= LPUART_CTRL_RE_MASK;
     590:	699a      	ldr	r2, [r3, #24]
     592:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
     596:	619a      	str	r2, [r3, #24]
            break;
#endif
        default:
            break;
    }
}
     598:	b006      	add	sp, #24
     59a:	bd70      	pop	{r4, r5, r6, pc}
    assert(NULL != io);
     59c:	4b03      	ldr	r3, [pc, #12]	; (5ac <IO_Init+0x50>)
     59e:	4a04      	ldr	r2, [pc, #16]	; (5b0 <IO_Init+0x54>)
     5a0:	4804      	ldr	r0, [pc, #16]	; (5b4 <IO_Init+0x58>)
     5a2:	21ff      	movs	r1, #255	; 0xff
     5a4:	f002 faf8 	bl	2b98 <__assert_func>
     5a8:	20000068 	.word	0x20000068
     5ac:	00003ee0 	.word	0x00003ee0
     5b0:	00003f04 	.word	0x00003f04
     5b4:	00003eec 	.word	0x00003eec

000005b8 <IO_Transfer>:
}

#else

status_t IO_Transfer(uint8_t *ch, size_t size, bool tx)
{
     5b8:	b510      	push	{r4, lr}
    status_t status = kStatus_Success;
    switch (s_debugConsoleIO.ioType)
     5ba:	4b0b      	ldr	r3, [pc, #44]	; (5e8 <IO_Transfer+0x30>)
     5bc:	791c      	ldrb	r4, [r3, #4]
     5be:	2c02      	cmp	r4, #2
     5c0:	d10f      	bne.n	5e2 <IO_Transfer+0x2a>
     5c2:	681b      	ldr	r3, [r3, #0]
#endif

#if defined DEBUG_CONSOLE_IO_LPUART
        case DEBUG_CONSOLE_DEVICE_TYPE_LPUART:
        {
            if (tx)
     5c4:	b932      	cbnz	r2, 5d4 <IO_Transfer+0x1c>
            {
                LPUART_WriteBlocking(s_debugConsoleIO.ioBase, ch, size);
            }
            else
            {
                status = LPUART_ReadBlocking(s_debugConsoleIO.ioBase, ch, size);
     5c6:	460a      	mov	r2, r1
            status = kStatus_Fail;
            break;
    }

    return status;
}
     5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                status = LPUART_ReadBlocking(s_debugConsoleIO.ioBase, ch, size);
     5cc:	4601      	mov	r1, r0
     5ce:	4618      	mov	r0, r3
     5d0:	f000 be66 	b.w	12a0 <LPUART_ReadBlocking>
     5d4:	460a      	mov	r2, r1
     5d6:	4601      	mov	r1, r0
                LPUART_WriteBlocking(s_debugConsoleIO.ioBase, ch, size);
     5d8:	4618      	mov	r0, r3
     5da:	f000 fe47 	bl	126c <LPUART_WriteBlocking>
    status_t status = kStatus_Success;
     5de:	2000      	movs	r0, #0
}
     5e0:	bd10      	pop	{r4, pc}
            status = kStatus_Fail;
     5e2:	2001      	movs	r0, #1
}
     5e4:	bd10      	pop	{r4, pc}
     5e6:	bf00      	nop
     5e8:	20000068 	.word	0x20000068

000005ec <LOG_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t LOG_Init(uint32_t baseAddr, uint8_t device, uint32_t baudRate, uint32_t clkSrcFreq)
{
     5ec:	b510      	push	{r4, lr}
     5ee:	b082      	sub	sp, #8
     5f0:	4614      	mov	r4, r2
    io_state_t io;
    /* init io */
    io.ioBase = (void *)baseAddr;
     5f2:	9000      	str	r0, [sp, #0]
    /* Debug console buffer push lock create */
    LOG_CREATE_MUTEX_SEMAPHORE(s_logPushSemaphore);
    /* Debug console get/scanf mutex lock create */
    LOG_CREATE_MUTEX_SEMAPHORE(s_logReadSemaphore);
#else
    IO_Init(&io, baudRate, clkSrcFreq, NULL);
     5f4:	461a      	mov	r2, r3
    io.ioType = device;
     5f6:	f88d 1004 	strb.w	r1, [sp, #4]
    IO_Init(&io, baudRate, clkSrcFreq, NULL);
     5fa:	4668      	mov	r0, sp
     5fc:	2300      	movs	r3, #0
     5fe:	4621      	mov	r1, r4
     600:	f7ff ffac 	bl	55c <IO_Init>
    /* Debug console lock create */
    LOG_CREATE_MUTEX_SEMAPHORE(s_logPopSemaphore);
    LOG_CREATE_BINARY_SEMAPHORE(s_logReadWaitSemaphore);

    return kStatus_Success;
}
     604:	2000      	movs	r0, #0
     606:	b002      	add	sp, #8
     608:	bd10      	pop	{r4, pc}
     60a:	bf00      	nop

0000060c <LOG_Push>:

    return kStatus_Success;
}

int LOG_Push(uint8_t *buf, size_t size)
{
     60c:	b510      	push	{r4, lr}
    assert(buf != NULL);
     60e:	b150      	cbz	r0, 626 <LOG_Push+0x1a>
     610:	460c      	mov	r4, r1

int LOG_Pop(uint8_t *buf, size_t size)
{
    uint8_t getLock = 0U;

    if ((0 != size) && (NULL != buf))
     612:	b909      	cbnz	r1, 618 <LOG_Push+0xc>
{
     614:	2000      	movs	r0, #0
}
     616:	bd10      	pop	{r4, pc}
        LOG_TAKE_MUTEX_SEMAPHORE_NONBLOCKING(s_logPopSemaphore, getLock);

        if (getLock)
        {
            /* call IO transfer function */
            if (IO_Transfer(buf, size, true) != kStatus_Success)
     618:	2201      	movs	r2, #1
     61a:	f7ff ffcd 	bl	5b8 <IO_Transfer>
     61e:	2800      	cmp	r0, #0
     620:	d1f8      	bne.n	614 <LOG_Push+0x8>
     622:	4620      	mov	r0, r4
}
     624:	bd10      	pop	{r4, pc}
    assert(buf != NULL);
     626:	4b03      	ldr	r3, [pc, #12]	; (634 <LOG_Push+0x28>)
     628:	4a03      	ldr	r2, [pc, #12]	; (638 <LOG_Push+0x2c>)
     62a:	4804      	ldr	r0, [pc, #16]	; (63c <LOG_Push+0x30>)
     62c:	f240 113f 	movw	r1, #319	; 0x13f
     630:	f002 fab2 	bl	2b98 <__assert_func>
     634:	00003f0c 	.word	0x00003f0c
     638:	00003f30 	.word	0x00003f30
     63c:	00003f18 	.word	0x00003f18

00000640 <StrFormatPrintf>:
    return nlen;
}
#endif /* PRINTF_FLOAT_ENABLE */

int StrFormatPrintf(const char *fmt, va_list ap, char *buf, printfCb cb)
{
     640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     644:	b08d      	sub	sp, #52	; 0x34
#if PRINTF_FLOAT_ENABLE
    double fval;
#endif /* PRINTF_FLOAT_ENABLE */

    /* Start parsing apart the format string and display appropriate formats and data. */
    for (p = (char *)fmt; (c = *p) != 0; p++)
     646:	f890 c000 	ldrb.w	ip, [r0]
    int32_t count = 0;
     64a:	2600      	movs	r6, #0
{
     64c:	4605      	mov	r5, r0
    int32_t count = 0;
     64e:	9602      	str	r6, [sp, #8]
    for (p = (char *)fmt; (c = *p) != 0; p++)
     650:	4660      	mov	r0, ip
     652:	f1bc 0f00 	cmp.w	ip, #0
     656:	d016      	beq.n	686 <StrFormatPrintf+0x46>
            b = a / radix;
     658:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8f8 <_HeapSize+0xf8>
         * character by the __compiler__.  Thus, no need for this
         * routine to account for the '\' character.
         */
        if (c != '%')
        {
            cb(buf, &count, c, 1);
     65c:	9600      	str	r6, [sp, #0]
     65e:	4690      	mov	r8, r2
     660:	4699      	mov	r9, r3
     662:	468a      	mov	sl, r1
     664:	4662      	mov	r2, ip
        if (c != '%')
     666:	2825      	cmp	r0, #37	; 0x25
     668:	f105 0401 	add.w	r4, r5, #1
     66c:	d00e      	beq.n	68c <StrFormatPrintf+0x4c>
            cb(buf, &count, c, 1);
     66e:	2301      	movs	r3, #1
     670:	a902      	add	r1, sp, #8
     672:	4640      	mov	r0, r8
     674:	47c8      	blx	r9
            /* By using 'continue', the next iteration of the loop is used, skipping the code that follows. */
            continue;
     676:	4623      	mov	r3, r4
     678:	462c      	mov	r4, r5
     67a:	461d      	mov	r5, r3
    for (p = (char *)fmt; (c = *p) != 0; p++)
     67c:	7860      	ldrb	r0, [r4, #1]
     67e:	4602      	mov	r2, r0
     680:	2800      	cmp	r0, #0
     682:	d1f0      	bne.n	666 <StrFormatPrintf+0x26>
     684:	9802      	ldr	r0, [sp, #8]
            }
        }
    }

    return count;
}
     686:	b00d      	add	sp, #52	; 0x34
     688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            c = *++p;
     68c:	786a      	ldrb	r2, [r5, #1]
            if ((c >= '0') && (c <= '9'))
     68e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
     692:	2b09      	cmp	r3, #9
     694:	4611      	mov	r1, r2
        field_width = 0;
     696:	f04f 0300 	mov.w	r3, #0
            if ((c >= '0') && (c <= '9'))
     69a:	d80e      	bhi.n	6ba <StrFormatPrintf+0x7a>
        field_width = 0;
     69c:	9f00      	ldr	r7, [sp, #0]
                field_width = (field_width * 10) + (c - '0');
     69e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     6a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
            c = *++p;
     6a6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
            if ((c >= '0') && (c <= '9'))
     6aa:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
     6ae:	2809      	cmp	r0, #9
                field_width = (field_width * 10) + (c - '0');
     6b0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
            if ((c >= '0') && (c <= '9'))
     6b4:	460a      	mov	r2, r1
     6b6:	d9f2      	bls.n	69e <StrFormatPrintf+0x5e>
     6b8:	9700      	str	r7, [sp, #0]
        if (*++p == '.')
     6ba:	2a2e      	cmp	r2, #46	; 0x2e
     6bc:	d060      	beq.n	780 <StrFormatPrintf+0x140>
            if ((c == 'd') || (c == 'i') || (c == 'f') || (c == 'F') || (c == 'x') || (c == 'X') || (c == 'o') ||
     6be:	2a64      	cmp	r2, #100	; 0x64
     6c0:	f104 0501 	add.w	r5, r4, #1
     6c4:	d046      	beq.n	754 <StrFormatPrintf+0x114>
     6c6:	f002 01df 	and.w	r1, r2, #223	; 0xdf
     6ca:	2946      	cmp	r1, #70	; 0x46
     6cc:	d018      	beq.n	700 <StrFormatPrintf+0xc0>
     6ce:	2958      	cmp	r1, #88	; 0x58
     6d0:	d016      	beq.n	700 <StrFormatPrintf+0xc0>
     6d2:	f1a2 0162 	sub.w	r1, r2, #98	; 0x62
     6d6:	b2c9      	uxtb	r1, r1
     6d8:	2913      	cmp	r1, #19
     6da:	d90c      	bls.n	6f6 <StrFormatPrintf+0xb6>
            else if (c == 'c')
     6dc:	2a63      	cmp	r2, #99	; 0x63
     6de:	f040 80de 	bne.w	89e <_HeapSize+0x9e>
                cval = (char)va_arg(ap, uint32_t);
     6e2:	f10a 0c04 	add.w	ip, sl, #4
                cb(buf, &count, cval, 1);
     6e6:	f89a 2000 	ldrb.w	r2, [sl]
     6ea:	2301      	movs	r3, #1
     6ec:	a902      	add	r1, sp, #8
     6ee:	4640      	mov	r0, r8
                cval = (char)va_arg(ap, uint32_t);
     6f0:	46e2      	mov	sl, ip
                cb(buf, &count, cval, 1);
     6f2:	47c8      	blx	r9
     6f4:	e7c2      	b.n	67c <StrFormatPrintf+0x3c>
            if ((c == 'd') || (c == 'i') || (c == 'f') || (c == 'F') || (c == 'x') || (c == 'X') || (c == 'o') ||
     6f6:	487f      	ldr	r0, [pc, #508]	; (8f4 <_HeapSize+0xf4>)
     6f8:	fa20 f101 	lsr.w	r1, r0, r1
     6fc:	07c9      	lsls	r1, r1, #31
     6fe:	d5ed      	bpl.n	6dc <StrFormatPrintf+0x9c>
                if ((c == 'd') || (c == 'i'))
     700:	2a69      	cmp	r2, #105	; 0x69
     702:	d027      	beq.n	754 <StrFormatPrintf+0x114>
                if ((c == 'X') || (c == 'x'))
     704:	2a58      	cmp	r2, #88	; 0x58
     706:	d038      	beq.n	77a <StrFormatPrintf+0x13a>
     708:	2a78      	cmp	r2, #120	; 0x78
     70a:	d042      	beq.n	792 <StrFormatPrintf+0x152>
                if ((c == 'o') || (c == 'b') || (c == 'p') || (c == 'u'))
     70c:	2a6f      	cmp	r2, #111	; 0x6f
        use_caps = true;
     70e:	f04f 0c01 	mov.w	ip, #1
                if ((c == 'o') || (c == 'b') || (c == 'p') || (c == 'u'))
     712:	d053      	beq.n	7bc <StrFormatPrintf+0x17c>
     714:	2a62      	cmp	r2, #98	; 0x62
     716:	f000 8099 	beq.w	84c <_HeapSize+0x4c>
     71a:	2a70      	cmp	r2, #112	; 0x70
     71c:	f000 80b3 	beq.w	886 <_HeapSize+0x86>
     720:	2a75      	cmp	r2, #117	; 0x75
     722:	f000 80b6 	beq.w	892 <_HeapSize+0x92>
                cb(buf, &count, ' ', field_width - vlen);
     726:	1b9b      	subs	r3, r3, r6
     728:	2220      	movs	r2, #32
     72a:	a902      	add	r1, sp, #8
     72c:	4640      	mov	r0, r8
     72e:	47c8      	blx	r9
                if (vstrp != NULL)
     730:	9b00      	ldr	r3, [sp, #0]
     732:	2b00      	cmp	r3, #0
     734:	d0a2      	beq.n	67c <StrFormatPrintf+0x3c>
                    while (*vstrp)
     736:	9b00      	ldr	r3, [sp, #0]
     738:	781a      	ldrb	r2, [r3, #0]
     73a:	2a00      	cmp	r2, #0
     73c:	d09e      	beq.n	67c <StrFormatPrintf+0x3c>
     73e:	9f00      	ldr	r7, [sp, #0]
                        cb(buf, &count, *vstrp--, 1);
     740:	2301      	movs	r3, #1
     742:	a902      	add	r1, sp, #8
     744:	4640      	mov	r0, r8
     746:	47c8      	blx	r9
                    while (*vstrp)
     748:	f817 2d01 	ldrb.w	r2, [r7, #-1]!
     74c:	2a00      	cmp	r2, #0
     74e:	d1f7      	bne.n	740 <StrFormatPrintf+0x100>
     750:	9700      	str	r7, [sp, #0]
     752:	e793      	b.n	67c <StrFormatPrintf+0x3c>
                        ival = (int32_t)va_arg(ap, int32_t);
     754:	f8da 1000 	ldr.w	r1, [sl]
    *nstrp++ = '\0';
     758:	2600      	movs	r6, #0
     75a:	f88d 600c 	strb.w	r6, [sp, #12]
                        ival = (int32_t)va_arg(ap, int32_t);
     75e:	f10a 0a04 	add.w	sl, sl, #4
        if (a == 0)
     762:	2900      	cmp	r1, #0
     764:	d142      	bne.n	7ec <StrFormatPrintf+0x1ac>
            *nstrp = '0';
     766:	2130      	movs	r1, #48	; 0x30
     768:	2701      	movs	r7, #1
     76a:	f88d 100d 	strb.w	r1, [sp, #13]
            return nlen;
     76e:	463e      	mov	r6, r7
                    vstrp = &vstr[vlen];
     770:	a903      	add	r1, sp, #12
     772:	1879      	adds	r1, r7, r1
                if ((c == 'X') || (c == 'x'))
     774:	2a58      	cmp	r2, #88	; 0x58
                    vstrp = &vstr[vlen];
     776:	9100      	str	r1, [sp, #0]
                if ((c == 'X') || (c == 'x'))
     778:	d1c6      	bne.n	708 <StrFormatPrintf+0xc8>
        use_caps = true;
     77a:	f04f 0c01 	mov.w	ip, #1
     77e:	e00a      	b.n	796 <StrFormatPrintf+0x156>
     780:	9f00      	ldr	r7, [sp, #0]
                c = *++p;
     782:	f814 2f01 	ldrb.w	r2, [r4, #1]!
                if ((c >= '0') && (c <= '9'))
     786:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
     78a:	2909      	cmp	r1, #9
     78c:	d9f9      	bls.n	782 <StrFormatPrintf+0x142>
     78e:	9700      	str	r7, [sp, #0]
     790:	e795      	b.n	6be <StrFormatPrintf+0x7e>
                        use_caps = false;
     792:	f04f 0c00 	mov.w	ip, #0
                        uval = (uint32_t)va_arg(ap, uint32_t);
     796:	f8da 1000 	ldr.w	r1, [sl]
    *nstrp++ = '\0';
     79a:	2600      	movs	r6, #0
     79c:	f88d 600c 	strb.w	r6, [sp, #12]
                        uval = (uint32_t)va_arg(ap, uint32_t);
     7a0:	f10a 0a04 	add.w	sl, sl, #4
        if (ua == 0)
     7a4:	2900      	cmp	r1, #0
     7a6:	d157      	bne.n	858 <_HeapSize+0x58>
            *nstrp = '0';
     7a8:	2130      	movs	r1, #48	; 0x30
     7aa:	2701      	movs	r7, #1
     7ac:	f88d 100d 	strb.w	r1, [sp, #13]
            return nlen;
     7b0:	463e      	mov	r6, r7
                    vstrp = &vstr[vlen];
     7b2:	a903      	add	r1, sp, #12
     7b4:	1879      	adds	r1, r7, r1
                if ((c == 'o') || (c == 'b') || (c == 'p') || (c == 'u'))
     7b6:	2a6f      	cmp	r2, #111	; 0x6f
                    vstrp = &vstr[vlen];
     7b8:	9100      	str	r1, [sp, #0]
                if ((c == 'o') || (c == 'b') || (c == 'p') || (c == 'u'))
     7ba:	d1ab      	bne.n	714 <StrFormatPrintf+0xd4>
                        uval = (uint32_t)va_arg(ap, uint32_t);
     7bc:	f8da 2000 	ldr.w	r2, [sl]
                        radix = 8;
     7c0:	2008      	movs	r0, #8
                        uval = (uint32_t)va_arg(ap, uint32_t);
     7c2:	f10a 0a04 	add.w	sl, sl, #4
    *nstrp++ = '\0';
     7c6:	2600      	movs	r6, #0
     7c8:	f88d 600c 	strb.w	r6, [sp, #12]
        if (ua == 0)
     7cc:	bb2a      	cbnz	r2, 81a <_HeapSize+0x1a>
            *nstrp = '0';
     7ce:	2230      	movs	r2, #48	; 0x30
     7d0:	2701      	movs	r7, #1
     7d2:	f88d 200d 	strb.w	r2, [sp, #13]
            return nlen;
     7d6:	463e      	mov	r6, r7
                    vstrp = &vstr[vlen];
     7d8:	f10d 0c0c 	add.w	ip, sp, #12
                cb(buf, &count, ' ', field_width - vlen);
     7dc:	1bdb      	subs	r3, r3, r7
                    vstrp = &vstr[vlen];
     7de:	4467      	add	r7, ip
                cb(buf, &count, ' ', field_width - vlen);
     7e0:	2220      	movs	r2, #32
     7e2:	a902      	add	r1, sp, #8
     7e4:	4640      	mov	r0, r8
                    vstrp = &vstr[vlen];
     7e6:	9700      	str	r7, [sp, #0]
                cb(buf, &count, ' ', field_width - vlen);
     7e8:	47c8      	blx	r9
     7ea:	e7a4      	b.n	736 <StrFormatPrintf+0xf6>
    *nstrp++ = '\0';
     7ec:	f10d 0c0d 	add.w	ip, sp, #13
            b = a / radix;
     7f0:	fb8b 7001 	smull	r7, r0, fp, r1
     7f4:	17cf      	asrs	r7, r1, #31
     7f6:	ebc7 07a0 	rsb	r7, r7, r0, asr #2
     7fa:	eb07 0087 	add.w	r0, r7, r7, lsl #2
            if (c < 0)
     7fe:	ebb1 0040 	subs.w	r0, r1, r0, lsl #1
                c = (uint32_t)(~uc) + 1 + '0';
     802:	bf4c      	ite	mi
     804:	f1c0 0030 	rsbmi	r0, r0, #48	; 0x30
                c = c + '0';
     808:	3030      	addpl	r0, #48	; 0x30
            *nstrp++ = (char)c;
     80a:	f80c 0b01 	strb.w	r0, [ip], #1
            ++nlen;
     80e:	3601      	adds	r6, #1
     810:	4639      	mov	r1, r7
        while (a != 0)
     812:	2f00      	cmp	r7, #0
     814:	d1ec      	bne.n	7f0 <StrFormatPrintf+0x1b0>
     816:	4637      	mov	r7, r6
     818:	e7aa      	b.n	770 <StrFormatPrintf+0x130>
     81a:	f1bc 0f00 	cmp.w	ip, #0
                uc = uc - 10 + (use_caps ? 'A' : 'a');
     81e:	bf14      	ite	ne
     820:	f04f 0c37 	movne.w	ip, #55	; 0x37
     824:	f04f 0c57 	moveq.w	ip, #87	; 0x57
    *nstrp++ = '\0';
     828:	f10d 070d 	add.w	r7, sp, #13
            ub = ua / (uint32_t)radix;
     82c:	fbb2 f1f0 	udiv	r1, r2, r0
     830:	fb00 2211 	mls	r2, r0, r1, r2
            if (uc < 10)
     834:	2a09      	cmp	r2, #9
                uc = uc + '0';
     836:	bf94      	ite	ls
     838:	3230      	addls	r2, #48	; 0x30
                uc = uc - 10 + (use_caps ? 'A' : 'a');
     83a:	4462      	addhi	r2, ip
            *nstrp++ = (char)uc;
     83c:	f807 2b01 	strb.w	r2, [r7], #1
            ++nlen;
     840:	3601      	adds	r6, #1
     842:	460a      	mov	r2, r1
        while (ua != 0)
     844:	2900      	cmp	r1, #0
     846:	d1f1      	bne.n	82c <_HeapSize+0x2c>
     848:	4637      	mov	r7, r6
     84a:	e7c5      	b.n	7d8 <StrFormatPrintf+0x198>
                        uval = (uint32_t)va_arg(ap, uint32_t);
     84c:	f8da 2000 	ldr.w	r2, [sl]
                        radix = 2;
     850:	2002      	movs	r0, #2
                        uval = (uint32_t)va_arg(ap, uint32_t);
     852:	f10a 0a04 	add.w	sl, sl, #4
     856:	e7b6      	b.n	7c6 <StrFormatPrintf+0x186>
     858:	f1bc 0f00 	cmp.w	ip, #0
                uc = uc - 10 + (use_caps ? 'A' : 'a');
     85c:	bf14      	ite	ne
     85e:	f04f 0e37 	movne.w	lr, #55	; 0x37
     862:	f04f 0e57 	moveq.w	lr, #87	; 0x57
    *nstrp++ = '\0';
     866:	f10d 070d 	add.w	r7, sp, #13
     86a:	f001 000f 	and.w	r0, r1, #15
            if (uc < 10)
     86e:	2809      	cmp	r0, #9
                uc = uc + '0';
     870:	bf94      	ite	ls
     872:	3030      	addls	r0, #48	; 0x30
                uc = uc - 10 + (use_caps ? 'A' : 'a');
     874:	4470      	addhi	r0, lr
            ub = ua / (uint32_t)radix;
     876:	0909      	lsrs	r1, r1, #4
            *nstrp++ = (char)uc;
     878:	f807 0b01 	strb.w	r0, [r7], #1
            ++nlen;
     87c:	3601      	adds	r6, #1
        while (ua != 0)
     87e:	2900      	cmp	r1, #0
     880:	d1f3      	bne.n	86a <_HeapSize+0x6a>
     882:	4637      	mov	r7, r6
     884:	e795      	b.n	7b2 <StrFormatPrintf+0x172>
                        uval = (uint32_t)va_arg(ap, uint32_t);
     886:	f8da 2000 	ldr.w	r2, [sl]
                        radix = 16;
     88a:	2010      	movs	r0, #16
                        uval = (uint32_t)va_arg(ap, uint32_t);
     88c:	f10a 0a04 	add.w	sl, sl, #4
     890:	e799      	b.n	7c6 <StrFormatPrintf+0x186>
     892:	f8da 2000 	ldr.w	r2, [sl]
                        radix = 10;
     896:	200a      	movs	r0, #10
                        uval = (uint32_t)va_arg(ap, uint32_t);
     898:	f10a 0a04 	add.w	sl, sl, #4
     89c:	e793      	b.n	7c6 <StrFormatPrintf+0x186>
            else if (c == 's')
     89e:	2a73      	cmp	r2, #115	; 0x73
     8a0:	d004      	beq.n	8ac <_HeapSize+0xac>
                cb(buf, &count, c, 1);
     8a2:	2301      	movs	r3, #1
     8a4:	a902      	add	r1, sp, #8
     8a6:	4640      	mov	r0, r8
     8a8:	47c8      	blx	r9
     8aa:	e6e7      	b.n	67c <StrFormatPrintf+0x3c>
                sval = (char *)va_arg(ap, char *);
     8ac:	f8da 2000 	ldr.w	r2, [sl]
     8b0:	f10a 0a04 	add.w	sl, sl, #4
                if (sval)
     8b4:	2a00      	cmp	r2, #0
     8b6:	f43f aee1 	beq.w	67c <StrFormatPrintf+0x3c>
                    vlen = strlen(sval);
     8ba:	4610      	mov	r0, r2
     8bc:	4617      	mov	r7, r2
     8be:	9301      	str	r3, [sp, #4]
     8c0:	f003 fa38 	bl	3d34 <strlen>
                        cb(buf, &count, ' ', field_width - vlen);
     8c4:	9b01      	ldr	r3, [sp, #4]
     8c6:	3f01      	subs	r7, #1
     8c8:	1a1b      	subs	r3, r3, r0
     8ca:	9701      	str	r7, [sp, #4]
                    vlen = strlen(sval);
     8cc:	4606      	mov	r6, r0
                        cb(buf, &count, ' ', field_width - vlen);
     8ce:	2220      	movs	r2, #32
     8d0:	a902      	add	r1, sp, #8
     8d2:	4640      	mov	r0, r8
     8d4:	47c8      	blx	r9
     8d6:	9f00      	ldr	r7, [sp, #0]
                        while (*sval)
     8d8:	9b01      	ldr	r3, [sp, #4]
     8da:	f813 cf01 	ldrb.w	ip, [r3, #1]!
     8de:	9301      	str	r3, [sp, #4]
                            cb(buf, &count, *sval++, 1);
     8e0:	4662      	mov	r2, ip
     8e2:	2301      	movs	r3, #1
     8e4:	a902      	add	r1, sp, #8
     8e6:	4640      	mov	r0, r8
                        while (*sval)
     8e8:	f1bc 0f00 	cmp.w	ip, #0
     8ec:	f43f af30 	beq.w	750 <StrFormatPrintf+0x110>
                            cb(buf, &count, *sval++, 1);
     8f0:	47c8      	blx	r9
     8f2:	e7f1      	b.n	8d8 <_HeapSize+0xd8>
     8f4:	00086081 	.word	0x00086081
     8f8:	66666667 	.word	0x66666667

000008fc <_Z8GetCrc32tt>:
	config.crcResult = kCrcFinalChecksum;

	CRC_Init(base, &config);
}

uint32_t GetCrc32(uint16_t extAddressBase, uint16_t nBytes) {
     8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     900:	b087      	sub	sp, #28
	config.polynomial = 0x04C11DB7U;
     902:	4b2f      	ldr	r3, [pc, #188]	; (9c0 <_Z8GetCrc32tt+0xc4>)
     904:	9302      	str	r3, [sp, #8]
	config.reflectIn = true;
     906:	2501      	movs	r5, #1
uint32_t GetCrc32(uint16_t extAddressBase, uint16_t nBytes) {
     908:	460e      	mov	r6, r1
     90a:	4604      	mov	r4, r0
	config.seed = seed;
     90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	config.crcResult = kCrcFinalChecksum;
     910:	2300      	movs	r3, #0
	CRC_Init(base, &config);
     912:	482c      	ldr	r0, [pc, #176]	; (9c4 <_Z8GetCrc32tt+0xc8>)
	config.seed = seed;
     914:	9203      	str	r2, [sp, #12]
	CRC_Init(base, &config);
     916:	a902      	add	r1, sp, #8
	config.reflectIn = true;
     918:	f88d 5010 	strb.w	r5, [sp, #16]
	config.reflectOut = true;
     91c:	f88d 5011 	strb.w	r5, [sp, #17]
	config.complementChecksum = true;
     920:	f88d 5012 	strb.w	r5, [sp, #18]
	config.crcBits = kCrcBits32;
     924:	f88d 5013 	strb.w	r5, [sp, #19]
	config.crcResult = kCrcFinalChecksum;
     928:	f88d 3014 	strb.w	r3, [sp, #20]
	CRC_Init(base, &config);
     92c:	f000 faa8 	bl	e80 <CRC_Init>
	CRC_Type *base = CRC0;
	InitCrc32(base, 0xFFFFFFFFU);
	for (uint32_t address = extAddressBase; nBytes-- > 0; address++) {
     930:	2e00      	cmp	r6, #0
     932:	d03e      	beq.n	9b2 <_Z8GetCrc32tt+0xb6>
     934:	1e73      	subs	r3, r6, #1
     936:	b29b      	uxth	r3, r3
     938:	eb03 0a04 	add.w	sl, r3, r4
	MR_WRITABLE = 1,
	MR_READONLY = 0
};

INLINE void setExtOut8() {
	BOARD_INITPINS_EX_8_GPIO->PSOR = (1U << BOARD_INITPINS_EX_8_PIN);
     93c:	f8df b08c 	ldr.w	fp, [pc, #140]	; 9cc <_Z8GetCrc32tt+0xd0>
	// TODO(nk): wait for E falling edge
	setExtOut8();	// DEBUG
	// drive E low
	// BOARD_INITPINS_MCU_E_GPIO->PCOR = (1U << BOARD_INITPINS_MCU_E_PIN);
	// output addr | R | VMA
	BOARD_ADDR_GPIO->PDOR = (uint32_t)addr | BOARD_READ_RW_MASK | BOARD_VMA_MASK;
     940:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9d0 <_Z8GetCrc32tt+0xd4>
	// set D0-D7 to inputs
	BOARD_DATA_GPIO->PDDR = BOARD_DATA_INPUT_DIR;
     944:	f8df 808c 	ldr.w	r8, [pc, #140]	; 9d4 <_Z8GetCrc32tt+0xd8>

	// wait at least 160 nsec
	delayLoop(1);

	// drive E high (TODO: make E an input)
	BOARD_INITPINS_MCU_E_GPIO->PSOR = (1U << BOARD_INITPINS_MCU_E_PIN);
     948:	4f1f      	ldr	r7, [pc, #124]	; (9c8 <_Z8GetCrc32tt+0xcc>)
     94a:	44aa      	add	sl, r5
     94c:	f44f 7680 	mov.w	r6, #256	; 0x100
     950:	b2a1      	uxth	r1, r4
	BOARD_ADDR_GPIO->PDOR = (uint32_t)addr | BOARD_READ_RW_MASK | BOARD_VMA_MASK;
     952:	f441 3340 	orr.w	r3, r1, #196608	; 0x30000
	BOARD_INITPINS_EX_8_GPIO->PSOR = (1U << BOARD_INITPINS_EX_8_PIN);
     956:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     95a:	f8cb 2004 	str.w	r2, [fp, #4]
	BOARD_ADDR_GPIO->PDOR = (uint32_t)addr | BOARD_READ_RW_MASK | BOARD_VMA_MASK;
     95e:	f8c9 3000 	str.w	r3, [r9]
	BOARD_DATA_GPIO->PDDR = BOARD_DATA_INPUT_DIR;
     962:	f44f 4370 	mov.w	r3, #61440	; 0xf000
     966:	f8c8 3014 	str.w	r3, [r8, #20]
	uint32_t volatile i = delay;
     96a:	9501      	str	r5, [sp, #4]
	while (i-- != 0) {
     96c:	9b01      	ldr	r3, [sp, #4]
     96e:	1e5a      	subs	r2, r3, #1
     970:	9201      	str	r2, [sp, #4]
     972:	2b00      	cmp	r3, #0
     974:	d1fa      	bne.n	96c <_Z8GetCrc32tt+0x70>
	uint32_t volatile i = delay;
     976:	2304      	movs	r3, #4
	BOARD_INITPINS_MCU_E_GPIO->PSOR = (1U << BOARD_INITPINS_MCU_E_PIN);
     978:	607e      	str	r6, [r7, #4]
	uint32_t volatile i = delay;
     97a:	9302      	str	r3, [sp, #8]
	while (i-- != 0) {
     97c:	9b02      	ldr	r3, [sp, #8]
     97e:	1e5a      	subs	r2, r3, #1
     980:	9202      	str	r2, [sp, #8]
     982:	2b00      	cmp	r3, #0
     984:	d1fa      	bne.n	97c <_Z8GetCrc32tt+0x80>
	// drive E low (TODO: make E an input)
	BOARD_INITPINS_MCU_E_GPIO->PCOR = (1U << BOARD_INITPINS_MCU_E_PIN);

	// 20ns hold time?
	// drive VMA low
	BOARD_ADDR_GPIO->PDOR = (uint32_t)addr | BOARD_READ_RW_MASK;
     986:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
	uint8_t retval = BOARD_DATA_GPIO->PDIR & BOARD_DATA_MASK;
     98a:	f8d8 3010 	ldr.w	r3, [r8, #16]
	BOARD_INITPINS_MCU_E_GPIO->PCOR = (1U << BOARD_INITPINS_MCU_E_PIN);
     98e:	60be      	str	r6, [r7, #8]
	BOARD_ADDR_GPIO->PDOR = (uint32_t)addr | BOARD_READ_RW_MASK;
     990:	f8c9 1000 	str.w	r1, [r9]
	BOARD_INITPINS_EX_8_GPIO->PCOR = (1U << BOARD_INITPINS_EX_8_PIN);
     994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     998:	f8cb 1008 	str.w	r1, [fp, #8]
     99c:	3401      	adds	r4, #1
		uint8_t byte = cpu_readmem_external(address);
		CRC_WriteData(base, &byte, 1);
     99e:	4809      	ldr	r0, [pc, #36]	; (9c4 <_Z8GetCrc32tt+0xc8>)
	uint8_t retval = BOARD_DATA_GPIO->PDIR & BOARD_DATA_MASK;
     9a0:	f88d 3003 	strb.w	r3, [sp, #3]
     9a4:	2201      	movs	r2, #1
     9a6:	f10d 0103 	add.w	r1, sp, #3
     9aa:	f000 fab9 	bl	f20 <CRC_WriteData>
	for (uint32_t address = extAddressBase; nBytes-- > 0; address++) {
     9ae:	4554      	cmp	r4, sl
     9b0:	d1ce      	bne.n	950 <_Z8GetCrc32tt+0x54>
	}
	return CRC_Get32bitResult(base);
     9b2:	4804      	ldr	r0, [pc, #16]	; (9c4 <_Z8GetCrc32tt+0xc8>)
     9b4:	f000 fadc 	bl	f70 <CRC_Get32bitResult>
}
     9b8:	b007      	add	sp, #28
     9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9be:	bf00      	nop
     9c0:	04c11db7 	.word	0x04c11db7
     9c4:	40032000 	.word	0x40032000
     9c8:	400ff000 	.word	0x400ff000
     9cc:	400ff080 	.word	0x400ff080
     9d0:	400ff0c0 	.word	0x400ff0c0
     9d4:	400ff040 	.word	0x400ff040

000009d8 <_Z10PrintCrc32tt>:

void PrintCrc32(uint16_t extAddressBase, uint16_t nBytes) {
     9d8:	b570      	push	{r4, r5, r6, lr}
     9da:	4605      	mov	r5, r0
     9dc:	460c      	mov	r4, r1
	uint32_t crc = GetCrc32(extAddressBase, nBytes);
     9de:	f7ff ff8d 	bl	8fc <_Z8GetCrc32tt>
	PRINTF("%04X-%04X CRC=%04X\r\n", extAddressBase, extAddressBase+nBytes-1, crc);
     9e2:	1962      	adds	r2, r4, r5
     9e4:	4603      	mov	r3, r0
     9e6:	4629      	mov	r1, r5
     9e8:	3a01      	subs	r2, #1
     9ea:	4802      	ldr	r0, [pc, #8]	; (9f4 <_Z10PrintCrc32tt+0x1c>)
}
     9ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PRINTF("%04X-%04X CRC=%04X\r\n", extAddressBase, extAddressBase+nBytes-1, crc);
     9f0:	f7ff bd96 	b.w	520 <DbgConsole_Printf>
     9f4:	00003f3c 	.word	0x00003f3c

000009f8 <main>:

int main(void) {
     9f8:	b508      	push	{r3, lr}
  	/* Init board hardware. */
    BOARD_InitBootPins();
     9fa:	f001 f91b 	bl	1c34 <BOARD_InitBootPins>
    BOARD_InitBootClocks();	// slow clock
     9fe:	f000 fddd 	bl	15bc <BOARD_InitBootClocks>
    BOARD_FastClock();
     a02:	f000 fd31 	bl	1468 <BOARD_FastClock>
    BOARD_InitBootPeripherals();
     a06:	f000 fddb 	bl	15c0 <BOARD_InitBootPeripherals>
  	/* Init FSL debug console. */
    BOARD_InitDebugConsole();
     a0a:	f000 fd0d 	bl	1428 <BOARD_InitDebugConsole>

    PRINTF("Pinball ROM CRC check\r\n");
     a0e:	480e      	ldr	r0, [pc, #56]	; (a48 <main+0x50>)
     a10:	f7ff fd86 	bl	520 <DbgConsole_Printf>

    while (1) {
    	PrintCrc32(ROM_5800_BASE, 0x0800);
     a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
     a18:	f44f 4058 	mov.w	r0, #55296	; 0xd800
     a1c:	f7ff ffdc 	bl	9d8 <_Z10PrintCrc32tt>
    	PrintCrc32(ROM_6000_BASE, 0x0800);
     a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
     a24:	f44f 4060 	mov.w	r0, #57344	; 0xe000
     a28:	f7ff ffd6 	bl	9d8 <_Z10PrintCrc32tt>
    	PrintCrc32(ROM_6800_BASE, 0x0800);
     a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
     a30:	f44f 4068 	mov.w	r0, #59392	; 0xe800
     a34:	f7ff ffd0 	bl	9d8 <_Z10PrintCrc32tt>
    	PrintCrc32(ROM_7000_BASE, 0x1000);
     a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     a3c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
     a40:	f7ff ffca 	bl	9d8 <_Z10PrintCrc32tt>
     a44:	e7e6      	b.n	a14 <main+0x1c>
     a46:	bf00      	nop
     a48:	00003f54 	.word	0x00003f54

00000a4c <HardFault_Handler>:
// Allow handler to be removed by setting a define (via command line)
#if !defined (__SEMIHOST_HARDFAULT_DISABLE)

__attribute__((naked))
void HardFault_Handler(void){
    __asm(  ".syntax unified\n"
     a4c:	2004      	movs	r0, #4
     a4e:	4671      	mov	r1, lr
     a50:	4208      	tst	r0, r1
     a52:	d002      	beq.n	a5a <_MSP>
     a54:	f3ef 8009 	mrs	r0, PSP
     a58:	e001      	b.n	a5e <_process>

00000a5a <_MSP>:
     a5a:	f3ef 8008 	mrs	r0, MSP

00000a5e <_process>:
     a5e:	6981      	ldr	r1, [r0, #24]
     a60:	880a      	ldrh	r2, [r1, #0]
     a62:	f64b 63ab 	movw	r3, #48811	; 0xbeab
     a66:	429a      	cmp	r2, r3
     a68:	d000      	beq.n	a6c <_semihost_return>
     a6a:	e7fe      	b.n	a6a <_process+0xc>

00000a6c <_semihost_return>:
     a6c:	3102      	adds	r1, #2
     a6e:	6181      	str	r1, [r0, #24]
     a70:	2120      	movs	r1, #32
     a72:	6001      	str	r1, [r0, #0]
     a74:	4770      	bx	lr
     a76:	bf00      	nop

00000a78 <CLOCK_GetSysOscFreq.part.2>:
    SCG->SOSCCSR = SCG_SOSCCSR_SOSCERR_MASK;

    return kStatus_Success;
}

uint32_t CLOCK_GetSysOscFreq(void)
     a78:	b508      	push	{r3, lr}
{
    if (SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) /* System OSC clock is valid. */
    {
        /* Please call CLOCK_SetXtal0Freq base on board setting before using OSC0 clock. */
        assert(g_xtal0Freq);
     a7a:	4a03      	ldr	r2, [pc, #12]	; (a88 <CLOCK_GetSysOscFreq.part.2+0x10>)
     a7c:	4b03      	ldr	r3, [pc, #12]	; (a8c <CLOCK_GetSysOscFreq.part.2+0x14>)
     a7e:	4804      	ldr	r0, [pc, #16]	; (a90 <CLOCK_GetSysOscFreq.part.2+0x18>)
     a80:	f240 11af 	movw	r1, #431	; 0x1af
     a84:	f002 f888 	bl	2b98 <__assert_func>
     a88:	00003fc4 	.word	0x00003fc4
     a8c:	00003f6c 	.word	0x00003f6c
     a90:	00003f78 	.word	0x00003f78

00000a94 <CLOCK_GetSysPllCommonFreq>:

    return kStatus_Success;
}

static uint32_t CLOCK_GetSysPllCommonFreq(void)
{
     a94:	b508      	push	{r3, lr}
    uint32_t freq = 0U;

    if (SCG->SPLLCFG & SCG_SPLLCFG_SOURCE_MASK) /* If use FIRC */
     a96:	4b17      	ldr	r3, [pc, #92]	; (af4 <CLOCK_GetSysPllCommonFreq+0x60>)
     a98:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
     a9c:	07d2      	lsls	r2, r2, #31
     a9e:	d505      	bpl.n	aac <CLOCK_GetSysPllCommonFreq+0x18>
    if (SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) /* FIRC is valid. */
     aa0:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
     aa4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
     aa8:	d118      	bne.n	adc <CLOCK_GetSysPllCommonFreq+0x48>
        freq /= (SCG_SPLLCFG_PREDIV_VAL + SCG_SPLL_PREDIV_BASE_VALUE); /* Pre-divider. */
        freq *= (SCG_SPLLCFG_MULT_VAL + SCG_SPLL_MULT_BASE_VALUE);     /* Multiplier. */
    }

    return freq;
}
     aaa:	bd08      	pop	{r3, pc}
    if (SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) /* System OSC clock is valid. */
     aac:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
     ab0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
     ab4:	d0f9      	beq.n	aaa <CLOCK_GetSysPllCommonFreq+0x16>
        assert(g_xtal0Freq);
     ab6:	4b10      	ldr	r3, [pc, #64]	; (af8 <CLOCK_GetSysPllCommonFreq+0x64>)
     ab8:	6818      	ldr	r0, [r3, #0]
     aba:	b1c8      	cbz	r0, af0 <CLOCK_GetSysPllCommonFreq+0x5c>
        freq /= (SCG_SPLLCFG_PREDIV_VAL + SCG_SPLL_PREDIV_BASE_VALUE); /* Pre-divider. */
     abc:	4b0d      	ldr	r3, [pc, #52]	; (af4 <CLOCK_GetSysPllCommonFreq+0x60>)
     abe:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
        freq *= (SCG_SPLLCFG_MULT_VAL + SCG_SPLL_MULT_BASE_VALUE);     /* Multiplier. */
     ac2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
     ac6:	f3c3 4304 	ubfx	r3, r3, #16, #5
     aca:	3310      	adds	r3, #16
        freq /= (SCG_SPLLCFG_PREDIV_VAL + SCG_SPLL_PREDIV_BASE_VALUE); /* Pre-divider. */
     acc:	f3c2 2202 	ubfx	r2, r2, #8, #3
     ad0:	3201      	adds	r2, #1
     ad2:	fbb0 f0f2 	udiv	r0, r0, r2
        freq *= (SCG_SPLLCFG_MULT_VAL + SCG_SPLL_MULT_BASE_VALUE);     /* Multiplier. */
     ad6:	fb00 f003 	mul.w	r0, r0, r3
}
     ada:	bd08      	pop	{r3, pc}
        return fircFreq[SCG_FIRCCFG_RANGE_VAL];
     adc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
     ae0:	4a06      	ldr	r2, [pc, #24]	; (afc <CLOCK_GetSysPllCommonFreq+0x68>)
     ae2:	f003 0303 	and.w	r3, r3, #3
     ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    if (freq) /* If source is valid. */
     aea:	2800      	cmp	r0, #0
     aec:	d1e6      	bne.n	abc <CLOCK_GetSysPllCommonFreq+0x28>
}
     aee:	bd08      	pop	{r3, pc}
     af0:	f7ff ffc2 	bl	a78 <CLOCK_GetSysOscFreq.part.2>
     af4:	40064000 	.word	0x40064000
     af8:	20000070 	.word	0x20000070
     afc:	0000400c 	.word	0x0000400c

00000b00 <CLOCK_GetSysOscAsyncFreq>:
    if (SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) /* System OSC clock is valid. */
     b00:	4a0f      	ldr	r2, [pc, #60]	; (b40 <CLOCK_GetSysOscAsyncFreq+0x40>)
{
     b02:	b508      	push	{r3, lr}
    if (SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) /* System OSC clock is valid. */
     b04:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
     b08:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
     b0c:	d00e      	beq.n	b2c <CLOCK_GetSysOscAsyncFreq+0x2c>
        assert(g_xtal0Freq);
     b0e:	4b0d      	ldr	r3, [pc, #52]	; (b44 <CLOCK_GetSysOscAsyncFreq+0x44>)
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	b193      	cbz	r3, b3a <CLOCK_GetSysOscAsyncFreq+0x3a>
        switch (type)
     b14:	b160      	cbz	r0, b30 <CLOCK_GetSysOscAsyncFreq+0x30>
     b16:	2801      	cmp	r0, #1
     b18:	d108      	bne.n	b2c <CLOCK_GetSysOscAsyncFreq+0x2c>
                divider = SCG_SOSCDIV_SOSCDIV2_VAL;
     b1a:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
     b1e:	f3c0 2002 	ubfx	r0, r0, #8, #3
    if (divider)
     b22:	b110      	cbz	r0, b2a <CLOCK_GetSysOscAsyncFreq+0x2a>
        return oscFreq >> (divider - 1U);
     b24:	3801      	subs	r0, #1
     b26:	fa23 f000 	lsr.w	r0, r3, r0
}
     b2a:	bd08      	pop	{r3, pc}
        return 0U;
     b2c:	2000      	movs	r0, #0
}
     b2e:	bd08      	pop	{r3, pc}
                divider = SCG_SOSCDIV_SOSCDIV1_VAL;
     b30:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
     b34:	f000 0007 	and.w	r0, r0, #7
                break;
     b38:	e7f3      	b.n	b22 <CLOCK_GetSysOscAsyncFreq+0x22>
     b3a:	f7ff ff9d 	bl	a78 <CLOCK_GetSysOscFreq.part.2>
     b3e:	bf00      	nop
     b40:	40064000 	.word	0x40064000
     b44:	20000070 	.word	0x20000070

00000b48 <CLOCK_InitSirc>:
{
     b48:	b538      	push	{r3, r4, r5, lr}
    assert(config);
     b4a:	b340      	cbz	r0, b9e <CLOCK_InitSirc+0x56>
    uint32_t reg = SCG->SIRCCSR;
     b4c:	4b17      	ldr	r3, [pc, #92]	; (bac <CLOCK_InitSirc+0x64>)
     b4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    if (reg & SCG_SIRCCSR_SIRCSEL_MASK)
     b52:	0191      	lsls	r1, r2, #6
     b54:	d420      	bmi.n	b98 <CLOCK_InitSirc+0x50>
    if (reg & SCG_SIRCCSR_LK_MASK)
     b56:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
     b5a:	d11b      	bne.n	b94 <CLOCK_InitSirc+0x4c>
    SCG->SIRCDIV = SCG_SIRCDIV_SIRCDIV1(config->div1) | SCG_SIRCDIV_SIRCDIV2(config->div2);
     b5c:	7941      	ldrb	r1, [r0, #5]
     b5e:	7905      	ldrb	r5, [r0, #4]
    SCG->SIRCCFG = SCG_SIRCCFG_RANGE(config->range);
     b60:	7984      	ldrb	r4, [r0, #6]
    SCG->SIRCCSR = 0U;
     b62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SCG->SIRCDIV = SCG_SIRCDIV_SIRCDIV1(config->div1) | SCG_SIRCDIV_SIRCDIV2(config->div2);
     b66:	020a      	lsls	r2, r1, #8
     b68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     b6c:	f005 0107 	and.w	r1, r5, #7
     b70:	430a      	orrs	r2, r1
    SCG->SIRCCFG = SCG_SIRCCFG_RANGE(config->range);
     b72:	f004 0401 	and.w	r4, r4, #1
    SCG->SIRCDIV = SCG_SIRCDIV_SIRCDIV1(config->div1) | SCG_SIRCDIV_SIRCDIV2(config->div2);
     b76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    SCG->SIRCCFG = SCG_SIRCCFG_RANGE(config->range);
     b7a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    SCG->SIRCCSR = SCG_SIRCCSR_SIRCEN_MASK | config->enableMode;
     b7e:	6802      	ldr	r2, [r0, #0]
     b80:	f042 0201 	orr.w	r2, r2, #1
     b84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    while (!(SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK))
     b88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     b8c:	01d2      	lsls	r2, r2, #7
     b8e:	d5fb      	bpl.n	b88 <CLOCK_InitSirc+0x40>
    return kStatus_Success;
     b90:	2000      	movs	r0, #0
}
     b92:	bd38      	pop	{r3, r4, r5, pc}
        return kStatus_ReadOnly;
     b94:	2002      	movs	r0, #2
}
     b96:	bd38      	pop	{r3, r4, r5, pc}
        return kStatus_SCG_Busy;
     b98:	f640 0035 	movw	r0, #2101	; 0x835
}
     b9c:	bd38      	pop	{r3, r4, r5, pc}
    assert(config);
     b9e:	4b04      	ldr	r3, [pc, #16]	; (bb0 <CLOCK_InitSirc+0x68>)
     ba0:	4a04      	ldr	r2, [pc, #16]	; (bb4 <CLOCK_InitSirc+0x6c>)
     ba2:	4805      	ldr	r0, [pc, #20]	; (bb8 <CLOCK_InitSirc+0x70>)
     ba4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
     ba8:	f001 fff6 	bl	2b98 <__assert_func>
     bac:	40064000 	.word	0x40064000
     bb0:	00003fac 	.word	0x00003fac
     bb4:	00003fd8 	.word	0x00003fd8
     bb8:	00003f78 	.word	0x00003f78

00000bbc <CLOCK_GetSircAsyncFreq>:
    if (SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) /* SIRC is valid. */
     bbc:	4a12      	ldr	r2, [pc, #72]	; (c08 <CLOCK_GetSircAsyncFreq+0x4c>)
     bbe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     bc2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
{
     bc6:	4601      	mov	r1, r0
    if (SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) /* SIRC is valid. */
     bc8:	d101      	bne.n	bce <CLOCK_GetSircAsyncFreq+0x12>
        return 0U;
     bca:	4618      	mov	r0, r3
}
     bcc:	4770      	bx	lr
        return sircFreq[SCG_SIRCCFG_RANGE_VAL];
     bce:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
     bd2:	480e      	ldr	r0, [pc, #56]	; (c0c <CLOCK_GetSircAsyncFreq+0x50>)
     bd4:	f003 0301 	and.w	r3, r3, #1
     bd8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    if (sircFreq)
     bdc:	2800      	cmp	r0, #0
     bde:	d0f5      	beq.n	bcc <CLOCK_GetSircAsyncFreq+0x10>
        switch (type)
     be0:	b161      	cbz	r1, bfc <CLOCK_GetSircAsyncFreq+0x40>
     be2:	2901      	cmp	r1, #1
     be4:	d108      	bne.n	bf8 <CLOCK_GetSircAsyncFreq+0x3c>
                divider = SCG_SIRCDIV_SIRCDIV2_VAL;
     be6:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
     bea:	f3c3 2302 	ubfx	r3, r3, #8, #3
    if (divider)
     bee:	2b00      	cmp	r3, #0
     bf0:	d0eb      	beq.n	bca <CLOCK_GetSircAsyncFreq+0xe>
        return sircFreq >> (divider - 1U);
     bf2:	3b01      	subs	r3, #1
     bf4:	40d8      	lsrs	r0, r3
     bf6:	4770      	bx	lr
        return 0U;
     bf8:	2000      	movs	r0, #0
     bfa:	4770      	bx	lr
                divider = SCG_SIRCDIV_SIRCDIV1_VAL;
     bfc:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
     c00:	f003 0307 	and.w	r3, r3, #7
                break;
     c04:	e7f3      	b.n	bee <CLOCK_GetSircAsyncFreq+0x32>
     c06:	bf00      	nop
     c08:	40064000 	.word	0x40064000
     c0c:	0000401c 	.word	0x0000401c

00000c10 <CLOCK_InitFirc>:
{
     c10:	b538      	push	{r3, r4, r5, lr}
    assert(config);
     c12:	2800      	cmp	r0, #0
     c14:	d050      	beq.n	cb8 <CLOCK_InitFirc+0xa8>
    uint32_t reg = SCG->FIRCCSR;
     c16:	4b2c      	ldr	r3, [pc, #176]	; (cc8 <CLOCK_InitFirc+0xb8>)
     c18:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    if (reg & SCG_FIRCCSR_FIRCSEL_MASK)
     c1c:	0194      	lsls	r4, r2, #6
     c1e:	d446      	bmi.n	cae <CLOCK_InitFirc+0x9e>
    if (reg & SCG_FIRCCSR_LK_MASK)
     c20:	0211      	lsls	r1, r2, #8
     c22:	d442      	bmi.n	caa <CLOCK_InitFirc+0x9a>
    SCG->FIRCDIV = SCG_FIRCDIV_FIRCDIV1(config->div1) | SCG_FIRCDIV_FIRCDIV2(config->div2);
     c24:	7942      	ldrb	r2, [r0, #5]
     c26:	7905      	ldrb	r5, [r0, #4]
    SCG->FIRCCFG = SCG_FIRCCFG_RANGE(config->range);
     c28:	7984      	ldrb	r4, [r0, #6]
    if (config->trimConfig)
     c2a:	6881      	ldr	r1, [r0, #8]
    SCG->FIRCDIV = SCG_FIRCDIV_FIRCDIV1(config->div1) | SCG_FIRCDIV_FIRCDIV2(config->div2);
     c2c:	0212      	lsls	r2, r2, #8
     c2e:	f005 0507 	and.w	r5, r5, #7
     c32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     c36:	432a      	orrs	r2, r5
    SCG->FIRCCFG = SCG_FIRCCFG_RANGE(config->range);
     c38:	f004 0403 	and.w	r4, r4, #3
    SCG->FIRCCSR = SCG_FIRCCSR_FIRCERR_MASK;
     c3c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
     c40:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300
    SCG->FIRCDIV = SCG_FIRCDIV_FIRCDIV1(config->div1) | SCG_FIRCDIV_FIRCDIV2(config->div2);
     c44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    SCG->FIRCCFG = SCG_FIRCCFG_RANGE(config->range);
     c48:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    if (config->trimConfig)
     c4c:	b1f1      	cbz	r1, c8c <CLOCK_InitFirc+0x7c>
            SCG_FIRCTCFG_TRIMDIV(config->trimConfig->trimDiv) | SCG_FIRCTCFG_TRIMSRC(config->trimConfig->trimSrc);
     c4e:	78ca      	ldrb	r2, [r1, #3]
     c50:	788c      	ldrb	r4, [r1, #2]
        if (kSCG_FircTrimNonUpdate == config->trimConfig->trimMode)
     c52:	880d      	ldrh	r5, [r1, #0]
            SCG_FIRCTCFG_TRIMDIV(config->trimConfig->trimDiv) | SCG_FIRCTCFG_TRIMSRC(config->trimConfig->trimSrc);
     c54:	0212      	lsls	r2, r2, #8
     c56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     c5a:	f004 0403 	and.w	r4, r4, #3
     c5e:	4322      	orrs	r2, r4
        if (kSCG_FircTrimNonUpdate == config->trimConfig->trimMode)
     c60:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
        SCG->FIRCTCFG =
     c64:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
        if (kSCG_FircTrimNonUpdate == config->trimConfig->trimMode)
     c68:	d109      	bne.n	c7e <CLOCK_InitFirc+0x6e>
            SCG->FIRCSTAT = SCG_FIRCSTAT_TRIMCOAR(config->trimConfig->trimCoar) |
     c6a:	790a      	ldrb	r2, [r1, #4]
                            SCG_FIRCSTAT_TRIMFINE(config->trimConfig->trimFine);
     c6c:	7949      	ldrb	r1, [r1, #5]
            SCG->FIRCSTAT = SCG_FIRCSTAT_TRIMCOAR(config->trimConfig->trimCoar) |
     c6e:	0212      	lsls	r2, r2, #8
     c70:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                            SCG_FIRCSTAT_TRIMFINE(config->trimConfig->trimFine);
     c74:	f001 017f 	and.w	r1, r1, #127	; 0x7f
            SCG->FIRCSTAT = SCG_FIRCSTAT_TRIMCOAR(config->trimConfig->trimCoar) |
     c78:	430a      	orrs	r2, r1
     c7a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
        SCG->FIRCCSR = config->trimConfig->trimMode;
     c7e:	4b12      	ldr	r3, [pc, #72]	; (cc8 <CLOCK_InitFirc+0xb8>)
     c80:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300
        if (SCG->FIRCCSR & SCG_FIRCCSR_FIRCERR_MASK)
     c84:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
     c88:	015a      	lsls	r2, r3, #5
     c8a:	d413      	bmi.n	cb4 <CLOCK_InitFirc+0xa4>
    SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN_MASK | config->enableMode);
     c8c:	4a0e      	ldr	r2, [pc, #56]	; (cc8 <CLOCK_InitFirc+0xb8>)
     c8e:	6801      	ldr	r1, [r0, #0]
     c90:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
     c94:	f043 0301 	orr.w	r3, r3, #1
     c98:	430b      	orrs	r3, r1
     c9a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    while (!(SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK))
     c9e:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
     ca2:	01db      	lsls	r3, r3, #7
     ca4:	d5fb      	bpl.n	c9e <CLOCK_InitFirc+0x8e>
    return kStatus_Success;
     ca6:	2000      	movs	r0, #0
}
     ca8:	bd38      	pop	{r3, r4, r5, pc}
        return kStatus_ReadOnly;
     caa:	2002      	movs	r0, #2
}
     cac:	bd38      	pop	{r3, r4, r5, pc}
        return kStatus_SCG_Busy;
     cae:	f640 0035 	movw	r0, #2101	; 0x835
}
     cb2:	bd38      	pop	{r3, r4, r5, pc}
            return kStatus_Fail;
     cb4:	2001      	movs	r0, #1
}
     cb6:	bd38      	pop	{r3, r4, r5, pc}
    assert(config);
     cb8:	4b04      	ldr	r3, [pc, #16]	; (ccc <CLOCK_InitFirc+0xbc>)
     cba:	4a05      	ldr	r2, [pc, #20]	; (cd0 <CLOCK_InitFirc+0xc0>)
     cbc:	4805      	ldr	r0, [pc, #20]	; (cd4 <CLOCK_InitFirc+0xc4>)
     cbe:	f240 2139 	movw	r1, #569	; 0x239
     cc2:	f001 ff69 	bl	2b98 <__assert_func>
     cc6:	bf00      	nop
     cc8:	40064000 	.word	0x40064000
     ccc:	00003fac 	.word	0x00003fac
     cd0:	00003fe8 	.word	0x00003fe8
     cd4:	00003f78 	.word	0x00003f78

00000cd8 <CLOCK_GetFircAsyncFreq>:
    if (SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) /* FIRC is valid. */
     cd8:	4a12      	ldr	r2, [pc, #72]	; (d24 <CLOCK_GetFircAsyncFreq+0x4c>)
     cda:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
     cde:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
{
     ce2:	4601      	mov	r1, r0
    if (SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) /* FIRC is valid. */
     ce4:	d101      	bne.n	cea <CLOCK_GetFircAsyncFreq+0x12>
        return 0U;
     ce6:	4618      	mov	r0, r3
}
     ce8:	4770      	bx	lr
        return fircFreq[SCG_FIRCCFG_RANGE_VAL];
     cea:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
     cee:	480e      	ldr	r0, [pc, #56]	; (d28 <CLOCK_GetFircAsyncFreq+0x50>)
     cf0:	f003 0303 	and.w	r3, r3, #3
     cf4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    if (fircFreq)
     cf8:	2800      	cmp	r0, #0
     cfa:	d0f5      	beq.n	ce8 <CLOCK_GetFircAsyncFreq+0x10>
        switch (type)
     cfc:	b161      	cbz	r1, d18 <CLOCK_GetFircAsyncFreq+0x40>
     cfe:	2901      	cmp	r1, #1
     d00:	d108      	bne.n	d14 <CLOCK_GetFircAsyncFreq+0x3c>
                divider = SCG_FIRCDIV_FIRCDIV2_VAL;
     d02:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
     d06:	f3c3 2302 	ubfx	r3, r3, #8, #3
    if (divider)
     d0a:	2b00      	cmp	r3, #0
     d0c:	d0eb      	beq.n	ce6 <CLOCK_GetFircAsyncFreq+0xe>
        return fircFreq >> (divider - 1U);
     d0e:	3b01      	subs	r3, #1
     d10:	40d8      	lsrs	r0, r3
     d12:	4770      	bx	lr
        return 0U;
     d14:	2000      	movs	r0, #0
     d16:	4770      	bx	lr
                divider = SCG_FIRCDIV_FIRCDIV1_VAL;
     d18:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
     d1c:	f003 0307 	and.w	r3, r3, #7
                break;
     d20:	e7f3      	b.n	d0a <CLOCK_GetFircAsyncFreq+0x32>
     d22:	bf00      	nop
     d24:	40064000 	.word	0x40064000
     d28:	0000400c 	.word	0x0000400c

00000d2c <CLOCK_InitSysPll>:
{
     d2c:	b510      	push	{r4, lr}
    assert(config);
     d2e:	2800      	cmp	r0, #0
     d30:	d039      	beq.n	da6 <CLOCK_InitSysPll+0x7a>
    uint32_t reg = SCG->SPLLCSR;
     d32:	4b20      	ldr	r3, [pc, #128]	; (db4 <CLOCK_InitSysPll+0x88>)
     d34:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
    if (reg & SCG_SPLLCSR_SPLLSEL_MASK)
     d38:	0194      	lsls	r4, r2, #6
     d3a:	d431      	bmi.n	da0 <CLOCK_InitSysPll+0x74>
    if (reg & SCG_SPLLCSR_LK_MASK)
     d3c:	0211      	lsls	r1, r2, #8
     d3e:	d42d      	bmi.n	d9c <CLOCK_InitSysPll+0x70>
    SCG->SPLLDIV = SCG_SPLLDIV_SPLLDIV1(config->div1) | SCG_SPLLDIV_SPLLDIV2(config->div2);
     d40:	7a41      	ldrb	r1, [r0, #9]
     d42:	7a02      	ldrb	r2, [r0, #8]
        SCG_SPLLCFG_SOURCE(config->src) | SCG_SPLLCFG_PREDIV(config->prediv) | SCG_SPLLCFG_MULT(config->mult);
     d44:	7a84      	ldrb	r4, [r0, #10]
    SCG->SPLLDIV = SCG_SPLLDIV_SPLLDIV1(config->div1) | SCG_SPLLDIV_SPLLDIV2(config->div2);
     d46:	0209      	lsls	r1, r1, #8
     d48:	f002 0207 	and.w	r2, r2, #7
     d4c:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     d50:	4311      	orrs	r1, r2
    SCG->SPLLCSR = SCG_SPLLCSR_SPLLERR_MASK;
     d52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     d56:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    SCG->SPLLDIV = SCG_SPLLDIV_SPLLDIV1(config->div1) | SCG_SPLLDIV_SPLLDIV2(config->div2);
     d5a:	f8c3 1604 	str.w	r1, [r3, #1540]	; 0x604
        SCG_SPLLCFG_SOURCE(config->src) | SCG_SPLLCFG_PREDIV(config->prediv) | SCG_SPLLCFG_MULT(config->mult);
     d5e:	7ac2      	ldrb	r2, [r0, #11]
     d60:	7b01      	ldrb	r1, [r0, #12]
     d62:	0212      	lsls	r2, r2, #8
     d64:	0409      	lsls	r1, r1, #16
     d66:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
     d6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     d6e:	430a      	orrs	r2, r1
     d70:	f004 0101 	and.w	r1, r4, #1
     d74:	430a      	orrs	r2, r1
    SCG->SPLLCFG =
     d76:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    SCG->SPLLCSR = SCG_SPLLCSR_SPLLEN_MASK | config->enableMode;
     d7a:	7802      	ldrb	r2, [r0, #0]
     d7c:	f042 0201 	orr.w	r2, r2, #1
     d80:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    while (!(SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK))
     d84:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
     d88:	01d2      	lsls	r2, r2, #7
     d8a:	d5fb      	bpl.n	d84 <CLOCK_InitSysPll+0x58>
    SCG->SPLLCSR |= (uint32_t)config->monitorMode;
     d8c:	6841      	ldr	r1, [r0, #4]
     d8e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
     d92:	430a      	orrs	r2, r1
     d94:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    return kStatus_Success;
     d98:	2000      	movs	r0, #0
}
     d9a:	bd10      	pop	{r4, pc}
        return kStatus_ReadOnly;
     d9c:	2002      	movs	r0, #2
}
     d9e:	bd10      	pop	{r4, pc}
        return kStatus_SCG_Busy;
     da0:	f640 0035 	movw	r0, #2101	; 0x835
}
     da4:	bd10      	pop	{r4, pc}
    assert(config);
     da6:	4b04      	ldr	r3, [pc, #16]	; (db8 <CLOCK_InitSysPll+0x8c>)
     da8:	4a04      	ldr	r2, [pc, #16]	; (dbc <CLOCK_InitSysPll+0x90>)
     daa:	4805      	ldr	r0, [pc, #20]	; (dc0 <CLOCK_InitSysPll+0x94>)
     dac:	f240 3117 	movw	r1, #791	; 0x317
     db0:	f001 fef2 	bl	2b98 <__assert_func>
     db4:	40064000 	.word	0x40064000
     db8:	00003fac 	.word	0x00003fac
     dbc:	00003ff8 	.word	0x00003ff8
     dc0:	00003f78 	.word	0x00003f78

00000dc4 <CLOCK_GetSysPllAsyncFreq>:
        return 0U;
    }
}

uint32_t CLOCK_GetSysPllAsyncFreq(scg_async_clk_t type)
{
     dc4:	b538      	push	{r3, r4, r5, lr}
    if (SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) /* System PLL is valid. */
     dc6:	4c0f      	ldr	r4, [pc, #60]	; (e04 <CLOCK_GetSysPllAsyncFreq+0x40>)
     dc8:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
     dcc:	01db      	lsls	r3, r3, #7
     dce:	d401      	bmi.n	dd4 <CLOCK_GetSysPllAsyncFreq+0x10>
    {
        return pllFreq >> (divider - 1U);
    }
    else /* Output disabled. */
    {
        return 0U;
     dd0:	2000      	movs	r0, #0
    }
}
     dd2:	bd38      	pop	{r3, r4, r5, pc}
     dd4:	4605      	mov	r5, r0
        freq = CLOCK_GetSysPllCommonFreq();
     dd6:	f7ff fe5d 	bl	a94 <CLOCK_GetSysPllCommonFreq>
    if (pllFreq)
     dda:	0843      	lsrs	r3, r0, #1
     ddc:	d0f8      	beq.n	dd0 <CLOCK_GetSysPllAsyncFreq+0xc>
        switch (type)
     dde:	b15d      	cbz	r5, df8 <CLOCK_GetSysPllAsyncFreq+0x34>
     de0:	2d01      	cmp	r5, #1
     de2:	d1f5      	bne.n	dd0 <CLOCK_GetSysPllAsyncFreq+0xc>
                divider = SCG_SPLLDIV_SPLLDIV2_VAL;
     de4:	f8d4 0604 	ldr.w	r0, [r4, #1540]	; 0x604
     de8:	f3c0 2002 	ubfx	r0, r0, #8, #3
    if (divider)
     dec:	2800      	cmp	r0, #0
     dee:	d0ef      	beq.n	dd0 <CLOCK_GetSysPllAsyncFreq+0xc>
        return pllFreq >> (divider - 1U);
     df0:	3801      	subs	r0, #1
     df2:	fa23 f000 	lsr.w	r0, r3, r0
}
     df6:	bd38      	pop	{r3, r4, r5, pc}
                divider = SCG_SPLLDIV_SPLLDIV1_VAL;
     df8:	f8d4 0604 	ldr.w	r0, [r4, #1540]	; 0x604
     dfc:	f000 0007 	and.w	r0, r0, #7
                break;
     e00:	e7f4      	b.n	dec <CLOCK_GetSysPllAsyncFreq+0x28>
     e02:	bf00      	nop
     e04:	40064000 	.word	0x40064000

00000e08 <CLOCK_GetIpFreq>:
{
     e08:	b508      	push	{r3, lr}
    uint32_t reg = (*(volatile uint32_t *)name);
     e0a:	6803      	ldr	r3, [r0, #0]
    assert(reg & PCC_CLKCFG_PR_MASK);
     e0c:	2b00      	cmp	r3, #0
     e0e:	da29      	bge.n	e64 <CLOCK_GetIpFreq+0x5c>
    if ((kCLOCK_Ftm0 == name) || (kCLOCK_Ftm1 == name) || (kCLOCK_Ftm2 == name) || (kCLOCK_Ftm3 == name))
     e10:	4a17      	ldr	r2, [pc, #92]	; (e70 <CLOCK_GetIpFreq+0x68>)
     e12:	f020 0104 	bic.w	r1, r0, #4
     e16:	4291      	cmp	r1, r2
     e18:	d010      	beq.n	e3c <CLOCK_GetIpFreq+0x34>
     e1a:	3208      	adds	r2, #8
     e1c:	4290      	cmp	r0, r2
     e1e:	d00d      	beq.n	e3c <CLOCK_GetIpFreq+0x34>
     e20:	3a50      	subs	r2, #80	; 0x50
        asycClk = kSCG_AsyncDiv1Clk;
     e22:	1a80      	subs	r0, r0, r2
     e24:	bf18      	it	ne
     e26:	2001      	movne	r0, #1
    switch (PCC_PCS_VAL(reg))
     e28:	f3c3 6302 	ubfx	r3, r3, #24, #3
     e2c:	3b01      	subs	r3, #1
     e2e:	2b05      	cmp	r3, #5
     e30:	d806      	bhi.n	e40 <CLOCK_GetIpFreq+0x38>
     e32:	e8df f003 	tbb	[pc, r3]
     e36:	0f13      	.short	0x0f13
     e38:	0705050b 	.word	0x0705050b
        asycClk = kSCG_AsyncDiv1Clk;
     e3c:	2000      	movs	r0, #0
     e3e:	e7f3      	b.n	e28 <CLOCK_GetIpFreq+0x20>
}
     e40:	2000      	movs	r0, #0
     e42:	bd08      	pop	{r3, pc}
     e44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetSysPllAsyncFreq(asycClk);
     e48:	f7ff bfbc 	b.w	dc4 <CLOCK_GetSysPllAsyncFreq>
}
     e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetFircAsyncFreq(asycClk);
     e50:	f7ff bf42 	b.w	cd8 <CLOCK_GetFircAsyncFreq>
}
     e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetSircAsyncFreq(asycClk);
     e58:	f7ff beb0 	b.w	bbc <CLOCK_GetSircAsyncFreq>
}
     e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetSysOscAsyncFreq(asycClk);
     e60:	f7ff be4e 	b.w	b00 <CLOCK_GetSysOscAsyncFreq>
    assert(reg & PCC_CLKCFG_PR_MASK);
     e64:	4b03      	ldr	r3, [pc, #12]	; (e74 <CLOCK_GetIpFreq+0x6c>)
     e66:	4a04      	ldr	r2, [pc, #16]	; (e78 <CLOCK_GetIpFreq+0x70>)
     e68:	4804      	ldr	r0, [pc, #16]	; (e7c <CLOCK_GetIpFreq+0x74>)
     e6a:	21ef      	movs	r1, #239	; 0xef
     e6c:	f001 fe94 	bl	2b98 <__assert_func>
     e70:	400650e0 	.word	0x400650e0
     e74:	00003f90 	.word	0x00003f90
     e78:	00003fb4 	.word	0x00003fb4
     e7c:	00003f78 	.word	0x00003f78

00000e80 <CRC_Init>:

    CRC_ConfigureAndStart(base, &moduleConfig);
}

void CRC_Init(CRC_Type *base, const crc_config_t *config)
{
     e80:	b538      	push	{r3, r4, r5, lr}
 *
 * @param name  Which clock to enable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
     e82:	4b23      	ldr	r3, [pc, #140]	; (f10 <CRC_Init+0x90>)
     e84:	681a      	ldr	r2, [r3, #0]
     e86:	2a00      	cmp	r2, #0
     e88:	da3b      	bge.n	f02 <CRC_Init+0x82>

    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
     e8a:	681a      	ldr	r2, [r3, #0]
#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    /* ungate clock */
    CLOCK_EnableClock(kCLOCK_Crc0);
#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
    /* configure CRC module and write the seed */
    if (config->crcResult == kCrcFinalChecksum)
     e8c:	7b0d      	ldrb	r5, [r1, #12]
     e8e:	7a0c      	ldrb	r4, [r1, #8]
     e90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     e94:	601a      	str	r2, [r3, #0]
                 CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
     e96:	7acb      	ldrb	r3, [r1, #11]
    if (config->crcResult == kCrcFinalChecksum)
     e98:	b1a5      	cbz	r5, ec4 <CRC_Init+0x44>
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeBytes);
     e9a:	2c00      	cmp	r4, #0
                 CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
     e9c:	ea4f 6303 	mov.w	r3, r3, lsl #24
    moduleConfig.seed = protocolConfig->seed;
     ea0:	e9d1 5200 	ldrd	r5, r2, [r1]
                 CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
     ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeBytes);
     ea8:	bf0c      	ite	eq
     eaa:	f04f 4140 	moveq.w	r1, #3221225472	; 0xc0000000
     eae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    crcControl = 0 | CRC_CTRL_TOT(config->writeTranspose) | CRC_CTRL_TOTR(config->readTranspose) |
     eb2:	430b      	orrs	r3, r1
    base->CTRL = crcControl | CRC_CTRL_WAS(true);
     eb4:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
    base->CTRL = crcControl;
     eb8:	6083      	str	r3, [r0, #8]
    base->GPOLY = config->polynomial;
     eba:	6045      	str	r5, [r0, #4]
    base->CTRL = crcControl | CRC_CTRL_WAS(true);
     ebc:	6081      	str	r1, [r0, #8]
    base->DATA = config->seed;
     ebe:	6002      	str	r2, [r0, #0]
    base->CTRL = crcControl;
     ec0:	6083      	str	r3, [r0, #8]
    }
    else
    {
        CRC_SetRawProtocolConfig(base, config);
    }
}
     ec2:	bd38      	pop	{r3, r4, r5, pc}
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeNone);
     ec4:	7a4d      	ldrb	r5, [r1, #9]
                 CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
     ec6:	7a8a      	ldrb	r2, [r1, #10]
     ec8:	061b      	lsls	r3, r3, #24
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeNone);
     eca:	2d00      	cmp	r5, #0
                 CRC_CTRL_FXOR(config->complementChecksum) | CRC_CTRL_TCRC(config->crcBits);
     ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    crcControl = 0 | CRC_CTRL_TOT(config->writeTranspose) | CRC_CTRL_TOTR(config->readTranspose) |
     ed0:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeNone);
     ed4:	bf0c      	ite	eq
     ed6:	2200      	moveq	r2, #0
     ed8:	f04f 5200 	movne.w	r2, #536870912	; 0x20000000
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeBytes);
     edc:	2c00      	cmp	r4, #0
    crcControl = 0 | CRC_CTRL_TOT(config->writeTranspose) | CRC_CTRL_TOTR(config->readTranspose) |
     ede:	ea43 0302 	orr.w	r3, r3, r2
    return ((enable) ? kCrcTransposeBitsAndBytes : kCrcTransposeBytes);
     ee2:	bf0c      	ite	eq
     ee4:	f04f 4240 	moveq.w	r2, #3221225472	; 0xc0000000
     ee8:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    crcControl = 0 | CRC_CTRL_TOT(config->writeTranspose) | CRC_CTRL_TOTR(config->readTranspose) |
     eec:	4313      	orrs	r3, r2
    moduleConfig.seed = protocolConfig->seed;
     eee:	e9d1 4200 	ldrd	r4, r2, [r1]
    base->CTRL = crcControl | CRC_CTRL_WAS(true);
     ef2:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
    base->CTRL = crcControl;
     ef6:	6083      	str	r3, [r0, #8]
    base->GPOLY = config->polynomial;
     ef8:	6044      	str	r4, [r0, #4]
    base->CTRL = crcControl | CRC_CTRL_WAS(true);
     efa:	6081      	str	r1, [r0, #8]
    base->DATA = config->seed;
     efc:	6002      	str	r2, [r0, #0]
    base->CTRL = crcControl;
     efe:	6083      	str	r3, [r0, #8]
}
     f00:	bd38      	pop	{r3, r4, r5, pc}
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
     f02:	4b04      	ldr	r3, [pc, #16]	; (f14 <CRC_Init+0x94>)
     f04:	4a04      	ldr	r2, [pc, #16]	; (f18 <CRC_Init+0x98>)
     f06:	4805      	ldr	r0, [pc, #20]	; (f1c <CRC_Init+0x9c>)
     f08:	f240 219d 	movw	r1, #669	; 0x29d
     f0c:	f001 fe44 	bl	2b98 <__assert_func>
     f10:	400650c8 	.word	0x400650c8
     f14:	00004024 	.word	0x00004024
     f18:	00004070 	.word	0x00004070
     f1c:	00004058 	.word	0x00004058

00000f20 <CRC_WriteData>:
void CRC_WriteData(CRC_Type *base, const uint8_t *data, size_t dataSize)
{
    const uint32_t *data32;

    /* 8-bit reads and writes till source address is aligned 4 bytes */
    while ((dataSize) && ((uint32_t)data & 3U))
     f20:	b92a      	cbnz	r2, f2e <CRC_WriteData+0xe>
     f22:	e024      	b.n	f6e <CRC_WriteData+0x4e>
    {
        base->ACCESS8BIT.DATALL = *data;
     f24:	f811 3b01 	ldrb.w	r3, [r1], #1
     f28:	7003      	strb	r3, [r0, #0]
    while ((dataSize) && ((uint32_t)data & 3U))
     f2a:	3a01      	subs	r2, #1
     f2c:	d01f      	beq.n	f6e <CRC_WriteData+0x4e>
     f2e:	078b      	lsls	r3, r1, #30
     f30:	d1f8      	bne.n	f24 <CRC_WriteData+0x4>
        dataSize--;
    }

    /* use 32-bit reads and writes as long as possible */
    data32 = (const uint32_t *)data;
    while (dataSize >= sizeof(uint32_t))
     f32:	2a03      	cmp	r2, #3
     f34:	d915      	bls.n	f62 <CRC_WriteData+0x42>
{
     f36:	b410      	push	{r4}
     f38:	1f14      	subs	r4, r2, #4
     f3a:	f024 0403 	bic.w	r4, r4, #3
     f3e:	3404      	adds	r4, #4
     f40:	440c      	add	r4, r1
    {
        base->DATA = *data32;
     f42:	f851 3b04 	ldr.w	r3, [r1], #4
     f46:	6003      	str	r3, [r0, #0]
    while (dataSize >= sizeof(uint32_t))
     f48:	42a1      	cmp	r1, r4
     f4a:	d1fa      	bne.n	f42 <CRC_WriteData+0x22>
    }

    data = (const uint8_t *)data32;

    /* 8-bit reads and writes till end of data buffer */
    while (dataSize)
     f4c:	f012 0203 	ands.w	r2, r2, #3
     f50:	d005      	beq.n	f5e <CRC_WriteData+0x3e>
     f52:	440a      	add	r2, r1
    {
        base->ACCESS8BIT.DATALL = *data;
     f54:	f811 3b01 	ldrb.w	r3, [r1], #1
     f58:	7003      	strb	r3, [r0, #0]
    while (dataSize)
     f5a:	4291      	cmp	r1, r2
     f5c:	d1fa      	bne.n	f54 <CRC_WriteData+0x34>
        data++;
        dataSize--;
    }
}
     f5e:	bc10      	pop	{r4}
     f60:	4770      	bx	lr
     f62:	440a      	add	r2, r1
        base->ACCESS8BIT.DATALL = *data;
     f64:	f811 3b01 	ldrb.w	r3, [r1], #1
     f68:	7003      	strb	r3, [r0, #0]
    while (dataSize)
     f6a:	4291      	cmp	r1, r2
     f6c:	d1fa      	bne.n	f64 <CRC_WriteData+0x44>
     f6e:	4770      	bx	lr

00000f70 <CRC_Get32bitResult>:

uint32_t CRC_Get32bitResult(CRC_Type *base)
{
    return base->DATA;
     f70:	6800      	ldr	r0, [r0, #0]
}
     f72:	4770      	bx	lr

00000f74 <GPIO_PinInit>:

    return instance;
}
#endif
void GPIO_PinInit(GPIO_Type *base, uint32_t pin, const gpio_pin_config_t *config)
{
     f74:	b510      	push	{r4, lr}
    assert(config);
     f76:	b192      	cbz	r2, f9e <GPIO_PinInit+0x2a>

    if (config->pinDirection == kGPIO_DigitalInput)
     f78:	7814      	ldrb	r4, [r2, #0]
     f7a:	2301      	movs	r3, #1
     f7c:	fa03 f101 	lsl.w	r1, r3, r1
     f80:	b144      	cbz	r4, f94 <GPIO_PinInit+0x20>
 *        - 0: corresponding pin output low-logic level.
 *        - 1: corresponding pin output high-logic level.
 */
static inline void GPIO_PinWrite(GPIO_Type *base, uint32_t pin, uint8_t output)
{
    if (output == 0U)
     f82:	7853      	ldrb	r3, [r2, #1]
     f84:	b123      	cbz	r3, f90 <GPIO_PinInit+0x1c>
    {
        base->PCOR = 1U << pin;
    }
    else
    {
        base->PSOR = 1U << pin;
     f86:	6041      	str	r1, [r0, #4]
        base->PDDR &= ~(1U << pin);
    }
    else
    {
        GPIO_WritePinOutput(base, pin, config->outputLogic);
        base->PDDR |= (1U << pin);
     f88:	6943      	ldr	r3, [r0, #20]
     f8a:	4319      	orrs	r1, r3
     f8c:	6141      	str	r1, [r0, #20]
    }
}
     f8e:	bd10      	pop	{r4, pc}
        base->PCOR = 1U << pin;
     f90:	6081      	str	r1, [r0, #8]
     f92:	e7f9      	b.n	f88 <GPIO_PinInit+0x14>
        base->PDDR &= ~(1U << pin);
     f94:	6943      	ldr	r3, [r0, #20]
     f96:	ea23 0101 	bic.w	r1, r3, r1
     f9a:	6141      	str	r1, [r0, #20]
}
     f9c:	bd10      	pop	{r4, pc}
    assert(config);
     f9e:	4b03      	ldr	r3, [pc, #12]	; (fac <GPIO_PinInit+0x38>)
     fa0:	4a03      	ldr	r2, [pc, #12]	; (fb0 <GPIO_PinInit+0x3c>)
     fa2:	4804      	ldr	r0, [pc, #16]	; (fb4 <GPIO_PinInit+0x40>)
     fa4:	2165      	movs	r1, #101	; 0x65
     fa6:	f001 fdf7 	bl	2b98 <__assert_func>
     faa:	bf00      	nop
     fac:	00003fac 	.word	0x00003fac
     fb0:	000040c0 	.word	0x000040c0
     fb4:	000040a8 	.word	0x000040a8

00000fb8 <LPUART_GetInstance.part.2>:
static lpuart_isr_t s_lpuartIsr;

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t LPUART_GetInstance(LPUART_Type *base)
     fb8:	b508      	push	{r3, lr}
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_lpuartBases));
     fba:	4a03      	ldr	r2, [pc, #12]	; (fc8 <LPUART_GetInstance.part.2+0x10>)
     fbc:	4b03      	ldr	r3, [pc, #12]	; (fcc <LPUART_GetInstance.part.2+0x14>)
     fbe:	4804      	ldr	r0, [pc, #16]	; (fd0 <LPUART_GetInstance.part.2+0x18>)
     fc0:	218e      	movs	r1, #142	; 0x8e
     fc2:	f001 fde9 	bl	2b98 <__assert_func>
     fc6:	bf00      	nop
     fc8:	000041c4 	.word	0x000041c4
     fcc:	000040d0 	.word	0x000040d0
     fd0:	00004198 	.word	0x00004198

00000fd4 <LPUART_Init>:
#endif
    }
}

status_t LPUART_Init(LPUART_Type *base, const lpuart_config_t *config, uint32_t srcClock_Hz)
{
     fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert(config);
     fd8:	2900      	cmp	r1, #0
     fda:	f000 80f2 	beq.w	11c2 <LPUART_Init+0x1ee>
    assert(config->baudRate_Bps);
     fde:	680e      	ldr	r6, [r1, #0]
     fe0:	2e00      	cmp	r6, #0
     fe2:	f000 80fa 	beq.w	11da <LPUART_Init+0x206>
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->txFifoWatermark);
     fe6:	7a0b      	ldrb	r3, [r1, #8]
     fe8:	2b04      	cmp	r3, #4
     fea:	f200 80f0 	bhi.w	11ce <LPUART_Init+0x1fa>
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->rxFifoWatermark);
     fee:	7a4b      	ldrb	r3, [r1, #9]
     ff0:	2b04      	cmp	r3, #4
     ff2:	f200 80e0 	bhi.w	11b6 <LPUART_Init+0x1e2>
     * Note, OSR is typically hard-set to 16 in other LPUART instantiations
     * loop to find the best OSR value possible, one that generates minimum baudDiff
     * iterate through the rest of the supported values of OSR */

    baudDiff = config->baudRate_Bps;
    osr = 0;
     ff6:	f04f 0e00 	mov.w	lr, #0
    sbr = 0;
     ffa:	46f0      	mov	r8, lr
     ffc:	00b7      	lsls	r7, r6, #2
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->rxFifoWatermark);
     ffe:	46b4      	mov	ip, r6
    for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    1000:	2404      	movs	r4, #4
    1002:	e01a      	b.n	103a <LPUART_Init+0x66>
    1004:	462b      	mov	r3, r5
    1006:	fb04 f905 	mul.w	r9, r4, r5
    100a:	3301      	adds	r3, #1
        calculatedBaud = (srcClock_Hz / (osrTemp * sbrTemp));

        tempDiff = calculatedBaud - config->baudRate_Bps;

        /* Select the better value between srb and (sbr + 1) */
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    100c:	fb04 f303 	mul.w	r3, r4, r3
        calculatedBaud = (srcClock_Hz / (osrTemp * sbrTemp));
    1010:	fbb2 f9f9 	udiv	r9, r2, r9
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    1014:	fbb2 f3f3 	udiv	r3, r2, r3
        tempDiff = calculatedBaud - config->baudRate_Bps;
    1018:	eba9 0906 	sub.w	r9, r9, r6
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    101c:	1af3      	subs	r3, r6, r3
    101e:	454b      	cmp	r3, r9
    1020:	d202      	bcs.n	1028 <LPUART_Init+0x54>
        {
            tempDiff = config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)));
            sbrTemp++;
    1022:	3501      	adds	r5, #1
    1024:	b2ad      	uxth	r5, r5
    1026:	4699      	mov	r9, r3
        }

        if (tempDiff <= baudDiff)
    1028:	45e1      	cmp	r9, ip
    102a:	d802      	bhi.n	1032 <LPUART_Init+0x5e>
    102c:	46cc      	mov	ip, r9
        {
            baudDiff = tempDiff;
            osr = osrTemp; /* update and store the best OSR value calculated */
            sbr = sbrTemp; /* update store the best SBR value calculated */
    102e:	46a8      	mov	r8, r5
    1030:	46a6      	mov	lr, r4
    for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    1032:	3401      	adds	r4, #1
    1034:	2c21      	cmp	r4, #33	; 0x21
    1036:	4437      	add	r7, r6
    1038:	d008      	beq.n	104c <LPUART_Init+0x78>
        sbrTemp = (srcClock_Hz / (config->baudRate_Bps * osrTemp));
    103a:	fbb2 f3f7 	udiv	r3, r2, r7
    103e:	b29d      	uxth	r5, r3
        if (sbrTemp == 0)
    1040:	2d00      	cmp	r5, #0
    1042:	d1df      	bne.n	1004 <LPUART_Init+0x30>
    1044:	46a1      	mov	r9, r4
    1046:	2302      	movs	r3, #2
            sbrTemp = 1;
    1048:	2501      	movs	r5, #1
    104a:	e7df      	b.n	100c <LPUART_Init+0x38>
        }
    }

    /* Check to see if actual baud rate is within 3% of desired baud rate
     * based on the best calculate OSR value */
    if (baudDiff > ((config->baudRate_Bps / 100) * 3))
    104c:	4b66      	ldr	r3, [pc, #408]	; (11e8 <LPUART_Init+0x214>)
    104e:	fba3 3606 	umull	r3, r6, r3, r6
    1052:	0976      	lsrs	r6, r6, #5
    1054:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    1058:	4566      	cmp	r6, ip
    105a:	d30e      	bcc.n	107a <LPUART_Init+0xa6>
        if (s_lpuartBases[instance] == base)
    105c:	4b63      	ldr	r3, [pc, #396]	; (11ec <LPUART_Init+0x218>)
    105e:	4298      	cmp	r0, r3
    1060:	d00f      	beq.n	1082 <LPUART_Init+0xae>
    1062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1066:	4298      	cmp	r0, r3
    1068:	f000 809a 	beq.w	11a0 <LPUART_Init+0x1cc>
    106c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1070:	4298      	cmp	r0, r3
    1072:	f000 8097 	beq.w	11a4 <LPUART_Init+0x1d0>
    1076:	f7ff ff9f 	bl	fb8 <LPUART_GetInstance.part.2>
    {
        /* Unacceptable baud rate difference of more than 3%*/
        return kStatus_LPUART_BaudrateNotSupport;
    107a:	f240 5021 	movw	r0, #1313	; 0x521
    }

    base->CTRL = temp;

    return kStatus_Success;
}
    107e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (s_lpuartBases[instance] == base)
    1082:	4a5b      	ldr	r2, [pc, #364]	; (11f0 <LPUART_Init+0x21c>)
    1084:	6813      	ldr	r3, [r2, #0]
    1086:	2b00      	cmp	r3, #0
    1088:	f280 808e 	bge.w	11a8 <LPUART_Init+0x1d4>
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    108c:	6813      	ldr	r3, [r2, #0]
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    108e:	790d      	ldrb	r5, [r1, #4]
    1090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1094:	6013      	str	r3, [r2, #0]
    base->GLOBAL |= LPUART_GLOBAL_RST_MASK;
    1096:	6883      	ldr	r3, [r0, #8]
    1098:	f043 0302 	orr.w	r3, r3, #2
    109c:	6083      	str	r3, [r0, #8]
    base->GLOBAL &= ~LPUART_GLOBAL_RST_MASK;
    109e:	6883      	ldr	r3, [r0, #8]
    10a0:	f023 0302 	bic.w	r3, r3, #2
    10a4:	6083      	str	r3, [r0, #8]
    temp = base->BAUD;
    10a6:	6902      	ldr	r2, [r0, #16]
    if ((osr > 3) && (osr < 8))
    10a8:	f1ae 0304 	sub.w	r3, lr, #4
    10ac:	2b03      	cmp	r3, #3
        temp |= LPUART_BAUD_BOTHEDGE_MASK;
    10ae:	bf98      	it	ls
    10b0:	f442 3200 	orrls.w	r2, r2, #131072	; 0x20000
    temp |= LPUART_BAUD_OSR(osr - 1);
    10b4:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    10b8:	061b      	lsls	r3, r3, #24
    10ba:	f022 221f 	bic.w	r2, r2, #520101632	; 0x1f001f00
    10be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    10c2:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
    temp &= ~LPUART_BAUD_SBR_MASK;
    10c6:	4313      	orrs	r3, r2
    base->BAUD = temp | LPUART_BAUD_SBR(sbr);
    10c8:	f3c8 080c 	ubfx	r8, r8, #0, #13
    10cc:	ea48 0303 	orr.w	r3, r8, r3
    10d0:	6103      	str	r3, [r0, #16]
    base->BAUD &= ~LPUART_BAUD_M10_MASK;
    10d2:	6904      	ldr	r4, [r0, #16]
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    10d4:	7bca      	ldrb	r2, [r1, #15]
    10d6:	7b8b      	ldrb	r3, [r1, #14]
    base->BAUD &= ~LPUART_BAUD_M10_MASK;
    10d8:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
    10dc:	6104      	str	r4, [r0, #16]
    temp = base->CTRL &
    10de:	6984      	ldr	r4, [r0, #24]
    10e0:	f424 64e2 	bic.w	r4, r4, #1808	; 0x710
    10e4:	f024 0407 	bic.w	r4, r4, #7
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    10e8:	0212      	lsls	r2, r2, #8
    10ea:	432c      	orrs	r4, r5
    10ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    10f0:	4322      	orrs	r2, r4
    if (kLPUART_SevenDataBits == config->dataBitsCount)
    10f2:	794c      	ldrb	r4, [r1, #5]
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    10f4:	009b      	lsls	r3, r3, #2
    10f6:	f003 0304 	and.w	r3, r3, #4
    if (kLPUART_SevenDataBits == config->dataBitsCount)
    10fa:	2c01      	cmp	r4, #1
    temp |=
    10fc:	ea43 0302 	orr.w	r3, r3, r2
    if (kLPUART_SevenDataBits == config->dataBitsCount)
    1100:	d047      	beq.n	1192 <LPUART_Init+0x1be>
        if (kLPUART_ParityDisabled != config->parityMode)
    1102:	b10d      	cbz	r5, 1108 <LPUART_Init+0x134>
            temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
    1104:	f043 0310 	orr.w	r3, r3, #16
    base->CTRL = temp;
    1108:	6183      	str	r3, [r0, #24]
    base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
    110a:	79ca      	ldrb	r2, [r1, #7]
    temp = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
    110c:	6905      	ldr	r5, [r0, #16]
    base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
    110e:	7b0c      	ldrb	r4, [r1, #12]
    1110:	7b4b      	ldrb	r3, [r1, #13]
    base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
    1112:	0352      	lsls	r2, r2, #13
    temp = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
    1114:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
    base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
    1118:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
    111c:	432a      	orrs	r2, r5
    111e:	6102      	str	r2, [r0, #16]
    base->WATER = (((uint32_t)(config->rxFifoWatermark) << 16) | config->txFifoWatermark);
    1120:	7a4d      	ldrb	r5, [r1, #9]
    1122:	7a0a      	ldrb	r2, [r1, #8]
    1124:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    1128:	62c2      	str	r2, [r0, #44]	; 0x2c
    base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
    112a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    if (config->enableRxRTS)
    112c:	7a8d      	ldrb	r5, [r1, #10]
    base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
    112e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
    1132:	6282      	str	r2, [r0, #40]	; 0x28
    base->FIFO |= (LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK);
    1134:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1136:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
    113a:	6282      	str	r2, [r0, #40]	; 0x28
    base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
    113c:	011b      	lsls	r3, r3, #4
    113e:	0162      	lsls	r2, r4, #5
    1140:	f003 0310 	and.w	r3, r3, #16
    1144:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1146:	f002 0220 	and.w	r2, r2, #32
    114a:	4313      	orrs	r3, r2
    114c:	4323      	orrs	r3, r4
    114e:	6243      	str	r3, [r0, #36]	; 0x24
    if (config->enableRxRTS)
    1150:	b11d      	cbz	r5, 115a <LPUART_Init+0x186>
        base->MODIR |= LPUART_MODIR_RXRTSE_MASK;
    1152:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1154:	f043 0308 	orr.w	r3, r3, #8
    1158:	6243      	str	r3, [r0, #36]	; 0x24
    if (config->enableTxCTS)
    115a:	7acb      	ldrb	r3, [r1, #11]
    115c:	b11b      	cbz	r3, 1166 <LPUART_Init+0x192>
        base->MODIR |= LPUART_MODIR_TXCTSE_MASK;
    115e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1160:	f043 0301 	orr.w	r3, r3, #1
    1164:	6243      	str	r3, [r0, #36]	; 0x24
    if (config->isMsb)
    1166:	798d      	ldrb	r5, [r1, #6]
        temp |= LPUART_STAT_MSBF_MASK;
    1168:	4a22      	ldr	r2, [pc, #136]	; (11f4 <LPUART_Init+0x220>)
    116a:	4c23      	ldr	r4, [pc, #140]	; (11f8 <LPUART_Init+0x224>)
    base->STAT |= temp;
    116c:	6943      	ldr	r3, [r0, #20]
        temp |= LPUART_STAT_MSBF_MASK;
    116e:	2d00      	cmp	r5, #0
    1170:	bf18      	it	ne
    1172:	4622      	movne	r2, r4
    base->STAT |= temp;
    1174:	4313      	orrs	r3, r2
    if (config->enableTx)
    1176:	7c0a      	ldrb	r2, [r1, #16]
    base->STAT |= temp;
    1178:	6143      	str	r3, [r0, #20]
    temp = base->CTRL;
    117a:	6983      	ldr	r3, [r0, #24]
    if (config->enableTx)
    117c:	b10a      	cbz	r2, 1182 <LPUART_Init+0x1ae>
        temp |= LPUART_CTRL_TE_MASK;
    117e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (config->enableRx)
    1182:	7c4a      	ldrb	r2, [r1, #17]
    1184:	b10a      	cbz	r2, 118a <LPUART_Init+0x1b6>
        temp |= LPUART_CTRL_RE_MASK;
    1186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    base->CTRL = temp;
    118a:	6183      	str	r3, [r0, #24]
    return kStatus_Success;
    118c:	2000      	movs	r0, #0
}
    118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (kLPUART_ParityDisabled != config->parityMode)
    1192:	b115      	cbz	r5, 119a <LPUART_Init+0x1c6>
            temp &= ~LPUART_CTRL_M7_MASK; /* Seven data bits and one parity bit */
    1194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1198:	e7b6      	b.n	1108 <LPUART_Init+0x134>
            temp |= LPUART_CTRL_M7_MASK;
    119a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    119e:	e7b3      	b.n	1108 <LPUART_Init+0x134>
        if (s_lpuartBases[instance] == base)
    11a0:	4a16      	ldr	r2, [pc, #88]	; (11fc <LPUART_Init+0x228>)
    11a2:	e76f      	b.n	1084 <LPUART_Init+0xb0>
    11a4:	4a16      	ldr	r2, [pc, #88]	; (1200 <LPUART_Init+0x22c>)
    11a6:	e76d      	b.n	1084 <LPUART_Init+0xb0>
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    11a8:	4b16      	ldr	r3, [pc, #88]	; (1204 <LPUART_Init+0x230>)
    11aa:	4a17      	ldr	r2, [pc, #92]	; (1208 <LPUART_Init+0x234>)
    11ac:	4817      	ldr	r0, [pc, #92]	; (120c <LPUART_Init+0x238>)
    11ae:	f240 219d 	movw	r1, #669	; 0x29d
    11b2:	f001 fcf1 	bl	2b98 <__assert_func>
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->rxFifoWatermark);
    11b6:	4b16      	ldr	r3, [pc, #88]	; (1210 <LPUART_Init+0x23c>)
    11b8:	4a16      	ldr	r2, [pc, #88]	; (1214 <LPUART_Init+0x240>)
    11ba:	4817      	ldr	r0, [pc, #92]	; (1218 <LPUART_Init+0x244>)
    11bc:	21e8      	movs	r1, #232	; 0xe8
    11be:	f001 fceb 	bl	2b98 <__assert_func>
    assert(config);
    11c2:	4b16      	ldr	r3, [pc, #88]	; (121c <LPUART_Init+0x248>)
    11c4:	4a13      	ldr	r2, [pc, #76]	; (1214 <LPUART_Init+0x240>)
    11c6:	4814      	ldr	r0, [pc, #80]	; (1218 <LPUART_Init+0x244>)
    11c8:	21e4      	movs	r1, #228	; 0xe4
    11ca:	f001 fce5 	bl	2b98 <__assert_func>
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->txFifoWatermark);
    11ce:	4b14      	ldr	r3, [pc, #80]	; (1220 <LPUART_Init+0x24c>)
    11d0:	4a10      	ldr	r2, [pc, #64]	; (1214 <LPUART_Init+0x240>)
    11d2:	4811      	ldr	r0, [pc, #68]	; (1218 <LPUART_Init+0x244>)
    11d4:	21e7      	movs	r1, #231	; 0xe7
    11d6:	f001 fcdf 	bl	2b98 <__assert_func>
    assert(config->baudRate_Bps);
    11da:	4b12      	ldr	r3, [pc, #72]	; (1224 <LPUART_Init+0x250>)
    11dc:	4a0d      	ldr	r2, [pc, #52]	; (1214 <LPUART_Init+0x240>)
    11de:	480e      	ldr	r0, [pc, #56]	; (1218 <LPUART_Init+0x244>)
    11e0:	21e5      	movs	r1, #229	; 0xe5
    11e2:	f001 fcd9 	bl	2b98 <__assert_func>
    11e6:	bf00      	nop
    11e8:	51eb851f 	.word	0x51eb851f
    11ec:	4006a000 	.word	0x4006a000
    11f0:	400651a8 	.word	0x400651a8
    11f4:	c01fc000 	.word	0xc01fc000
    11f8:	e01fc000 	.word	0xe01fc000
    11fc:	400651ac 	.word	0x400651ac
    1200:	400651b0 	.word	0x400651b0
    1204:	00004024 	.word	0x00004024
    1208:	000041b0 	.word	0x000041b0
    120c:	00004058 	.word	0x00004058
    1210:	00004150 	.word	0x00004150
    1214:	000041d8 	.word	0x000041d8
    1218:	00004198 	.word	0x00004198
    121c:	00003fac 	.word	0x00003fac
    1220:	00004110 	.word	0x00004110
    1224:	000040f8 	.word	0x000040f8

00001228 <LPUART_GetDefaultConfig>:

#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
}

void LPUART_GetDefaultConfig(lpuart_config_t *config)
{
    1228:	b508      	push	{r3, lr}
    assert(config);
    122a:	b188      	cbz	r0, 1250 <LPUART_GetDefaultConfig+0x28>

    config->baudRate_Bps = 115200U;
    config->parityMode = kLPUART_ParityDisabled;
    122c:	2300      	movs	r3, #0
    config->baudRate_Bps = 115200U;
    122e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    config->isMsb = false;
#if defined(FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT
    config->stopBitCount = kLPUART_OneStopBit;
#endif
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    config->txFifoWatermark = 0;
    1232:	8103      	strh	r3, [r0, #8]
    config->baudRate_Bps = 115200U;
    1234:	6002      	str	r2, [r0, #0]
    config->parityMode = kLPUART_ParityDisabled;
    1236:	7103      	strb	r3, [r0, #4]
    config->dataBitsCount = kLPUART_EightDataBits;
    1238:	7143      	strb	r3, [r0, #5]
    config->isMsb = false;
    123a:	7183      	strb	r3, [r0, #6]
    config->stopBitCount = kLPUART_OneStopBit;
    123c:	71c3      	strb	r3, [r0, #7]
    config->rxFifoWatermark = 0;
#endif
#if defined(FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT) && FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT
    config->enableRxRTS = false;
    123e:	7283      	strb	r3, [r0, #10]
    config->enableTxCTS = false;
    1240:	72c3      	strb	r3, [r0, #11]
    config->txCtsConfig = kLPUART_CtsSampleAtStart;
    1242:	7343      	strb	r3, [r0, #13]
    config->txCtsSource = kLPUART_CtsSourcePin;
    1244:	7303      	strb	r3, [r0, #12]
#endif
    config->rxIdleType = kLPUART_IdleTypeStartBit;
    1246:	7383      	strb	r3, [r0, #14]
    config->rxIdleConfig = kLPUART_IdleCharacter1;
    1248:	73c3      	strb	r3, [r0, #15]
    config->enableTx = false;
    124a:	7403      	strb	r3, [r0, #16]
    config->enableRx = false;
    124c:	7443      	strb	r3, [r0, #17]
}
    124e:	bd08      	pop	{r3, pc}
    assert(config);
    1250:	4b03      	ldr	r3, [pc, #12]	; (1260 <LPUART_GetDefaultConfig+0x38>)
    1252:	4a04      	ldr	r2, [pc, #16]	; (1264 <LPUART_GetDefaultConfig+0x3c>)
    1254:	4804      	ldr	r0, [pc, #16]	; (1268 <LPUART_GetDefaultConfig+0x40>)
    1256:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
    125a:	f001 fc9d 	bl	2b98 <__assert_func>
    125e:	bf00      	nop
    1260:	00003fac 	.word	0x00003fac
    1264:	000041e4 	.word	0x000041e4
    1268:	00004198 	.word	0x00004198

0000126c <LPUART_WriteBlocking>:

    return status;
}

void LPUART_WriteBlocking(LPUART_Type *base, const uint8_t *data, size_t length)
{
    126c:	b508      	push	{r3, lr}
    assert(data);
    126e:	b151      	cbz	r1, 1286 <LPUART_WriteBlocking+0x1a>

    /* This API can only ensure that the data is written into the data buffer but can't
    ensure all data in the data buffer are sent into the transmit shift buffer. */
    while (length--)
    1270:	b142      	cbz	r2, 1284 <LPUART_WriteBlocking+0x18>
    1272:	440a      	add	r2, r1
    {
        while (!(base->STAT & LPUART_STAT_TDRE_MASK))
    1274:	6943      	ldr	r3, [r0, #20]
    1276:	021b      	lsls	r3, r3, #8
    1278:	d5fc      	bpl.n	1274 <LPUART_WriteBlocking+0x8>
        {
        }
        base->DATA = *(data++);
    127a:	f811 3b01 	ldrb.w	r3, [r1], #1
    127e:	61c3      	str	r3, [r0, #28]
    while (length--)
    1280:	4291      	cmp	r1, r2
    1282:	d1f7      	bne.n	1274 <LPUART_WriteBlocking+0x8>
    }
}
    1284:	bd08      	pop	{r3, pc}
    assert(data);
    1286:	4b03      	ldr	r3, [pc, #12]	; (1294 <LPUART_WriteBlocking+0x28>)
    1288:	4a03      	ldr	r2, [pc, #12]	; (1298 <LPUART_WriteBlocking+0x2c>)
    128a:	4804      	ldr	r0, [pc, #16]	; (129c <LPUART_WriteBlocking+0x30>)
    128c:	f240 21a9 	movw	r1, #681	; 0x2a9
    1290:	f001 fc82 	bl	2b98 <__assert_func>
    1294:	00004190 	.word	0x00004190
    1298:	000041fc 	.word	0x000041fc
    129c:	00004198 	.word	0x00004198

000012a0 <LPUART_ReadBlocking>:

status_t LPUART_ReadBlocking(LPUART_Type *base, uint8_t *data, size_t length)
{
    12a0:	b538      	push	{r3, r4, r5, lr}
    assert(data);
    12a2:	2900      	cmp	r1, #0
    12a4:	d072      	beq.n	138c <LPUART_ReadBlocking+0xec>

    uint32_t statusFlag;
#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
    uint32_t ctrl = base->CTRL;
    12a6:	6983      	ldr	r3, [r0, #24]
    bool isSevenDataBits =
        ((ctrl & LPUART_CTRL_M7_MASK) || ((!(ctrl & LPUART_CTRL_M_MASK)) && (ctrl & LPUART_CTRL_PE_MASK)));
    12a8:	051c      	lsls	r4, r3, #20
    12aa:	d424      	bmi.n	12f6 <LPUART_ReadBlocking+0x56>
    12ac:	f003 0312 	and.w	r3, r3, #18
    12b0:	f1a3 0502 	sub.w	r5, r3, #2
    12b4:	fab5 f585 	clz	r5, r5
    12b8:	096d      	lsrs	r5, r5, #5
    12ba:	440a      	add	r2, r1
#endif

    while (length--)
    12bc:	4291      	cmp	r1, r2
    12be:	d10e      	bne.n	12de <LPUART_ReadBlocking+0x3e>
    12c0:	e062      	b.n	1388 <LPUART_ReadBlocking+0xe8>
    temp = base->STAT;
    12c2:	6944      	ldr	r4, [r0, #20]
    temp |= (base->FIFO &
    12c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
             (LPUART_FIFO_TXEMPT_MASK | LPUART_FIFO_RXEMPT_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) >>
    12c6:	0c1b      	lsrs	r3, r3, #16
    12c8:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
    temp |= (base->FIFO &
    12cc:	4323      	orrs	r3, r4
        while (!(base->STAT & LPUART_STAT_RDRF_MASK))
#endif
        {
            statusFlag = LPUART_GetStatusFlags(base);

            if (statusFlag & kLPUART_RxOverrunFlag)
    12ce:	031c      	lsls	r4, r3, #12
    12d0:	d413      	bmi.n	12fa <LPUART_ReadBlocking+0x5a>
            {
                LPUART_ClearStatusFlags(base, kLPUART_RxOverrunFlag);
                return kStatus_LPUART_RxHardwareOverrun;
            }

            if (statusFlag & kLPUART_NoiseErrorFlag)
    12d2:	035c      	lsls	r4, r3, #13
    12d4:	d422      	bmi.n	131c <LPUART_ReadBlocking+0x7c>
            {
                LPUART_ClearStatusFlags(base, kLPUART_NoiseErrorFlag);
                return kStatus_LPUART_NoiseError;
            }

            if (statusFlag & kLPUART_FramingErrorFlag)
    12d6:	039c      	lsls	r4, r3, #14
    12d8:	d431      	bmi.n	133e <LPUART_ReadBlocking+0x9e>
            {
                LPUART_ClearStatusFlags(base, kLPUART_FramingErrorFlag);
                return kStatus_LPUART_FramingError;
            }

            if (statusFlag & kLPUART_ParityErrorFlag)
    12da:	03db      	lsls	r3, r3, #15
    12dc:	d440      	bmi.n	1360 <LPUART_ReadBlocking+0xc0>
        while (0 == ((base->WATER & LPUART_WATER_RXCOUNT_MASK) >> LPUART_WATER_RXCOUNT_SHIFT))
    12de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    12e0:	0e1b      	lsrs	r3, r3, #24
    12e2:	d0ee      	beq.n	12c2 <LPUART_ReadBlocking+0x22>
    12e4:	3101      	adds	r1, #1
            }
        }
#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
        if (isSevenDataBits)
        {
            *(data++) = (base->DATA & 0x7F);
    12e6:	69c3      	ldr	r3, [r0, #28]
        if (isSevenDataBits)
    12e8:	2d00      	cmp	r5, #0
    12ea:	d04a      	beq.n	1382 <LPUART_ReadBlocking+0xe2>
            *(data++) = (base->DATA & 0x7F);
    12ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    12f0:	f801 3c01 	strb.w	r3, [r1, #-1]
    12f4:	e7e2      	b.n	12bc <LPUART_ReadBlocking+0x1c>
        ((ctrl & LPUART_CTRL_M7_MASK) || ((!(ctrl & LPUART_CTRL_M_MASK)) && (ctrl & LPUART_CTRL_PE_MASK)));
    12f6:	2501      	movs	r5, #1
    12f8:	e7df      	b.n	12ba <LPUART_ReadBlocking+0x1a>
    temp = (uint32_t)base->FIFO;
    12fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    temp &= (uint32_t)(~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
    12fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    base->FIFO = temp;
    1300:	6283      	str	r3, [r0, #40]	; 0x28
    temp = (uint32_t)base->STAT;
    1302:	6943      	ldr	r3, [r0, #20]
    1304:	f023 23c0 	bic.w	r3, r3, #3221274624	; 0xc000c000
    1308:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    temp &= (uint32_t)(~(LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK));
    130c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    base->STAT = temp;
    1310:	6143      	str	r3, [r0, #20]
    temp = base->STAT;
    1312:	6943      	ldr	r3, [r0, #20]
    temp |= (base->FIFO &
    1314:	6a83      	ldr	r3, [r0, #40]	; 0x28
                return kStatus_LPUART_RxHardwareOverrun;
    1316:	f240 501d 	movw	r0, #1309	; 0x51d
        *(data++) = base->DATA;
#endif
    }

    return kStatus_Success;
}
    131a:	bd38      	pop	{r3, r4, r5, pc}
    temp = (uint32_t)base->FIFO;
    131c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    temp &= (uint32_t)(~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
    131e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    base->FIFO = temp;
    1322:	6283      	str	r3, [r0, #40]	; 0x28
    temp = (uint32_t)base->STAT;
    1324:	6943      	ldr	r3, [r0, #20]
    1326:	f023 23c0 	bic.w	r3, r3, #3221274624	; 0xc000c000
    132a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    temp &= (uint32_t)(~(LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK));
    132e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    base->STAT = temp;
    1332:	6143      	str	r3, [r0, #20]
    temp = base->STAT;
    1334:	6943      	ldr	r3, [r0, #20]
    temp |= (base->FIFO &
    1336:	6a83      	ldr	r3, [r0, #40]	; 0x28
                return kStatus_LPUART_NoiseError;
    1338:	f240 501e 	movw	r0, #1310	; 0x51e
}
    133c:	bd38      	pop	{r3, r4, r5, pc}
    temp = (uint32_t)base->FIFO;
    133e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    temp &= (uint32_t)(~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
    1340:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    base->FIFO = temp;
    1344:	6283      	str	r3, [r0, #40]	; 0x28
    temp = (uint32_t)base->STAT;
    1346:	6943      	ldr	r3, [r0, #20]
    1348:	f023 23c0 	bic.w	r3, r3, #3221274624	; 0xc000c000
    134c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    temp &= (uint32_t)(~(LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK));
    1350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    base->STAT = temp;
    1354:	6143      	str	r3, [r0, #20]
    temp = base->STAT;
    1356:	6943      	ldr	r3, [r0, #20]
    temp |= (base->FIFO &
    1358:	6a83      	ldr	r3, [r0, #40]	; 0x28
                return kStatus_LPUART_FramingError;
    135a:	f240 501f 	movw	r0, #1311	; 0x51f
}
    135e:	bd38      	pop	{r3, r4, r5, pc}
    temp = (uint32_t)base->FIFO;
    1360:	6a83      	ldr	r3, [r0, #40]	; 0x28
    temp &= (uint32_t)(~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
    1362:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    base->FIFO = temp;
    1366:	6283      	str	r3, [r0, #40]	; 0x28
    temp = (uint32_t)base->STAT;
    1368:	6943      	ldr	r3, [r0, #20]
    136a:	f023 23c0 	bic.w	r3, r3, #3221274624	; 0xc000c000
    136e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    temp &= (uint32_t)(~(LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK));
    1372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    base->STAT = temp;
    1376:	6143      	str	r3, [r0, #20]
    temp = base->STAT;
    1378:	6943      	ldr	r3, [r0, #20]
    temp |= (base->FIFO &
    137a:	6a83      	ldr	r3, [r0, #40]	; 0x28
                return kStatus_LPUART_ParityError;
    137c:	f44f 60a4 	mov.w	r0, #1312	; 0x520
}
    1380:	bd38      	pop	{r3, r4, r5, pc}
            *(data++) = base->DATA;
    1382:	f801 3c01 	strb.w	r3, [r1, #-1]
    1386:	e799      	b.n	12bc <LPUART_ReadBlocking+0x1c>
    return kStatus_Success;
    1388:	2000      	movs	r0, #0
}
    138a:	bd38      	pop	{r3, r4, r5, pc}
    assert(data);
    138c:	4b03      	ldr	r3, [pc, #12]	; (139c <LPUART_ReadBlocking+0xfc>)
    138e:	4a04      	ldr	r2, [pc, #16]	; (13a0 <LPUART_ReadBlocking+0x100>)
    1390:	4804      	ldr	r0, [pc, #16]	; (13a4 <LPUART_ReadBlocking+0x104>)
    1392:	f44f 712e 	mov.w	r1, #696	; 0x2b8
    1396:	f001 fbff 	bl	2b98 <__assert_func>
    139a:	bf00      	nop
    139c:	00004190 	.word	0x00004190
    13a0:	00004214 	.word	0x00004214
    13a4:	00004198 	.word	0x00004198

000013a8 <LPUART0_TX_DriverIRQHandler>:

#if defined(LPUART0)
#if !(defined(FSL_FEATURE_LPUART_HAS_SHARED_IRQ0_IRQ1) && FSL_FEATURE_LPUART_HAS_SHARED_IRQ0_IRQ1)
#if defined(FSL_FEATURE_LPUART_HAS_SEPARATE_RX_TX_IRQ) && FSL_FEATURE_LPUART_HAS_SEPARATE_RX_TX_IRQ
void LPUART0_TX_DriverIRQHandler(void)
{
    13a8:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART0, s_lpuartHandle[0]);
    13aa:	4a04      	ldr	r2, [pc, #16]	; (13bc <LPUART0_TX_DriverIRQHandler+0x14>)
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <LPUART0_TX_DriverIRQHandler+0x18>)
    13ae:	6811      	ldr	r1, [r2, #0]
    13b0:	681b      	ldr	r3, [r3, #0]
    13b2:	4804      	ldr	r0, [pc, #16]	; (13c4 <LPUART0_TX_DriverIRQHandler+0x1c>)
    13b4:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    13b6:	f3bf 8f4f 	dsb	sy
/* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
  exception return operation might vector to incorrect interrupt */
#if defined __CORTEX_M && (__CORTEX_M == 4U)
    __DSB();
#endif
}
    13ba:	bd08      	pop	{r3, pc}
    13bc:	20000074 	.word	0x20000074
    13c0:	20000080 	.word	0x20000080
    13c4:	4006a000 	.word	0x4006a000

000013c8 <LPUART0_RX_DriverIRQHandler>:
    13c8:	f7ff bfee 	b.w	13a8 <LPUART0_TX_DriverIRQHandler>

000013cc <LPUART1_TX_DriverIRQHandler>:

#if defined(LPUART1)
#if !(defined(FSL_FEATURE_LPUART_HAS_SHARED_IRQ0_IRQ1) && FSL_FEATURE_LPUART_HAS_SHARED_IRQ0_IRQ1)
#if defined(FSL_FEATURE_LPUART_HAS_SEPARATE_RX_TX_IRQ) && FSL_FEATURE_LPUART_HAS_SEPARATE_RX_TX_IRQ
void LPUART1_TX_DriverIRQHandler(void)
{
    13cc:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART1, s_lpuartHandle[1]);
    13ce:	4a04      	ldr	r2, [pc, #16]	; (13e0 <LPUART1_TX_DriverIRQHandler+0x14>)
    13d0:	4b04      	ldr	r3, [pc, #16]	; (13e4 <LPUART1_TX_DriverIRQHandler+0x18>)
    13d2:	6851      	ldr	r1, [r2, #4]
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	4804      	ldr	r0, [pc, #16]	; (13e8 <LPUART1_TX_DriverIRQHandler+0x1c>)
    13d8:	4798      	blx	r3
    13da:	f3bf 8f4f 	dsb	sy
/* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
  exception return operation might vector to incorrect interrupt */
#if defined __CORTEX_M && (__CORTEX_M == 4U)
    __DSB();
#endif
}
    13de:	bd08      	pop	{r3, pc}
    13e0:	20000074 	.word	0x20000074
    13e4:	20000080 	.word	0x20000080
    13e8:	4006b000 	.word	0x4006b000

000013ec <LPUART1_RX_DriverIRQHandler>:
    13ec:	f7ff bfee 	b.w	13cc <LPUART1_TX_DriverIRQHandler>

000013f0 <LPUART2_TX_DriverIRQHandler>:
#endif

#if defined(LPUART2)
#if defined(FSL_FEATURE_LPUART_HAS_SEPARATE_RX_TX_IRQ) && FSL_FEATURE_LPUART_HAS_SEPARATE_RX_TX_IRQ
void LPUART2_TX_DriverIRQHandler(void)
{
    13f0:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART2, s_lpuartHandle[2]);
    13f2:	4a04      	ldr	r2, [pc, #16]	; (1404 <LPUART2_TX_DriverIRQHandler+0x14>)
    13f4:	4b04      	ldr	r3, [pc, #16]	; (1408 <LPUART2_TX_DriverIRQHandler+0x18>)
    13f6:	6891      	ldr	r1, [r2, #8]
    13f8:	681b      	ldr	r3, [r3, #0]
    13fa:	4804      	ldr	r0, [pc, #16]	; (140c <LPUART2_TX_DriverIRQHandler+0x1c>)
    13fc:	4798      	blx	r3
    13fe:	f3bf 8f4f 	dsb	sy
/* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
  exception return operation might vector to incorrect interrupt */
#if defined __CORTEX_M && (__CORTEX_M == 4U)
    __DSB();
#endif
}
    1402:	bd08      	pop	{r3, pc}
    1404:	20000074 	.word	0x20000074
    1408:	20000080 	.word	0x20000080
    140c:	4006c000 	.word	0x4006c000

00001410 <LPUART2_RX_DriverIRQHandler>:
    1410:	f7ff bfee 	b.w	13f0 <LPUART2_TX_DriverIRQHandler>

00001414 <SMC_SetPowerModeHsrun>:
    return kStatus_Success;
}

#if (defined(FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE) && FSL_FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE)
status_t SMC_SetPowerModeHsrun(SMC_Type *base)
{
    1414:	4602      	mov	r2, r0
    reg &= ~SMC_PMCTRL_RUNM_MASK;
    reg |= (kSMC_Hsrun << SMC_PMCTRL_RUNM_SHIFT);
    base->PMCTRL = reg;

    return kStatus_Success;
}
    1416:	2000      	movs	r0, #0
    reg = base->PMCTRL;
    1418:	68d3      	ldr	r3, [r2, #12]
    reg &= ~SMC_PMCTRL_RUNM_MASK;
    141a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
    base->PMCTRL = reg;
    141e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    1422:	60d3      	str	r3, [r2, #12]
}
    1424:	4770      	bx	lr
    1426:	bf00      	nop

00001428 <BOARD_InitDebugConsole>:
/*******************************************************************************
 * Code
 ******************************************************************************/
/* Initialize debug console. */
void BOARD_InitDebugConsole(void)
{
    1428:	b510      	push	{r4, lr}
    uint32_t uartClkSrcFreq = BOARD_DEBUG_UART_CLK_FREQ;
    142a:	4806      	ldr	r0, [pc, #24]	; (1444 <BOARD_InitDebugConsole+0x1c>)
    142c:	f7ff fcec 	bl	e08 <CLOCK_GetIpFreq>

    DbgConsole_Init(BOARD_DEBUG_UART_BASEADDR, BOARD_DEBUG_UART_BAUDRATE, BOARD_DEBUG_UART_TYPE, uartClkSrcFreq);
    1430:	2202      	movs	r2, #2
    1432:	4603      	mov	r3, r0
    1434:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    1438:	4803      	ldr	r0, [pc, #12]	; (1448 <BOARD_InitDebugConsole+0x20>)
}
    143a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DbgConsole_Init(BOARD_DEBUG_UART_BASEADDR, BOARD_DEBUG_UART_BAUDRATE, BOARD_DEBUG_UART_TYPE, uartClkSrcFreq);
    143e:	f7ff b859 	b.w	4f4 <DbgConsole_Init>
    1442:	bf00      	nop
    1444:	400651ac 	.word	0x400651ac
    1448:	4006b000 	.word	0x4006b000

0000144c <CLOCK_SetIpSrc.part.2>:
 * setting.
 *
 * @param name Which peripheral to check, see \ref clock_ip_name_t.
 * @param src Clock source to set.
 */
static inline void CLOCK_SetIpSrc(clock_ip_name_t name, clock_ip_src_t src)
    144c:	b508      	push	{r3, lr}
{
    uint32_t reg = (*(volatile uint32_t *)name);

    assert(reg & PCC_CLKCFG_PR_MASK);
    144e:	4a03      	ldr	r2, [pc, #12]	; (145c <CLOCK_SetIpSrc.part.2+0x10>)
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <CLOCK_SetIpSrc.part.2+0x14>)
    1452:	4804      	ldr	r0, [pc, #16]	; (1464 <CLOCK_SetIpSrc.part.2+0x18>)
    1454:	f240 21ca 	movw	r1, #714	; 0x2ca
    1458:	f001 fb9e 	bl	2b98 <__assert_func>
    145c:	00004248 	.word	0x00004248
    1460:	00003f90 	.word	0x00003f90
    1464:	00004058 	.word	0x00004058

00001468 <BOARD_FastClock>:
    };
/*******************************************************************************
 * Code for BOARD_FastClock configuration
 ******************************************************************************/
void BOARD_FastClock(void)
{
    1468:	b530      	push	{r4, r5, lr}
    const scg_sirc_config_t scgSircConfig = {.enableMode = kSCG_SircEnable,
    146a:	2100      	movs	r1, #0
    scg_sys_clk_config_t sysClkSafeConfigSource = {
    146c:	460c      	mov	r4, r1
    146e:	2303      	movs	r3, #3
{
    1470:	b083      	sub	sp, #12
    const scg_sirc_config_t scgSircConfig = {.enableMode = kSCG_SircEnable,
    1472:	2202      	movs	r2, #2
    scg_sys_clk_config_t sysClkSafeConfigSource = {
    1474:	f363 0403 	bfi	r4, r3, #0, #4
 */
static inline void CLOCK_SetRunModeSysClkConfig(const scg_sys_clk_config_t *config)
{
    assert(config);

    SCG->RCCR = *(const uint32_t *)config;
    1478:	4d35      	ldr	r5, [pc, #212]	; (1550 <BOARD_FastClock+0xe8>)
    const scg_sirc_config_t scgSircConfig = {.enableMode = kSCG_SircEnable,
    147a:	f88d 2005 	strb.w	r2, [sp, #5]
    147e:	2301      	movs	r3, #1
    scg_sys_clk_config_t sysClkSafeConfigSource = {
    1480:	f362 641b 	bfi	r4, r2, #24, #4
    CLOCK_InitSirc(&scgSircConfig);
    1484:	4668      	mov	r0, sp
    const scg_sirc_config_t scgSircConfig = {.enableMode = kSCG_SircEnable,
    1486:	f88d 1004 	strb.w	r1, [sp, #4]
    148a:	9300      	str	r3, [sp, #0]
    148c:	f88d 3006 	strb.w	r3, [sp, #6]
    CLOCK_InitSirc(&scgSircConfig);
    1490:	f7ff fb5a 	bl	b48 <CLOCK_InitSirc>
    } while (curConfig.src != sysClkSafeConfigSource.src);
    1494:	0e22      	lsrs	r2, r4, #24
    1496:	616c      	str	r4, [r5, #20]
 */
static inline void CLOCK_GetCurSysClkConfig(scg_sys_clk_config_t *config)
{
    assert(config);

    *(uint32_t *)config = SCG->CSR;
    1498:	692b      	ldr	r3, [r5, #16]
    149a:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
    149e:	071b      	lsls	r3, r3, #28
    14a0:	d1fa      	bne.n	1498 <BOARD_FastClock+0x30>
    CLOCK_InitFirc(fircConfig);
    14a2:	482c      	ldr	r0, [pc, #176]	; (1554 <BOARD_FastClock+0xec>)
    14a4:	f7ff fbb4 	bl	c10 <CLOCK_InitFirc>
    sysClkSafeConfigSource.src = kSCG_SysClkSrcFirc;
    14a8:	2303      	movs	r3, #3
    14aa:	f363 641b 	bfi	r4, r3, #24, #4
    14ae:	4a28      	ldr	r2, [pc, #160]	; (1550 <BOARD_FastClock+0xe8>)
    SCG->RCCR = *(const uint32_t *)config;
    14b0:	616c      	str	r4, [r5, #20]
    } while (curConfig.src != sysClkSafeConfigSource.src);
    14b2:	0e24      	lsrs	r4, r4, #24
    *(uint32_t *)config = SCG->CSR;
    14b4:	6913      	ldr	r3, [r2, #16]
    14b6:	ea84 6313 	eor.w	r3, r4, r3, lsr #24
    14ba:	071d      	lsls	r5, r3, #28
    14bc:	d1fa      	bne.n	14b4 <BOARD_FastClock+0x4c>
 * @param base SMC peripheral base address.
 * @param allowedModes Bitmap of the allowed power modes.
 */
static inline void SMC_SetPowerModeProtection(SMC_Type *base, uint8_t allowedModes)
{
    base->PMPROT = allowedModes;
    14be:	4c26      	ldr	r4, [pc, #152]	; (1558 <BOARD_FastClock+0xf0>)
    14c0:	23a0      	movs	r3, #160	; 0xa0
    14c2:	60a3      	str	r3, [r4, #8]

    /* Init FIRC. */
    CLOCK_CONFIG_FircSafeConfig(&g_scgFircConfig_BOARD_FastClock);
    /* Set HSRUN power mode. */
    SMC_SetPowerModeProtection(SMC, kSMC_AllowPowerModeAll);
    SMC_SetPowerModeHsrun(SMC);
    14c4:	4620      	mov	r0, r4
    14c6:	f7ff ffa5 	bl	1414 <SMC_SetPowerModeHsrun>
 * @param base SMC peripheral base address.
 * @return Current power mode status.
 */
static inline smc_power_state_t SMC_GetPowerModeState(SMC_Type *base)
{
    return (smc_power_state_t)base->PMSTAT;
    14ca:	4620      	mov	r0, r4
    14cc:	6943      	ldr	r3, [r0, #20]
    while (SMC_GetPowerModeState(SMC) != kSMC_PowerStateHsrun)
    14ce:	b2db      	uxtb	r3, r3
    14d0:	2b80      	cmp	r3, #128	; 0x80
    14d2:	d1fb      	bne.n	14cc <BOARD_FastClock+0x64>
    {
    }

    /* Init SIRC. */
    CLOCK_InitSirc(&g_scgSircConfig_BOARD_FastClock);
    14d4:	4821      	ldr	r0, [pc, #132]	; (155c <BOARD_FastClock+0xf4>)
    14d6:	f7ff fb37 	bl	b48 <CLOCK_InitSirc>
    /* Init SysPll. */
    CLOCK_InitSysPll(&g_scgSysPllConfig_BOARD_FastClock);
    14da:	4821      	ldr	r0, [pc, #132]	; (1560 <BOARD_FastClock+0xf8>)
    14dc:	f7ff fc26 	bl	d2c <CLOCK_InitSysPll>
    SCG->HCCR = *(const uint32_t *)config;
    14e0:	4b20      	ldr	r3, [pc, #128]	; (1564 <BOARD_FastClock+0xfc>)
    14e2:	4a1b      	ldr	r2, [pc, #108]	; (1550 <BOARD_FastClock+0xe8>)
    14e4:	6818      	ldr	r0, [r3, #0]
    CLOCK_SetHsrunModeSysClkConfig(&g_sysClkConfig_BOARD_FastClock);
    /* Wait for clock source switch finished. */
    do
    {
         CLOCK_GetCurSysClkConfig(&curConfig);
    } while (curConfig.src != g_sysClkConfig_BOARD_FastClock.src);
    14e6:	78d9      	ldrb	r1, [r3, #3]
    14e8:	61d0      	str	r0, [r2, #28]
    *(uint32_t *)config = SCG->CSR;
    14ea:	6913      	ldr	r3, [r2, #16]
    14ec:	ea81 6313 	eor.w	r3, r1, r3, lsr #24
    14f0:	0718      	lsls	r0, r3, #28
    14f2:	d1fa      	bne.n	14ea <BOARD_FastClock+0x82>
    /* Set SystemCoreClock variable. */
    SystemCoreClock = BOARD_FASTCLOCK_CORE_CLOCK;
    14f4:	4b1c      	ldr	r3, [pc, #112]	; (1568 <BOARD_FastClock+0x100>)
    14f6:	491d      	ldr	r1, [pc, #116]	; (156c <BOARD_FastClock+0x104>)
    uint32_t reg = (*(volatile uint32_t *)name);
    14f8:	4a1d      	ldr	r2, [pc, #116]	; (1570 <BOARD_FastClock+0x108>)
    14fa:	6019      	str	r1, [r3, #0]
    14fc:	6813      	ldr	r3, [r2, #0]
    assert(reg & PCC_CLKCFG_PR_MASK);
    14fe:	2b00      	cmp	r3, #0
    1500:	da1d      	bge.n	153e <BOARD_FastClock+0xd6>
    assert(!(reg & PCC_CLKCFG_INUSE_MASK)); /* Should not change if clock has been enabled by other core. */
    1502:	0099      	lsls	r1, r3, #2
    1504:	d41d      	bmi.n	1542 <BOARD_FastClock+0xda>
    (*(volatile uint32_t *)name) = reg & ~PCC_CLKCFG_CGC_MASK;
    1506:	f023 408e 	bic.w	r0, r3, #1191182336	; 0x47000000
    reg = (reg & ~PCC_CLKCFG_PCS_MASK) | PCC_CLKCFG_PCS(src);
    150a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    150e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    (*(volatile uint32_t *)name) = reg & ~PCC_CLKCFG_CGC_MASK;
    1512:	f040 7040 	orr.w	r0, r0, #50331648	; 0x3000000
    uint32_t reg = (*(volatile uint32_t *)name);
    1516:	4917      	ldr	r1, [pc, #92]	; (1574 <BOARD_FastClock+0x10c>)
    (*(volatile uint32_t *)name) = reg & ~PCC_CLKCFG_CGC_MASK;
    1518:	6010      	str	r0, [r2, #0]
    (*(volatile uint32_t *)name) = reg;
    151a:	6013      	str	r3, [r2, #0]
    uint32_t reg = (*(volatile uint32_t *)name);
    151c:	680b      	ldr	r3, [r1, #0]
    assert(reg & PCC_CLKCFG_PR_MASK);
    151e:	2b00      	cmp	r3, #0
    1520:	da0d      	bge.n	153e <BOARD_FastClock+0xd6>
    assert(!(reg & PCC_CLKCFG_INUSE_MASK)); /* Should not change if clock has been enabled by other core. */
    1522:	009a      	lsls	r2, r3, #2
    1524:	d40d      	bmi.n	1542 <BOARD_FastClock+0xda>
    (*(volatile uint32_t *)name) = reg & ~PCC_CLKCFG_CGC_MASK;
    1526:	f023 428e 	bic.w	r2, r3, #1191182336	; 0x47000000
    reg = (reg & ~PCC_CLKCFG_PCS_MASK) | PCC_CLKCFG_PCS(src);
    152a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    (*(volatile uint32_t *)name) = reg & ~PCC_CLKCFG_CGC_MASK;
    152e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
    reg = (reg & ~PCC_CLKCFG_PCS_MASK) | PCC_CLKCFG_PCS(src);
    1532:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    (*(volatile uint32_t *)name) = reg & ~PCC_CLKCFG_CGC_MASK;
    1536:	600a      	str	r2, [r1, #0]
    (*(volatile uint32_t *)name) = reg;
    1538:	600b      	str	r3, [r1, #0]
    /* Set PCC LPUART0 selection */
    CLOCK_SetIpSrc(kCLOCK_Lpuart0, kCLOCK_IpSrcFircAsync);
    /* Set PCC LPUART1 selection */
    CLOCK_SetIpSrc(kCLOCK_Lpuart1, kCLOCK_IpSrcFircAsync);
}
    153a:	b003      	add	sp, #12
    153c:	bd30      	pop	{r4, r5, pc}
    153e:	f7ff ff85 	bl	144c <CLOCK_SetIpSrc.part.2>
    assert(!(reg & PCC_CLKCFG_INUSE_MASK)); /* Should not change if clock has been enabled by other core. */
    1542:	4b0d      	ldr	r3, [pc, #52]	; (1578 <BOARD_FastClock+0x110>)
    1544:	4a0d      	ldr	r2, [pc, #52]	; (157c <BOARD_FastClock+0x114>)
    1546:	480e      	ldr	r0, [pc, #56]	; (1580 <BOARD_FastClock+0x118>)
    1548:	f240 21cb 	movw	r1, #715	; 0x2cb
    154c:	f001 fb24 	bl	2b98 <__assert_func>
    1550:	40064000 	.word	0x40064000
    1554:	00004258 	.word	0x00004258
    1558:	4007e000 	.word	0x4007e000
    155c:	00004264 	.word	0x00004264
    1560:	00004274 	.word	0x00004274
    1564:	00004284 	.word	0x00004284
    1568:	20000000 	.word	0x20000000
    156c:	0a037a00 	.word	0x0a037a00
    1570:	400651a8 	.word	0x400651a8
    1574:	400651ac 	.word	0x400651ac
    1578:	00004228 	.word	0x00004228
    157c:	00004248 	.word	0x00004248
    1580:	00004058 	.word	0x00004058

00001584 <BOARD_SlowClock>:
    };
/*******************************************************************************
 * Code for BOARD_SlowClock configuration
 ******************************************************************************/
void BOARD_SlowClock(void)
{
    1584:	b508      	push	{r3, lr}
    scg_sys_clk_config_t curConfig;

    /* Init SIRC. */
    CLOCK_InitSirc(&g_scgSircConfig_BOARD_SlowClock);
    1586:	4808      	ldr	r0, [pc, #32]	; (15a8 <BOARD_SlowClock+0x24>)
    1588:	f7ff fade 	bl	b48 <CLOCK_InitSirc>
    SCG->RCCR = *(const uint32_t *)config;
    158c:	4b07      	ldr	r3, [pc, #28]	; (15ac <BOARD_SlowClock+0x28>)
    158e:	4a08      	ldr	r2, [pc, #32]	; (15b0 <BOARD_SlowClock+0x2c>)
    1590:	6818      	ldr	r0, [r3, #0]
    CLOCK_SetRunModeSysClkConfig(&g_sysClkConfig_BOARD_SlowClock);
    /* Wait for clock source switch finished. */
    do
    {
         CLOCK_GetCurSysClkConfig(&curConfig);
    } while (curConfig.src != g_sysClkConfig_BOARD_SlowClock.src);
    1592:	78d9      	ldrb	r1, [r3, #3]
    1594:	6150      	str	r0, [r2, #20]
    *(uint32_t *)config = SCG->CSR;
    1596:	6913      	ldr	r3, [r2, #16]
    1598:	ea81 6313 	eor.w	r3, r1, r3, lsr #24
    159c:	071b      	lsls	r3, r3, #28
    159e:	d1fa      	bne.n	1596 <BOARD_SlowClock+0x12>
    /* Set SystemCoreClock variable. */
    SystemCoreClock = BOARD_SLOWCLOCK_CORE_CLOCK;
    15a0:	4b04      	ldr	r3, [pc, #16]	; (15b4 <BOARD_SlowClock+0x30>)
    15a2:	4a05      	ldr	r2, [pc, #20]	; (15b8 <BOARD_SlowClock+0x34>)
    15a4:	601a      	str	r2, [r3, #0]
}
    15a6:	bd08      	pop	{r3, pc}
    15a8:	0000426c 	.word	0x0000426c
    15ac:	00004288 	.word	0x00004288
    15b0:	40064000 	.word	0x40064000
    15b4:	20000000 	.word	0x20000000
    15b8:	003d0900 	.word	0x003d0900

000015bc <BOARD_InitBootClocks>:
    BOARD_SlowClock();
    15bc:	f7ff bfe2 	b.w	1584 <BOARD_SlowClock>

000015c0 <BOARD_InitBootPeripherals>:
/*******************************************************************************
 * BOARD_InitBootPeripherals function
 ******************************************************************************/
void BOARD_InitBootPeripherals(void)
{
}
    15c0:	4770      	bx	lr
    15c2:	bf00      	nop

000015c4 <CLOCK_EnableClock.part.0>:
static inline void CLOCK_EnableClock(clock_ip_name_t name)
    15c4:	b508      	push	{r3, lr}
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    15c6:	4a03      	ldr	r2, [pc, #12]	; (15d4 <CLOCK_EnableClock.part.0+0x10>)
    15c8:	4b03      	ldr	r3, [pc, #12]	; (15d8 <CLOCK_EnableClock.part.0+0x14>)
    15ca:	4804      	ldr	r0, [pc, #16]	; (15dc <CLOCK_EnableClock.part.0+0x18>)
    15cc:	f240 219d 	movw	r1, #669	; 0x29d
    15d0:	f001 fae2 	bl	2b98 <__assert_func>
    15d4:	00004290 	.word	0x00004290
    15d8:	00004024 	.word	0x00004024
    15dc:	00004058 	.word	0x00004058

000015e0 <BOARD_InitPins>:
 * Function Name : BOARD_InitPins
 * Description   : Configures pin routing and optionally pin electrical features.
 *
 * END ****************************************************************************************************************/
void BOARD_InitPins(void)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
    15e2:	4bcb      	ldr	r3, [pc, #812]	; (1910 <BOARD_InitPins+0x330>)
    15e4:	681a      	ldr	r2, [r3, #0]
    15e6:	2a00      	cmp	r2, #0
    15e8:	b0aa      	sub	sp, #168	; 0xa8
    15ea:	f280 8312 	bge.w	1c12 <BOARD_InitPins+0x632>
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    15ee:	6819      	ldr	r1, [r3, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    15f0:	4ac8      	ldr	r2, [pc, #800]	; (1914 <BOARD_InitPins+0x334>)
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    15f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    15f6:	6019      	str	r1, [r3, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    15f8:	6813      	ldr	r3, [r2, #0]
    15fa:	2b00      	cmp	r3, #0
    15fc:	f280 8309 	bge.w	1c12 <BOARD_InitPins+0x632>
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    1600:	6813      	ldr	r3, [r2, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    1602:	49c5      	ldr	r1, [pc, #788]	; (1918 <BOARD_InitPins+0x338>)
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    1604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1608:	6013      	str	r3, [r2, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    160a:	680b      	ldr	r3, [r1, #0]
    160c:	2b00      	cmp	r3, #0
    160e:	f280 8300 	bge.w	1c12 <BOARD_InitPins+0x632>
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    1612:	680b      	ldr	r3, [r1, #0]
    1614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1618:	600b      	str	r3, [r1, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    161a:	6893      	ldr	r3, [r2, #8]
    161c:	2b00      	cmp	r3, #0
    161e:	f102 0208 	add.w	r2, r2, #8
    1622:	f280 82f6 	bge.w	1c12 <BOARD_InitPins+0x632>
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    1626:	6811      	ldr	r1, [r2, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    1628:	4bbc      	ldr	r3, [pc, #752]	; (191c <BOARD_InitPins+0x33c>)
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    162a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    162e:	6011      	str	r1, [r2, #0]
    assert((*(volatile uint32_t *)name) & PCC_CLKCFG_PR_MASK);
    1630:	681a      	ldr	r2, [r3, #0]
    1632:	2a00      	cmp	r2, #0
    1634:	f280 82ed 	bge.w	1c12 <BOARD_InitPins+0x632>
    (*(volatile uint32_t *)name) |= PCC_CLKCFG_CGC_MASK;
    1638:	681a      	ldr	r2, [r3, #0]
    gpio_pin_config_t MCU_NMI_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTA0 (pin 79)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_NMI_GPIO, BOARD_INITPINS_MCU_NMI_PIN, &MCU_NMI_config);
    163a:	48b9      	ldr	r0, [pc, #740]	; (1920 <BOARD_InitPins+0x340>)
    gpio_pin_config_t MCU_NMI_config = {
    163c:	2400      	movs	r4, #0
    163e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    1642:	601a      	str	r2, [r3, #0]
    GPIO_PinInit(BOARD_INITPINS_MCU_NMI_GPIO, BOARD_INITPINS_MCU_NMI_PIN, &MCU_NMI_config);
    1644:	4621      	mov	r1, r4
    1646:	466a      	mov	r2, sp
    gpio_pin_config_t MCU_NMI_config = {
    1648:	f88d 4000 	strb.w	r4, [sp]
    164c:	f88d 4001 	strb.w	r4, [sp, #1]
    GPIO_PinInit(BOARD_INITPINS_MCU_NMI_GPIO, BOARD_INITPINS_MCU_NMI_PIN, &MCU_NMI_config);
    1650:	f7ff fc90 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_IRQ_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTA6 (pin 58)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_IRQ_GPIO, BOARD_INITPINS_MCU_IRQ_PIN, &MCU_IRQ_config);
    1654:	aa01      	add	r2, sp, #4
    1656:	2106      	movs	r1, #6
    1658:	48b1      	ldr	r0, [pc, #708]	; (1920 <BOARD_InitPins+0x340>)
    gpio_pin_config_t MCU_IRQ_config = {
    165a:	f88d 4004 	strb.w	r4, [sp, #4]

    gpio_pin_config_t MCU_E_config = {
    165e:	2501      	movs	r5, #1
    gpio_pin_config_t MCU_IRQ_config = {
    1660:	f88d 4005 	strb.w	r4, [sp, #5]
    GPIO_PinInit(BOARD_INITPINS_MCU_IRQ_GPIO, BOARD_INITPINS_MCU_IRQ_PIN, &MCU_IRQ_config);
    1664:	f7ff fc86 	bl	f74 <GPIO_PinInit>
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTA8 (pin 100)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_E_GPIO, BOARD_INITPINS_MCU_E_PIN, &MCU_E_config);
    1668:	aa02      	add	r2, sp, #8
    166a:	2108      	movs	r1, #8
    166c:	48ac      	ldr	r0, [pc, #688]	; (1920 <BOARD_InitPins+0x340>)
    gpio_pin_config_t MCU_E_config = {
    166e:	f88d 4009 	strb.w	r4, [sp, #9]
    1672:	f88d 5008 	strb.w	r5, [sp, #8]
    GPIO_PinInit(BOARD_INITPINS_MCU_E_GPIO, BOARD_INITPINS_MCU_E_PIN, &MCU_E_config);
    1676:	f7ff fc7d 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_RESET_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTA9 (pin 99)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_RESET_GPIO, BOARD_INITPINS_MCU_RESET_PIN, &MCU_RESET_config);
    167a:	aa03      	add	r2, sp, #12
    167c:	2109      	movs	r1, #9
    167e:	48a8      	ldr	r0, [pc, #672]	; (1920 <BOARD_InitPins+0x340>)
    gpio_pin_config_t MCU_RESET_config = {
    1680:	f88d 500c 	strb.w	r5, [sp, #12]
    1684:	f88d 400d 	strb.w	r4, [sp, #13]
    GPIO_PinInit(BOARD_INITPINS_MCU_RESET_GPIO, BOARD_INITPINS_MCU_RESET_PIN, &MCU_RESET_config);
    1688:	f7ff fc74 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D0_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB0 (pin 54)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D0_GPIO, BOARD_INITPINS_MCU_D0_PIN, &MCU_D0_config);
    168c:	4621      	mov	r1, r4
    168e:	aa04      	add	r2, sp, #16
    1690:	48a4      	ldr	r0, [pc, #656]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D0_config = {
    1692:	f88d 4010 	strb.w	r4, [sp, #16]
    1696:	f88d 4011 	strb.w	r4, [sp, #17]
    GPIO_PinInit(BOARD_INITPINS_MCU_D0_GPIO, BOARD_INITPINS_MCU_D0_PIN, &MCU_D0_config);
    169a:	f7ff fc6b 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D1_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB1 (pin 53)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D1_GPIO, BOARD_INITPINS_MCU_D1_PIN, &MCU_D1_config);
    169e:	4629      	mov	r1, r5
    16a0:	aa05      	add	r2, sp, #20
    16a2:	48a0      	ldr	r0, [pc, #640]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D1_config = {
    16a4:	f88d 4014 	strb.w	r4, [sp, #20]
    16a8:	f88d 4015 	strb.w	r4, [sp, #21]
    GPIO_PinInit(BOARD_INITPINS_MCU_D1_GPIO, BOARD_INITPINS_MCU_D1_PIN, &MCU_D1_config);
    16ac:	f7ff fc62 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D2_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB2 (pin 48)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D2_GPIO, BOARD_INITPINS_MCU_D2_PIN, &MCU_D2_config);
    16b0:	aa06      	add	r2, sp, #24
    16b2:	2102      	movs	r1, #2
    16b4:	489b      	ldr	r0, [pc, #620]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D2_config = {
    16b6:	f88d 4018 	strb.w	r4, [sp, #24]
    16ba:	f88d 4019 	strb.w	r4, [sp, #25]
    GPIO_PinInit(BOARD_INITPINS_MCU_D2_GPIO, BOARD_INITPINS_MCU_D2_PIN, &MCU_D2_config);
    16be:	f7ff fc59 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D3_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB3 (pin 47)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D3_GPIO, BOARD_INITPINS_MCU_D3_PIN, &MCU_D3_config);
    16c2:	aa07      	add	r2, sp, #28
    16c4:	2103      	movs	r1, #3
    16c6:	4897      	ldr	r0, [pc, #604]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D3_config = {
    16c8:	f88d 401c 	strb.w	r4, [sp, #28]
    16cc:	f88d 401d 	strb.w	r4, [sp, #29]
    GPIO_PinInit(BOARD_INITPINS_MCU_D3_GPIO, BOARD_INITPINS_MCU_D3_PIN, &MCU_D3_config);
    16d0:	f7ff fc50 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D4_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB4 (pin 28)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D4_GPIO, BOARD_INITPINS_MCU_D4_PIN, &MCU_D4_config);
    16d4:	aa08      	add	r2, sp, #32
    16d6:	2104      	movs	r1, #4
    16d8:	4892      	ldr	r0, [pc, #584]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D4_config = {
    16da:	f88d 4020 	strb.w	r4, [sp, #32]
    16de:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
    GPIO_PinInit(BOARD_INITPINS_MCU_D4_GPIO, BOARD_INITPINS_MCU_D4_PIN, &MCU_D4_config);
    16e2:	f7ff fc47 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D5_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB5 (pin 27)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D5_GPIO, BOARD_INITPINS_MCU_D5_PIN, &MCU_D5_config);
    16e6:	aa09      	add	r2, sp, #36	; 0x24
    16e8:	2105      	movs	r1, #5
    16ea:	488e      	ldr	r0, [pc, #568]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D5_config = {
    16ec:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    16f0:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
    GPIO_PinInit(BOARD_INITPINS_MCU_D5_GPIO, BOARD_INITPINS_MCU_D5_PIN, &MCU_D5_config);
    16f4:	f7ff fc3e 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D6_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB6 (pin 16)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D6_GPIO, BOARD_INITPINS_MCU_D6_PIN, &MCU_D6_config);
    16f8:	aa0a      	add	r2, sp, #40	; 0x28
    16fa:	2106      	movs	r1, #6
    16fc:	4889      	ldr	r0, [pc, #548]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D6_config = {
    16fe:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
    1702:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
    GPIO_PinInit(BOARD_INITPINS_MCU_D6_GPIO, BOARD_INITPINS_MCU_D6_PIN, &MCU_D6_config);
    1706:	f7ff fc35 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_D7_config = {
        .pinDirection = kGPIO_DigitalInput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTB7 (pin 15)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_D7_GPIO, BOARD_INITPINS_MCU_D7_PIN, &MCU_D7_config);
    170a:	aa0b      	add	r2, sp, #44	; 0x2c
    170c:	2107      	movs	r1, #7
    170e:	4885      	ldr	r0, [pc, #532]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t MCU_D7_config = {
    1710:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    1714:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    GPIO_PinInit(BOARD_INITPINS_MCU_D7_GPIO, BOARD_INITPINS_MCU_D7_PIN, &MCU_D7_config);
    1718:	f7ff fc2c 	bl	f74 <GPIO_PinInit>

    gpio_pin_config_t LED_1_config = {
    171c:	4b82      	ldr	r3, [pc, #520]	; (1928 <BOARD_InitPins+0x348>)
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 1U
    };
    /* Initialize GPIO functionality on pin PTB14 (pin 66)  */
    GPIO_PinInit(BOARD_INITPINS_LED_1_GPIO, BOARD_INITPINS_LED_1_PIN, &LED_1_config);
    171e:	4881      	ldr	r0, [pc, #516]	; (1924 <BOARD_InitPins+0x344>)
    gpio_pin_config_t LED_1_config = {
    1720:	881e      	ldrh	r6, [r3, #0]
    1722:	aa2a      	add	r2, sp, #168	; 0xa8
    GPIO_PinInit(BOARD_INITPINS_LED_1_GPIO, BOARD_INITPINS_LED_1_PIN, &LED_1_config);
    1724:	210e      	movs	r1, #14
    gpio_pin_config_t LED_1_config = {
    1726:	f822 6d78 	strh.w	r6, [r2, #-120]!
    GPIO_PinInit(BOARD_INITPINS_LED_1_GPIO, BOARD_INITPINS_LED_1_PIN, &LED_1_config);
    172a:	f7ff fc23 	bl	f74 <GPIO_PinInit>

    gpio_pin_config_t LED_2_config = {
    172e:	aa2a      	add	r2, sp, #168	; 0xa8
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 1U
    };
    /* Initialize GPIO functionality on pin PTB15 (pin 65)  */
    GPIO_PinInit(BOARD_INITPINS_LED_2_GPIO, BOARD_INITPINS_LED_2_PIN, &LED_2_config);
    1730:	210f      	movs	r1, #15
    gpio_pin_config_t LED_2_config = {
    1732:	f822 6d74 	strh.w	r6, [r2, #-116]!
    GPIO_PinInit(BOARD_INITPINS_LED_2_GPIO, BOARD_INITPINS_LED_2_PIN, &LED_2_config);
    1736:	487b      	ldr	r0, [pc, #492]	; (1924 <BOARD_InitPins+0x344>)
    1738:	f7ff fc1c 	bl	f74 <GPIO_PinInit>

    gpio_pin_config_t LED_3_config = {
    173c:	aa2a      	add	r2, sp, #168	; 0xa8
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 1U
    };
    /* Initialize GPIO functionality on pin PTB16 (pin 64)  */
    GPIO_PinInit(BOARD_INITPINS_LED_3_GPIO, BOARD_INITPINS_LED_3_PIN, &LED_3_config);
    173e:	2110      	movs	r1, #16
    gpio_pin_config_t LED_3_config = {
    1740:	f822 6d70 	strh.w	r6, [r2, #-112]!
    GPIO_PinInit(BOARD_INITPINS_LED_3_GPIO, BOARD_INITPINS_LED_3_PIN, &LED_3_config);
    1744:	4877      	ldr	r0, [pc, #476]	; (1924 <BOARD_InitPins+0x344>)
    1746:	f7ff fc15 	bl	f74 <GPIO_PinInit>

    gpio_pin_config_t LED_4_config = {
    174a:	aa2a      	add	r2, sp, #168	; 0xa8
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 1U
    };
    /* Initialize GPIO functionality on pin PTB17 (pin 63)  */
    GPIO_PinInit(BOARD_INITPINS_LED_4_GPIO, BOARD_INITPINS_LED_4_PIN, &LED_4_config);
    174c:	2111      	movs	r1, #17
    gpio_pin_config_t LED_4_config = {
    174e:	f822 6d6c 	strh.w	r6, [r2, #-108]!
    GPIO_PinInit(BOARD_INITPINS_LED_4_GPIO, BOARD_INITPINS_LED_4_PIN, &LED_4_config);
    1752:	4874      	ldr	r0, [pc, #464]	; (1924 <BOARD_InitPins+0x344>)
    1754:	f7ff fc0e 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_5_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC0 (pin 40)  */
    GPIO_PinInit(BOARD_INITPINS_EX_5_GPIO, BOARD_INITPINS_EX_5_PIN, &EX_5_config);
    1758:	4621      	mov	r1, r4
    175a:	aa10      	add	r2, sp, #64	; 0x40
    175c:	4873      	ldr	r0, [pc, #460]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_5_config = {
    175e:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
    1762:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
    GPIO_PinInit(BOARD_INITPINS_EX_5_GPIO, BOARD_INITPINS_EX_5_PIN, &EX_5_config);
    1766:	f7ff fc05 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_4_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC1 (pin 39)  */
    GPIO_PinInit(BOARD_INITPINS_EX_4_GPIO, BOARD_INITPINS_EX_4_PIN, &EX_4_config);
    176a:	4629      	mov	r1, r5
    176c:	aa11      	add	r2, sp, #68	; 0x44
    176e:	486f      	ldr	r0, [pc, #444]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_4_config = {
    1770:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
    1774:	f88d 4045 	strb.w	r4, [sp, #69]	; 0x45
    GPIO_PinInit(BOARD_INITPINS_EX_4_GPIO, BOARD_INITPINS_EX_4_PIN, &EX_4_config);
    1778:	f7ff fbfc 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_3_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC2 (pin 30)  */
    GPIO_PinInit(BOARD_INITPINS_EX_3_GPIO, BOARD_INITPINS_EX_3_PIN, &EX_3_config);
    177c:	aa12      	add	r2, sp, #72	; 0x48
    177e:	2102      	movs	r1, #2
    1780:	486a      	ldr	r0, [pc, #424]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_3_config = {
    1782:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    1786:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
    GPIO_PinInit(BOARD_INITPINS_EX_3_GPIO, BOARD_INITPINS_EX_3_PIN, &EX_3_config);
    178a:	f7ff fbf3 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_2_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC3 (pin 29)  */
    GPIO_PinInit(BOARD_INITPINS_EX_2_GPIO, BOARD_INITPINS_EX_2_PIN, &EX_2_config);
    178e:	aa13      	add	r2, sp, #76	; 0x4c
    1790:	2103      	movs	r1, #3
    1792:	4866      	ldr	r0, [pc, #408]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_2_config = {
    1794:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
    1798:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
    GPIO_PinInit(BOARD_INITPINS_EX_2_GPIO, BOARD_INITPINS_EX_2_PIN, &EX_2_config);
    179c:	f7ff fbea 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_8_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC15 (pin 45)  */
    GPIO_PinInit(BOARD_INITPINS_EX_8_GPIO, BOARD_INITPINS_EX_8_PIN, &EX_8_config);
    17a0:	aa14      	add	r2, sp, #80	; 0x50
    17a2:	210f      	movs	r1, #15
    17a4:	4861      	ldr	r0, [pc, #388]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_8_config = {
    17a6:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
    17aa:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
    GPIO_PinInit(BOARD_INITPINS_EX_8_GPIO, BOARD_INITPINS_EX_8_PIN, &EX_8_config);
    17ae:	f7ff fbe1 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_7_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC16 (pin 44)  */
    GPIO_PinInit(BOARD_INITPINS_EX_7_GPIO, BOARD_INITPINS_EX_7_PIN, &EX_7_config);
    17b2:	aa15      	add	r2, sp, #84	; 0x54
    17b4:	2110      	movs	r1, #16
    17b6:	485d      	ldr	r0, [pc, #372]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_7_config = {
    17b8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
    17bc:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
    GPIO_PinInit(BOARD_INITPINS_EX_7_GPIO, BOARD_INITPINS_EX_7_PIN, &EX_7_config);
    17c0:	f7ff fbd8 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_6_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTC17 (pin 43)  */
    GPIO_PinInit(BOARD_INITPINS_EX_6_GPIO, BOARD_INITPINS_EX_6_PIN, &EX_6_config);
    17c4:	aa16      	add	r2, sp, #88	; 0x58
    17c6:	2111      	movs	r1, #17
    17c8:	4858      	ldr	r0, [pc, #352]	; (192c <BOARD_InitPins+0x34c>)
    gpio_pin_config_t EX_6_config = {
    17ca:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
    17ce:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    GPIO_PinInit(BOARD_INITPINS_EX_6_GPIO, BOARD_INITPINS_EX_6_PIN, &EX_6_config);
    17d2:	f7ff fbcf 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A0_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD0 (pin 4)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A0_GPIO, BOARD_INITPINS_MCU_A0_PIN, &MCU_A0_config);
    17d6:	4621      	mov	r1, r4
    17d8:	aa17      	add	r2, sp, #92	; 0x5c
    17da:	4855      	ldr	r0, [pc, #340]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A0_config = {
    17dc:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
    17e0:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    GPIO_PinInit(BOARD_INITPINS_MCU_A0_GPIO, BOARD_INITPINS_MCU_A0_PIN, &MCU_A0_config);
    17e4:	f7ff fbc6 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A1_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD1 (pin 3)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A1_GPIO, BOARD_INITPINS_MCU_A1_PIN, &MCU_A1_config);
    17e8:	4629      	mov	r1, r5
    17ea:	aa18      	add	r2, sp, #96	; 0x60
    17ec:	4850      	ldr	r0, [pc, #320]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A1_config = {
    17ee:	f88d 5060 	strb.w	r5, [sp, #96]	; 0x60
    17f2:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    GPIO_PinInit(BOARD_INITPINS_MCU_A1_GPIO, BOARD_INITPINS_MCU_A1_PIN, &MCU_A1_config);
    17f6:	f7ff fbbd 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A2_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD2 (pin 71)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A2_GPIO, BOARD_INITPINS_MCU_A2_PIN, &MCU_A2_config);
    17fa:	aa19      	add	r2, sp, #100	; 0x64
    17fc:	2102      	movs	r1, #2
    17fe:	484c      	ldr	r0, [pc, #304]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A2_config = {
    1800:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
    1804:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    GPIO_PinInit(BOARD_INITPINS_MCU_A2_GPIO, BOARD_INITPINS_MCU_A2_PIN, &MCU_A2_config);
    1808:	f7ff fbb4 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A3_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD3 (pin 70)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A3_GPIO, BOARD_INITPINS_MCU_A3_PIN, &MCU_A3_config);
    180c:	aa1a      	add	r2, sp, #104	; 0x68
    180e:	2103      	movs	r1, #3
    1810:	4847      	ldr	r0, [pc, #284]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A3_config = {
    1812:	f88d 5068 	strb.w	r5, [sp, #104]	; 0x68
    1816:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    GPIO_PinInit(BOARD_INITPINS_MCU_A3_GPIO, BOARD_INITPINS_MCU_A3_PIN, &MCU_A3_config);
    181a:	f7ff fbab 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A4_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD4 (pin 69)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A4_GPIO, BOARD_INITPINS_MCU_A4_PIN, &MCU_A4_config);
    181e:	aa1b      	add	r2, sp, #108	; 0x6c
    1820:	2104      	movs	r1, #4
    1822:	4843      	ldr	r0, [pc, #268]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A4_config = {
    1824:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
    1828:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    GPIO_PinInit(BOARD_INITPINS_MCU_A4_GPIO, BOARD_INITPINS_MCU_A4_PIN, &MCU_A4_config);
    182c:	f7ff fba2 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A5_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD5 (pin 33)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A5_GPIO, BOARD_INITPINS_MCU_A5_PIN, &MCU_A5_config);
    1830:	aa1c      	add	r2, sp, #112	; 0x70
    1832:	2105      	movs	r1, #5
    1834:	483e      	ldr	r0, [pc, #248]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A5_config = {
    1836:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70
    183a:	f88d 4071 	strb.w	r4, [sp, #113]	; 0x71
    GPIO_PinInit(BOARD_INITPINS_MCU_A5_GPIO, BOARD_INITPINS_MCU_A5_PIN, &MCU_A5_config);
    183e:	f7ff fb99 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A6_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD6 (pin 32)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A6_GPIO, BOARD_INITPINS_MCU_A6_PIN, &MCU_A6_config);
    1842:	aa1d      	add	r2, sp, #116	; 0x74
    1844:	2106      	movs	r1, #6
    1846:	483a      	ldr	r0, [pc, #232]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A6_config = {
    1848:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    184c:	f88d 4075 	strb.w	r4, [sp, #117]	; 0x75
    GPIO_PinInit(BOARD_INITPINS_MCU_A6_GPIO, BOARD_INITPINS_MCU_A6_PIN, &MCU_A6_config);
    1850:	f7ff fb90 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A7_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD7 (pin 31)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A7_GPIO, BOARD_INITPINS_MCU_A7_PIN, &MCU_A7_config);
    1854:	aa1e      	add	r2, sp, #120	; 0x78
    1856:	2107      	movs	r1, #7
    1858:	4835      	ldr	r0, [pc, #212]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A7_config = {
    185a:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
    185e:	f88d 4079 	strb.w	r4, [sp, #121]	; 0x79
    GPIO_PinInit(BOARD_INITPINS_MCU_A7_GPIO, BOARD_INITPINS_MCU_A7_PIN, &MCU_A7_config);
    1862:	f7ff fb87 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A8_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD8 (pin 42)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A8_GPIO, BOARD_INITPINS_MCU_A8_PIN, &MCU_A8_config);
    1866:	aa1f      	add	r2, sp, #124	; 0x7c
    1868:	2108      	movs	r1, #8
    186a:	4831      	ldr	r0, [pc, #196]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A8_config = {
    186c:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
    1870:	f88d 407d 	strb.w	r4, [sp, #125]	; 0x7d
    GPIO_PinInit(BOARD_INITPINS_MCU_A8_GPIO, BOARD_INITPINS_MCU_A8_PIN, &MCU_A8_config);
    1874:	f7ff fb7e 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A9_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD9 (pin 41)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A9_GPIO, BOARD_INITPINS_MCU_A9_PIN, &MCU_A9_config);
    1878:	aa20      	add	r2, sp, #128	; 0x80
    187a:	2109      	movs	r1, #9
    187c:	482c      	ldr	r0, [pc, #176]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A9_config = {
    187e:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
    1882:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
    GPIO_PinInit(BOARD_INITPINS_MCU_A9_GPIO, BOARD_INITPINS_MCU_A9_PIN, &MCU_A9_config);
    1886:	f7ff fb75 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A10_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD10 (pin 36)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A10_GPIO, BOARD_INITPINS_MCU_A10_PIN, &MCU_A10_config);
    188a:	aa21      	add	r2, sp, #132	; 0x84
    188c:	210a      	movs	r1, #10
    188e:	4828      	ldr	r0, [pc, #160]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A10_config = {
    1890:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
    1894:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
    GPIO_PinInit(BOARD_INITPINS_MCU_A10_GPIO, BOARD_INITPINS_MCU_A10_PIN, &MCU_A10_config);
    1898:	f7ff fb6c 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A11_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD11 (pin 35)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A11_GPIO, BOARD_INITPINS_MCU_A11_PIN, &MCU_A11_config);
    189c:	aa22      	add	r2, sp, #136	; 0x88
    189e:	210b      	movs	r1, #11
    18a0:	4823      	ldr	r0, [pc, #140]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A11_config = {
    18a2:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
    18a6:	f88d 4089 	strb.w	r4, [sp, #137]	; 0x89
    GPIO_PinInit(BOARD_INITPINS_MCU_A11_GPIO, BOARD_INITPINS_MCU_A11_PIN, &MCU_A11_config);
    18aa:	f7ff fb63 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A12_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD12 (pin 34)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A12_GPIO, BOARD_INITPINS_MCU_A12_PIN, &MCU_A12_config);
    18ae:	aa23      	add	r2, sp, #140	; 0x8c
    18b0:	210c      	movs	r1, #12
    18b2:	481f      	ldr	r0, [pc, #124]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A12_config = {
    18b4:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
    18b8:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
    GPIO_PinInit(BOARD_INITPINS_MCU_A12_GPIO, BOARD_INITPINS_MCU_A12_PIN, &MCU_A12_config);
    18bc:	f7ff fb5a 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A13_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD13 (pin 25)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A13_GPIO, BOARD_INITPINS_MCU_A13_PIN, &MCU_A13_config);
    18c0:	aa24      	add	r2, sp, #144	; 0x90
    18c2:	210d      	movs	r1, #13
    18c4:	481a      	ldr	r0, [pc, #104]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A13_config = {
    18c6:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
    18ca:	f88d 4091 	strb.w	r4, [sp, #145]	; 0x91
    GPIO_PinInit(BOARD_INITPINS_MCU_A13_GPIO, BOARD_INITPINS_MCU_A13_PIN, &MCU_A13_config);
    18ce:	f7ff fb51 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A14_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD14 (pin 24)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A14_GPIO, BOARD_INITPINS_MCU_A14_PIN, &MCU_A14_config);
    18d2:	aa25      	add	r2, sp, #148	; 0x94
    18d4:	210e      	movs	r1, #14
    18d6:	4816      	ldr	r0, [pc, #88]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A14_config = {
    18d8:	f88d 5094 	strb.w	r5, [sp, #148]	; 0x94
    18dc:	f88d 4095 	strb.w	r4, [sp, #149]	; 0x95
    GPIO_PinInit(BOARD_INITPINS_MCU_A14_GPIO, BOARD_INITPINS_MCU_A14_PIN, &MCU_A14_config);
    18e0:	f7ff fb48 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_A15_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD15 (pin 22)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_A15_GPIO, BOARD_INITPINS_MCU_A15_PIN, &MCU_A15_config);
    18e4:	aa26      	add	r2, sp, #152	; 0x98
    18e6:	210f      	movs	r1, #15
    18e8:	4811      	ldr	r0, [pc, #68]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_A15_config = {
    18ea:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
    18ee:	f88d 4099 	strb.w	r4, [sp, #153]	; 0x99
    GPIO_PinInit(BOARD_INITPINS_MCU_A15_GPIO, BOARD_INITPINS_MCU_A15_PIN, &MCU_A15_config);
    18f2:	f7ff fb3f 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_VMA_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD16 (pin 21)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_VMA_GPIO, BOARD_INITPINS_MCU_VMA_PIN, &MCU_VMA_config);
    18f6:	aa27      	add	r2, sp, #156	; 0x9c
    18f8:	2110      	movs	r1, #16
    18fa:	480d      	ldr	r0, [pc, #52]	; (1930 <BOARD_InitPins+0x350>)
    gpio_pin_config_t MCU_VMA_config = {
    18fc:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
    1900:	f88d 409d 	strb.w	r4, [sp, #157]	; 0x9d
    GPIO_PinInit(BOARD_INITPINS_MCU_VMA_GPIO, BOARD_INITPINS_MCU_VMA_PIN, &MCU_VMA_config);
    1904:	f7ff fb36 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t MCU_RW_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTD17 (pin 20)  */
    GPIO_PinInit(BOARD_INITPINS_MCU_RW_GPIO, BOARD_INITPINS_MCU_RW_PIN, &MCU_RW_config);
    1908:	aa28      	add	r2, sp, #160	; 0xa0
    190a:	2111      	movs	r1, #17
    190c:	e012      	b.n	1934 <BOARD_InitPins+0x354>
    190e:	bf00      	nop
    1910:	40065124 	.word	0x40065124
    1914:	40065128 	.word	0x40065128
    1918:	4006512c 	.word	0x4006512c
    191c:	40065134 	.word	0x40065134
    1920:	400ff000 	.word	0x400ff000
    1924:	400ff040 	.word	0x400ff040
    1928:	0000428c 	.word	0x0000428c
    192c:	400ff080 	.word	0x400ff080
    1930:	400ff0c0 	.word	0x400ff0c0
    1934:	48b8      	ldr	r0, [pc, #736]	; (1c18 <BOARD_InitPins+0x638>)
    gpio_pin_config_t MCU_RW_config = {
    1936:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
    193a:	f88d 40a1 	strb.w	r4, [sp, #161]	; 0xa1
    GPIO_PinInit(BOARD_INITPINS_MCU_RW_GPIO, BOARD_INITPINS_MCU_RW_PIN, &MCU_RW_config);
    193e:	f7ff fb19 	bl	f74 <GPIO_PinInit>
    gpio_pin_config_t EX_1_config = {
        .pinDirection = kGPIO_DigitalOutput,
        .outputLogic = 0U
    };
    /* Initialize GPIO functionality on pin PTE8 (pin 26)  */
    GPIO_PinInit(BOARD_INITPINS_EX_1_GPIO, BOARD_INITPINS_EX_1_PIN, &EX_1_config);
    1942:	aa29      	add	r2, sp, #164	; 0xa4
    1944:	2108      	movs	r1, #8
    1946:	48b5      	ldr	r0, [pc, #724]	; (1c1c <BOARD_InitPins+0x63c>)
    gpio_pin_config_t EX_1_config = {
    1948:	f88d 50a4 	strb.w	r5, [sp, #164]	; 0xa4
    194c:	f88d 40a5 	strb.w	r4, [sp, #165]	; 0xa5
    GPIO_PinInit(BOARD_INITPINS_EX_1_GPIO, BOARD_INITPINS_EX_1_PIN, &EX_1_config);
    1950:	f7ff fb10 	bl	f74 <GPIO_PinInit>
 *        This function is recommended to use to reset the pin mux
 *
 */
static inline void PORT_SetPinMux(PORT_Type *base, uint32_t pin, port_mux_t mux)
{
    base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_MUX_MASK) | PORT_PCR_MUX(mux);
    1954:	4ab2      	ldr	r2, [pc, #712]	; (1c20 <BOARD_InitPins+0x640>)
    1956:	49b3      	ldr	r1, [pc, #716]	; (1c24 <BOARD_InitPins+0x644>)
    1958:	6815      	ldr	r5, [r2, #0]
    195a:	48b3      	ldr	r0, [pc, #716]	; (1c28 <BOARD_InitPins+0x648>)
    195c:	4bb3      	ldr	r3, [pc, #716]	; (1c2c <BOARD_InitPins+0x64c>)
    195e:	4cb4      	ldr	r4, [pc, #720]	; (1c30 <BOARD_InitPins+0x650>)
    1960:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    1964:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    1968:	6015      	str	r5, [r2, #0]
 *        - #kPORT_ActiveHighTriggerOutputEnable : Enable active high-trigger output (if the trigger states exit).
 *        - #kPORT_ActiveLowTriggerOutputEnable  : Enable active low-trigger output (if the trigger states exit).
 */
static inline void PORT_SetPinInterruptConfig(PORT_Type *base, uint32_t pin, port_interrupt_t config)
{
    base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_IRQC_MASK) | PORT_PCR_IRQC(config);
    196a:	6815      	ldr	r5, [r2, #0]
    196c:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
    1970:	f445 2520 	orr.w	r5, r5, #655360	; 0xa0000
    1974:	6015      	str	r5, [r2, #0]
    base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_MUX_MASK) | PORT_PCR_MUX(mux);
    1976:	6855      	ldr	r5, [r2, #4]
    1978:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    197c:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
    1980:	6055      	str	r5, [r2, #4]
    1982:	6a95      	ldr	r5, [r2, #40]	; 0x28
    1984:	f445 65e0 	orr.w	r5, r5, #1792	; 0x700
    1988:	6295      	str	r5, [r2, #40]	; 0x28
    198a:	6b15      	ldr	r5, [r2, #48]	; 0x30
    198c:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    1990:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    1994:	6315      	str	r5, [r2, #48]	; 0x30
    1996:	6b55      	ldr	r5, [r2, #52]	; 0x34
    1998:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    199c:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    19a0:	6355      	str	r5, [r2, #52]	; 0x34
    19a2:	6895      	ldr	r5, [r2, #8]
    19a4:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    19a8:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
    19ac:	6095      	str	r5, [r2, #8]
    19ae:	68d5      	ldr	r5, [r2, #12]
    19b0:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    19b4:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
    19b8:	60d5      	str	r5, [r2, #12]
    19ba:	6915      	ldr	r5, [r2, #16]
    19bc:	f445 65e0 	orr.w	r5, r5, #1792	; 0x700
    19c0:	6115      	str	r5, [r2, #16]
    19c2:	6955      	ldr	r5, [r2, #20]
    19c4:	f445 65e0 	orr.w	r5, r5, #1792	; 0x700
    19c8:	6155      	str	r5, [r2, #20]
    19ca:	6995      	ldr	r5, [r2, #24]
    19cc:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    19d0:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    19d4:	6195      	str	r5, [r2, #24]
    base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_IRQC_MASK) | PORT_PCR_IRQC(config);
    19d6:	6995      	ldr	r5, [r2, #24]
    19d8:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
    19dc:	f445 2520 	orr.w	r5, r5, #655360	; 0xa0000
    19e0:	6195      	str	r5, [r2, #24]
    base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_MUX_MASK) | PORT_PCR_MUX(mux);
    19e2:	69d5      	ldr	r5, [r2, #28]
    19e4:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    19e8:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
    19ec:	61d5      	str	r5, [r2, #28]
    19ee:	6a15      	ldr	r5, [r2, #32]
    19f0:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    19f4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    19f8:	6215      	str	r5, [r2, #32]
    19fa:	6a55      	ldr	r5, [r2, #36]	; 0x24
    19fc:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
    1a00:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    1a04:	6255      	str	r5, [r2, #36]	; 0x24
    1a06:	680a      	ldr	r2, [r1, #0]
    1a08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a10:	600a      	str	r2, [r1, #0]
    1a12:	684a      	ldr	r2, [r1, #4]
    1a14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a1c:	604a      	str	r2, [r1, #4]
    1a1e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    1a20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a28:	638a      	str	r2, [r1, #56]	; 0x38
    1a2a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    1a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a34:	63ca      	str	r2, [r1, #60]	; 0x3c
    1a36:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    1a38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a40:	640a      	str	r2, [r1, #64]	; 0x40
    1a42:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a4c:	644a      	str	r2, [r1, #68]	; 0x44
    1a4e:	688a      	ldr	r2, [r1, #8]
    1a50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a58:	608a      	str	r2, [r1, #8]
    1a5a:	68ca      	ldr	r2, [r1, #12]
    1a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a64:	60ca      	str	r2, [r1, #12]
    1a66:	690a      	ldr	r2, [r1, #16]
    1a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a70:	610a      	str	r2, [r1, #16]
    1a72:	694a      	ldr	r2, [r1, #20]
    1a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a7c:	614a      	str	r2, [r1, #20]
    1a7e:	698a      	ldr	r2, [r1, #24]
    1a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a88:	618a      	str	r2, [r1, #24]
    1a8a:	69ca      	ldr	r2, [r1, #28]
    1a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1a94:	61ca      	str	r2, [r1, #28]
    1a96:	6802      	ldr	r2, [r0, #0]
    1a98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1aa0:	6002      	str	r2, [r0, #0]
    1aa2:	6842      	ldr	r2, [r0, #4]
    1aa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1aac:	6042      	str	r2, [r0, #4]
    1aae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    1ab0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ab8:	63c2      	str	r2, [r0, #60]	; 0x3c
    1aba:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1abc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ac4:	6402      	str	r2, [r0, #64]	; 0x40
    1ac6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    1ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ad0:	6442      	str	r2, [r0, #68]	; 0x44
    1ad2:	6882      	ldr	r2, [r0, #8]
    1ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1adc:	6082      	str	r2, [r0, #8]
    1ade:	68c2      	ldr	r2, [r0, #12]
    1ae0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ae8:	60c2      	str	r2, [r0, #12]
    1aea:	6902      	ldr	r2, [r0, #16]
    1aec:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    1af0:	6102      	str	r2, [r0, #16]
    1af2:	6982      	ldr	r2, [r0, #24]
    1af4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    1afc:	6182      	str	r2, [r0, #24]
    1afe:	69c2      	ldr	r2, [r0, #28]
    1b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    1b08:	61c2      	str	r2, [r0, #28]
    1b0a:	681a      	ldr	r2, [r3, #0]
    1b0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b14:	601a      	str	r2, [r3, #0]
    1b16:	685a      	ldr	r2, [r3, #4]
    1b18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b20:	605a      	str	r2, [r3, #4]
    1b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b2c:	629a      	str	r2, [r3, #40]	; 0x28
    1b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b38:	62da      	str	r2, [r3, #44]	; 0x2c
    1b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b44:	631a      	str	r2, [r3, #48]	; 0x30
    1b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b50:	635a      	str	r2, [r3, #52]	; 0x34
    1b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b5c:	639a      	str	r2, [r3, #56]	; 0x38
    1b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1b60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b68:	63da      	str	r2, [r3, #60]	; 0x3c
    1b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1b6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b74:	641a      	str	r2, [r3, #64]	; 0x40
    1b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1b78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b80:	645a      	str	r2, [r3, #68]	; 0x44
    1b82:	689a      	ldr	r2, [r3, #8]
    1b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b8c:	609a      	str	r2, [r3, #8]
    1b8e:	68da      	ldr	r2, [r3, #12]
    1b90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1b98:	60da      	str	r2, [r3, #12]
    1b9a:	691a      	ldr	r2, [r3, #16]
    1b9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1ba4:	611a      	str	r2, [r3, #16]
    1ba6:	695a      	ldr	r2, [r3, #20]
    1ba8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1bb0:	615a      	str	r2, [r3, #20]
    1bb2:	699a      	ldr	r2, [r3, #24]
    1bb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1bbc:	619a      	str	r2, [r3, #24]
    1bbe:	69da      	ldr	r2, [r3, #28]
    1bc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1bc8:	61da      	str	r2, [r3, #28]
    1bca:	6a1a      	ldr	r2, [r3, #32]
    1bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1bd4:	621a      	str	r2, [r3, #32]
    1bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1bd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1be0:	625a      	str	r2, [r3, #36]	; 0x24
    1be2:	6923      	ldr	r3, [r4, #16]
    1be4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1be8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    1bec:	6123      	str	r3, [r4, #16]
    1bee:	6963      	ldr	r3, [r4, #20]
    1bf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1bf4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    1bf8:	6163      	str	r3, [r4, #20]
    1bfa:	6a23      	ldr	r3, [r4, #32]
    1bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1c04:	6223      	str	r3, [r4, #32]
    1c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1c0c:	6263      	str	r3, [r4, #36]	; 0x24
    /* PORTE8 (pin 26) is configured as PTE8 */
    PORT_SetPinMux(BOARD_INITPINS_EX_1_PORT, BOARD_INITPINS_EX_1_PIN, kPORT_MuxAsGpio);

    /* PORTE9 (pin 23) is configured as DAC0_OUT */
    PORT_SetPinMux(BOARD_INITPINS_DAC_OUT_PORT, BOARD_INITPINS_DAC_OUT_PIN, kPORT_PinDisabledOrAnalog);
}
    1c0e:	b02a      	add	sp, #168	; 0xa8
    1c10:	bd70      	pop	{r4, r5, r6, pc}
    1c12:	f7ff fcd7 	bl	15c4 <CLOCK_EnableClock.part.0>
    1c16:	bf00      	nop
    1c18:	400ff0c0 	.word	0x400ff0c0
    1c1c:	400ff100 	.word	0x400ff100
    1c20:	40049000 	.word	0x40049000
    1c24:	4004a000 	.word	0x4004a000
    1c28:	4004b000 	.word	0x4004b000
    1c2c:	4004c000 	.word	0x4004c000
    1c30:	4004d000 	.word	0x4004d000

00001c34 <BOARD_InitBootPins>:
    BOARD_InitPins();
    1c34:	f7ff bcd4 	b.w	15e0 <BOARD_InitPins>

00001c38 <SystemInitHook>:
   -- SystemInitHook()
   ---------------------------------------------------------------------------- */

__attribute__ ((weak)) void SystemInitHook (void) {
  /* Void implementation of the weak function. */
}
    1c38:	4770      	bx	lr
    1c3a:	bf00      	nop

00001c3c <SystemInit>:
  WDOG->CNT = WDOG_UPDATE_KEY;
    1c3c:	4910      	ldr	r1, [pc, #64]	; (1c80 <SystemInit+0x44>)
void SystemInit (void) {
    1c3e:	b508      	push	{r3, lr}
  WDOG->CNT = WDOG_UPDATE_KEY;
    1c40:	4b10      	ldr	r3, [pc, #64]	; (1c84 <SystemInit+0x48>)
    1c42:	604b      	str	r3, [r1, #4]
  WDOG->TOVAL = 0xFFFF;
    1c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c48:	608b      	str	r3, [r1, #8]
  WDOG->CS = (uint32_t) ((WDOG->CS) & ~WDOG_CS_EN_MASK) | WDOG_CS_UPDATE_MASK;
    1c4a:	680a      	ldr	r2, [r1, #0]
  LMEM->PCCCR |= LMEM_PCCCR_INVW1_MASK | LMEM_PCCCR_INVW0_MASK;
    1c4c:	4b0e      	ldr	r3, [pc, #56]	; (1c88 <SystemInit+0x4c>)
  WDOG->CS = (uint32_t) ((WDOG->CS) & ~WDOG_CS_EN_MASK) | WDOG_CS_UPDATE_MASK;
    1c4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
    1c52:	f042 0220 	orr.w	r2, r2, #32
    1c56:	600a      	str	r2, [r1, #0]
  LMEM->PCCCR |= LMEM_PCCCR_INVW1_MASK | LMEM_PCCCR_INVW0_MASK;
    1c58:	681a      	ldr	r2, [r3, #0]
    1c5a:	f042 62a0 	orr.w	r2, r2, #83886080	; 0x5000000
    1c5e:	601a      	str	r2, [r3, #0]
  LMEM->PCCCR |= LMEM_PCCCR_GO_MASK;
    1c60:	681a      	ldr	r2, [r3, #0]
    1c62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1c66:	601a      	str	r2, [r3, #0]
  while (LMEM->PCCCR & LMEM_PCCCR_GO_MASK) {
    1c68:	681a      	ldr	r2, [r3, #0]
    1c6a:	2a00      	cmp	r2, #0
    1c6c:	dbfc      	blt.n	1c68 <SystemInit+0x2c>
  LMEM->PCCCR |= (LMEM_PCCCR_ENWRBUF_MASK | LMEM_PCCCR_ENCACHE_MASK);
    1c6e:	681a      	ldr	r2, [r3, #0]
    1c70:	f042 0203 	orr.w	r2, r2, #3
    1c74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    1c76:	f3bf 8f6f 	isb	sy
  SystemInitHook();
    1c7a:	f7ff ffdd 	bl	1c38 <SystemInitHook>
}
    1c7e:	bd08      	pop	{r3, pc}
    1c80:	40052000 	.word	0x40052000
    1c84:	d928c520 	.word	0xd928c520
    1c88:	e0082000 	.word	0xe0082000

00001c8c <selfrel_offset31>:
    1c8c:	6803      	ldr	r3, [r0, #0]
    1c8e:	005a      	lsls	r2, r3, #1
    1c90:	bf4c      	ite	mi
    1c92:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    1c96:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    1c9a:	4418      	add	r0, r3
    1c9c:	4770      	bx	lr
    1c9e:	bf00      	nop

00001ca0 <search_EIT_table>:
    1ca0:	b361      	cbz	r1, 1cfc <search_EIT_table+0x5c>
    1ca2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ca6:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    1caa:	4690      	mov	r8, r2
    1cac:	4606      	mov	r6, r0
    1cae:	46d1      	mov	r9, sl
    1cb0:	2700      	movs	r7, #0
    1cb2:	eb07 0409 	add.w	r4, r7, r9
    1cb6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    1cba:	1064      	asrs	r4, r4, #1
    1cbc:	00e5      	lsls	r5, r4, #3
    1cbe:	1971      	adds	r1, r6, r5
    1cc0:	4608      	mov	r0, r1
    1cc2:	f7ff ffe3 	bl	1c8c <selfrel_offset31>
    1cc6:	45a2      	cmp	sl, r4
    1cc8:	4683      	mov	fp, r0
    1cca:	f105 0008 	add.w	r0, r5, #8
    1cce:	4430      	add	r0, r6
    1cd0:	d009      	beq.n	1ce6 <search_EIT_table+0x46>
    1cd2:	f7ff ffdb 	bl	1c8c <selfrel_offset31>
    1cd6:	45c3      	cmp	fp, r8
    1cd8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    1cdc:	d805      	bhi.n	1cea <search_EIT_table+0x4a>
    1cde:	4540      	cmp	r0, r8
    1ce0:	d209      	bcs.n	1cf6 <search_EIT_table+0x56>
    1ce2:	1c67      	adds	r7, r4, #1
    1ce4:	e7e5      	b.n	1cb2 <search_EIT_table+0x12>
    1ce6:	45c3      	cmp	fp, r8
    1ce8:	d905      	bls.n	1cf6 <search_EIT_table+0x56>
    1cea:	42a7      	cmp	r7, r4
    1cec:	d002      	beq.n	1cf4 <search_EIT_table+0x54>
    1cee:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    1cf2:	e7de      	b.n	1cb2 <search_EIT_table+0x12>
    1cf4:	2100      	movs	r1, #0
    1cf6:	4608      	mov	r0, r1
    1cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cfc:	4608      	mov	r0, r1
    1cfe:	4770      	bx	lr

00001d00 <__gnu_unwind_get_pr_addr>:
    1d00:	2801      	cmp	r0, #1
    1d02:	d007      	beq.n	1d14 <__gnu_unwind_get_pr_addr+0x14>
    1d04:	2802      	cmp	r0, #2
    1d06:	d007      	beq.n	1d18 <__gnu_unwind_get_pr_addr+0x18>
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <__gnu_unwind_get_pr_addr+0x1c>)
    1d0a:	2800      	cmp	r0, #0
    1d0c:	bf0c      	ite	eq
    1d0e:	4618      	moveq	r0, r3
    1d10:	2000      	movne	r0, #0
    1d12:	4770      	bx	lr
    1d14:	4802      	ldr	r0, [pc, #8]	; (1d20 <__gnu_unwind_get_pr_addr+0x20>)
    1d16:	4770      	bx	lr
    1d18:	4802      	ldr	r0, [pc, #8]	; (1d24 <__gnu_unwind_get_pr_addr+0x24>)
    1d1a:	4770      	bx	lr
    1d1c:	000023ed 	.word	0x000023ed
    1d20:	000023f1 	.word	0x000023f1
    1d24:	000023f5 	.word	0x000023f5

00001d28 <get_eit_entry>:
    1d28:	b530      	push	{r4, r5, lr}
    1d2a:	4b25      	ldr	r3, [pc, #148]	; (1dc0 <get_eit_entry+0x98>)
    1d2c:	b083      	sub	sp, #12
    1d2e:	4604      	mov	r4, r0
    1d30:	1e8d      	subs	r5, r1, #2
    1d32:	b34b      	cbz	r3, 1d88 <get_eit_entry+0x60>
    1d34:	a901      	add	r1, sp, #4
    1d36:	4628      	mov	r0, r5
    1d38:	f3af 8000 	nop.w
    1d3c:	b1f0      	cbz	r0, 1d7c <get_eit_entry+0x54>
    1d3e:	9901      	ldr	r1, [sp, #4]
    1d40:	462a      	mov	r2, r5
    1d42:	f7ff ffad 	bl	1ca0 <search_EIT_table>
    1d46:	4601      	mov	r1, r0
    1d48:	b1c0      	cbz	r0, 1d7c <get_eit_entry+0x54>
    1d4a:	f7ff ff9f 	bl	1c8c <selfrel_offset31>
    1d4e:	684b      	ldr	r3, [r1, #4]
    1d50:	64a0      	str	r0, [r4, #72]	; 0x48
    1d52:	2b01      	cmp	r3, #1
    1d54:	d02e      	beq.n	1db4 <get_eit_entry+0x8c>
    1d56:	2b00      	cmp	r3, #0
    1d58:	f101 0004 	add.w	r0, r1, #4
    1d5c:	db26      	blt.n	1dac <get_eit_entry+0x84>
    1d5e:	f7ff ff95 	bl	1c8c <selfrel_offset31>
    1d62:	2300      	movs	r3, #0
    1d64:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1d68:	6803      	ldr	r3, [r0, #0]
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	db12      	blt.n	1d94 <get_eit_entry+0x6c>
    1d6e:	f7ff ff8d 	bl	1c8c <selfrel_offset31>
    1d72:	2300      	movs	r3, #0
    1d74:	6120      	str	r0, [r4, #16]
    1d76:	4618      	mov	r0, r3
    1d78:	b003      	add	sp, #12
    1d7a:	bd30      	pop	{r4, r5, pc}
    1d7c:	2300      	movs	r3, #0
    1d7e:	6123      	str	r3, [r4, #16]
    1d80:	2309      	movs	r3, #9
    1d82:	4618      	mov	r0, r3
    1d84:	b003      	add	sp, #12
    1d86:	bd30      	pop	{r4, r5, pc}
    1d88:	490e      	ldr	r1, [pc, #56]	; (1dc4 <get_eit_entry+0x9c>)
    1d8a:	480f      	ldr	r0, [pc, #60]	; (1dc8 <get_eit_entry+0xa0>)
    1d8c:	1a09      	subs	r1, r1, r0
    1d8e:	10c9      	asrs	r1, r1, #3
    1d90:	9101      	str	r1, [sp, #4]
    1d92:	e7d5      	b.n	1d40 <get_eit_entry+0x18>
    1d94:	f3c3 6003 	ubfx	r0, r3, #24, #4
    1d98:	f7ff ffb2 	bl	1d00 <__gnu_unwind_get_pr_addr>
    1d9c:	2800      	cmp	r0, #0
    1d9e:	bf14      	ite	ne
    1da0:	2300      	movne	r3, #0
    1da2:	2309      	moveq	r3, #9
    1da4:	6120      	str	r0, [r4, #16]
    1da6:	4618      	mov	r0, r3
    1da8:	b003      	add	sp, #12
    1daa:	bd30      	pop	{r4, r5, pc}
    1dac:	2301      	movs	r3, #1
    1dae:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1db2:	e7d9      	b.n	1d68 <get_eit_entry+0x40>
    1db4:	2300      	movs	r3, #0
    1db6:	6123      	str	r3, [r4, #16]
    1db8:	2305      	movs	r3, #5
    1dba:	4618      	mov	r0, r3
    1dbc:	b003      	add	sp, #12
    1dbe:	bd30      	pop	{r4, r5, pc}
    1dc0:	00000000 	.word	0x00000000
    1dc4:	00004b98 	.word	0x00004b98
    1dc8:	000047e8 	.word	0x000047e8

00001dcc <restore_non_core_regs>:
    1dcc:	6803      	ldr	r3, [r0, #0]
    1dce:	07da      	lsls	r2, r3, #31
    1dd0:	b510      	push	{r4, lr}
    1dd2:	4604      	mov	r4, r0
    1dd4:	d406      	bmi.n	1de4 <restore_non_core_regs+0x18>
    1dd6:	079b      	lsls	r3, r3, #30
    1dd8:	f100 0048 	add.w	r0, r0, #72	; 0x48
    1ddc:	d509      	bpl.n	1df2 <restore_non_core_regs+0x26>
    1dde:	f000 fc5f 	bl	26a0 <__gnu_Unwind_Restore_VFP_D>
    1de2:	6823      	ldr	r3, [r4, #0]
    1de4:	0759      	lsls	r1, r3, #29
    1de6:	d509      	bpl.n	1dfc <restore_non_core_regs+0x30>
    1de8:	071a      	lsls	r2, r3, #28
    1dea:	d50e      	bpl.n	1e0a <restore_non_core_regs+0x3e>
    1dec:	06db      	lsls	r3, r3, #27
    1dee:	d513      	bpl.n	1e18 <restore_non_core_regs+0x4c>
    1df0:	bd10      	pop	{r4, pc}
    1df2:	f000 fc4d 	bl	2690 <__gnu_Unwind_Restore_VFP>
    1df6:	6823      	ldr	r3, [r4, #0]
    1df8:	0759      	lsls	r1, r3, #29
    1dfa:	d4f5      	bmi.n	1de8 <restore_non_core_regs+0x1c>
    1dfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    1e00:	f000 fc56 	bl	26b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    1e04:	6823      	ldr	r3, [r4, #0]
    1e06:	071a      	lsls	r2, r3, #28
    1e08:	d4f0      	bmi.n	1dec <restore_non_core_regs+0x20>
    1e0a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    1e0e:	f000 fc57 	bl	26c0 <__gnu_Unwind_Restore_WMMXD>
    1e12:	6823      	ldr	r3, [r4, #0]
    1e14:	06db      	lsls	r3, r3, #27
    1e16:	d4eb      	bmi.n	1df0 <restore_non_core_regs+0x24>
    1e18:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    1e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e20:	f000 bc92 	b.w	2748 <__gnu_Unwind_Restore_WMMXC>

00001e24 <_Unwind_decode_typeinfo_ptr.isra.0>:
    1e24:	6803      	ldr	r3, [r0, #0]
    1e26:	b103      	cbz	r3, 1e2a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    1e28:	4403      	add	r3, r0
    1e2a:	4618      	mov	r0, r3
    1e2c:	4770      	bx	lr
    1e2e:	bf00      	nop

00001e30 <__gnu_unwind_24bit.isra.1>:
    1e30:	2009      	movs	r0, #9
    1e32:	4770      	bx	lr

00001e34 <_Unwind_DebugHook>:
    1e34:	4770      	bx	lr
    1e36:	bf00      	nop

00001e38 <unwind_phase2>:
    1e38:	b570      	push	{r4, r5, r6, lr}
    1e3a:	4604      	mov	r4, r0
    1e3c:	460d      	mov	r5, r1
    1e3e:	e008      	b.n	1e52 <unwind_phase2+0x1a>
    1e40:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1e42:	6163      	str	r3, [r4, #20]
    1e44:	462a      	mov	r2, r5
    1e46:	6923      	ldr	r3, [r4, #16]
    1e48:	4621      	mov	r1, r4
    1e4a:	2001      	movs	r0, #1
    1e4c:	4798      	blx	r3
    1e4e:	2808      	cmp	r0, #8
    1e50:	d108      	bne.n	1e64 <unwind_phase2+0x2c>
    1e52:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1e54:	4620      	mov	r0, r4
    1e56:	f7ff ff67 	bl	1d28 <get_eit_entry>
    1e5a:	4606      	mov	r6, r0
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d0ef      	beq.n	1e40 <unwind_phase2+0x8>
    1e60:	f001 fe88 	bl	3b74 <abort>
    1e64:	2807      	cmp	r0, #7
    1e66:	d1fb      	bne.n	1e60 <unwind_phase2+0x28>
    1e68:	4630      	mov	r0, r6
    1e6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1e6c:	f7ff ffe2 	bl	1e34 <_Unwind_DebugHook>
    1e70:	1d28      	adds	r0, r5, #4
    1e72:	f000 fc01 	bl	2678 <__restore_core_regs>
    1e76:	bf00      	nop

00001e78 <unwind_phase2_forced>:
    1e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e7c:	1d0c      	adds	r4, r1, #4
    1e7e:	4605      	mov	r5, r0
    1e80:	4617      	mov	r7, r2
    1e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1e84:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    1e88:	ae03      	add	r6, sp, #12
    1e8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1e8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1e92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1e98:	ac02      	add	r4, sp, #8
    1e9a:	f8d5 800c 	ldr.w	r8, [r5, #12]
    1e9e:	f8d5 9018 	ldr.w	r9, [r5, #24]
    1ea2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    1ea6:	2300      	movs	r3, #0
    1ea8:	6023      	str	r3, [r4, #0]
    1eaa:	e021      	b.n	1ef0 <unwind_phase2_forced+0x78>
    1eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1eae:	616b      	str	r3, [r5, #20]
    1eb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1eb4:	4621      	mov	r1, r4
    1eb6:	a87a      	add	r0, sp, #488	; 0x1e8
    1eb8:	f001 fe63 	bl	3b82 <memcpy>
    1ebc:	692b      	ldr	r3, [r5, #16]
    1ebe:	aa7a      	add	r2, sp, #488	; 0x1e8
    1ec0:	4629      	mov	r1, r5
    1ec2:	4630      	mov	r0, r6
    1ec4:	4798      	blx	r3
    1ec6:	9b88      	ldr	r3, [sp, #544]	; 0x220
    1ec8:	e9cd 4900 	strd	r4, r9, [sp]
    1ecc:	4682      	mov	sl, r0
    1ece:	6463      	str	r3, [r4, #68]	; 0x44
    1ed0:	4631      	mov	r1, r6
    1ed2:	462b      	mov	r3, r5
    1ed4:	462a      	mov	r2, r5
    1ed6:	2001      	movs	r0, #1
    1ed8:	47c0      	blx	r8
    1eda:	4607      	mov	r7, r0
    1edc:	b9f8      	cbnz	r0, 1f1e <unwind_phase2_forced+0xa6>
    1ede:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1ee2:	a97a      	add	r1, sp, #488	; 0x1e8
    1ee4:	4620      	mov	r0, r4
    1ee6:	f001 fe4c 	bl	3b82 <memcpy>
    1eea:	f1ba 0f08 	cmp.w	sl, #8
    1eee:	d11c      	bne.n	1f2a <unwind_phase2_forced+0xb2>
    1ef0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1ef2:	4628      	mov	r0, r5
    1ef4:	f7ff ff18 	bl	1d28 <get_eit_entry>
    1ef8:	2f00      	cmp	r7, #0
    1efa:	bf08      	it	eq
    1efc:	2609      	moveq	r6, #9
    1efe:	4607      	mov	r7, r0
    1f00:	bf18      	it	ne
    1f02:	260a      	movne	r6, #10
    1f04:	2800      	cmp	r0, #0
    1f06:	d0d1      	beq.n	1eac <unwind_phase2_forced+0x34>
    1f08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1f0a:	f046 0110 	orr.w	r1, r6, #16
    1f0e:	e9cd 4900 	strd	r4, r9, [sp]
    1f12:	462a      	mov	r2, r5
    1f14:	6463      	str	r3, [r4, #68]	; 0x44
    1f16:	2001      	movs	r0, #1
    1f18:	462b      	mov	r3, r5
    1f1a:	47c0      	blx	r8
    1f1c:	b100      	cbz	r0, 1f20 <unwind_phase2_forced+0xa8>
    1f1e:	2709      	movs	r7, #9
    1f20:	4638      	mov	r0, r7
    1f22:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    1f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f2a:	f1ba 0f07 	cmp.w	sl, #7
    1f2e:	d1f6      	bne.n	1f1e <unwind_phase2_forced+0xa6>
    1f30:	4638      	mov	r0, r7
    1f32:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1f34:	f7ff ff7e 	bl	1e34 <_Unwind_DebugHook>
    1f38:	a803      	add	r0, sp, #12
    1f3a:	f000 fb9d 	bl	2678 <__restore_core_regs>
    1f3e:	bf00      	nop

00001f40 <_Unwind_GetCFA>:
    1f40:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1f42:	4770      	bx	lr

00001f44 <__gnu_Unwind_RaiseException>:
    1f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f46:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1f48:	640b      	str	r3, [r1, #64]	; 0x40
    1f4a:	1d0d      	adds	r5, r1, #4
    1f4c:	460f      	mov	r7, r1
    1f4e:	4606      	mov	r6, r0
    1f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f52:	b0f9      	sub	sp, #484	; 0x1e4
    1f54:	ac01      	add	r4, sp, #4
    1f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1f64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1f6c:	9500      	str	r5, [sp, #0]
    1f6e:	e006      	b.n	1f7e <__gnu_Unwind_RaiseException+0x3a>
    1f70:	6933      	ldr	r3, [r6, #16]
    1f72:	466a      	mov	r2, sp
    1f74:	4631      	mov	r1, r6
    1f76:	4798      	blx	r3
    1f78:	2808      	cmp	r0, #8
    1f7a:	4604      	mov	r4, r0
    1f7c:	d108      	bne.n	1f90 <__gnu_Unwind_RaiseException+0x4c>
    1f7e:	9910      	ldr	r1, [sp, #64]	; 0x40
    1f80:	4630      	mov	r0, r6
    1f82:	f7ff fed1 	bl	1d28 <get_eit_entry>
    1f86:	2800      	cmp	r0, #0
    1f88:	d0f2      	beq.n	1f70 <__gnu_Unwind_RaiseException+0x2c>
    1f8a:	2009      	movs	r0, #9
    1f8c:	b079      	add	sp, #484	; 0x1e4
    1f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f90:	4668      	mov	r0, sp
    1f92:	f7ff ff1b 	bl	1dcc <restore_non_core_regs>
    1f96:	2c06      	cmp	r4, #6
    1f98:	d1f7      	bne.n	1f8a <__gnu_Unwind_RaiseException+0x46>
    1f9a:	4639      	mov	r1, r7
    1f9c:	4630      	mov	r0, r6
    1f9e:	f7ff ff4b 	bl	1e38 <unwind_phase2>
    1fa2:	bf00      	nop

00001fa4 <__gnu_Unwind_ForcedUnwind>:
    1fa4:	b430      	push	{r4, r5}
    1fa6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    1fa8:	60c1      	str	r1, [r0, #12]
    1faa:	6182      	str	r2, [r0, #24]
    1fac:	4619      	mov	r1, r3
    1fae:	641d      	str	r5, [r3, #64]	; 0x40
    1fb0:	2200      	movs	r2, #0
    1fb2:	bc30      	pop	{r4, r5}
    1fb4:	e760      	b.n	1e78 <unwind_phase2_forced>
    1fb6:	bf00      	nop

00001fb8 <__gnu_Unwind_Resume>:
    1fb8:	b570      	push	{r4, r5, r6, lr}
    1fba:	68c6      	ldr	r6, [r0, #12]
    1fbc:	6943      	ldr	r3, [r0, #20]
    1fbe:	640b      	str	r3, [r1, #64]	; 0x40
    1fc0:	b9be      	cbnz	r6, 1ff2 <__gnu_Unwind_Resume+0x3a>
    1fc2:	6903      	ldr	r3, [r0, #16]
    1fc4:	460a      	mov	r2, r1
    1fc6:	4604      	mov	r4, r0
    1fc8:	460d      	mov	r5, r1
    1fca:	4601      	mov	r1, r0
    1fcc:	2002      	movs	r0, #2
    1fce:	4798      	blx	r3
    1fd0:	2807      	cmp	r0, #7
    1fd2:	d007      	beq.n	1fe4 <__gnu_Unwind_Resume+0x2c>
    1fd4:	2808      	cmp	r0, #8
    1fd6:	d103      	bne.n	1fe0 <__gnu_Unwind_Resume+0x28>
    1fd8:	4629      	mov	r1, r5
    1fda:	4620      	mov	r0, r4
    1fdc:	f7ff ff2c 	bl	1e38 <unwind_phase2>
    1fe0:	f001 fdc8 	bl	3b74 <abort>
    1fe4:	4630      	mov	r0, r6
    1fe6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1fe8:	f7ff ff24 	bl	1e34 <_Unwind_DebugHook>
    1fec:	1d28      	adds	r0, r5, #4
    1fee:	f000 fb43 	bl	2678 <__restore_core_regs>
    1ff2:	2201      	movs	r2, #1
    1ff4:	f7ff ff40 	bl	1e78 <unwind_phase2_forced>
    1ff8:	f001 fdbc 	bl	3b74 <abort>

00001ffc <__gnu_Unwind_Resume_or_Rethrow>:
    1ffc:	68c2      	ldr	r2, [r0, #12]
    1ffe:	b11a      	cbz	r2, 2008 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    2000:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    2002:	640a      	str	r2, [r1, #64]	; 0x40
    2004:	2200      	movs	r2, #0
    2006:	e737      	b.n	1e78 <unwind_phase2_forced>
    2008:	e79c      	b.n	1f44 <__gnu_Unwind_RaiseException>
    200a:	bf00      	nop

0000200c <_Unwind_Complete>:
    200c:	4770      	bx	lr
    200e:	bf00      	nop

00002010 <_Unwind_DeleteException>:
    2010:	6883      	ldr	r3, [r0, #8]
    2012:	b113      	cbz	r3, 201a <_Unwind_DeleteException+0xa>
    2014:	4601      	mov	r1, r0
    2016:	2001      	movs	r0, #1
    2018:	4718      	bx	r3
    201a:	4770      	bx	lr

0000201c <_Unwind_VRS_Get>:
    201c:	2904      	cmp	r1, #4
    201e:	d807      	bhi.n	2030 <_Unwind_VRS_Get+0x14>
    2020:	e8df f001 	tbb	[pc, r1]
    2024:	08060803 	.word	0x08060803
    2028:	08          	.byte	0x08
    2029:	00          	.byte	0x00
    202a:	b90b      	cbnz	r3, 2030 <_Unwind_VRS_Get+0x14>
    202c:	2a0f      	cmp	r2, #15
    202e:	d903      	bls.n	2038 <_Unwind_VRS_Get+0x1c>
    2030:	2002      	movs	r0, #2
    2032:	4770      	bx	lr
    2034:	2001      	movs	r0, #1
    2036:	4770      	bx	lr
    2038:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    203c:	4618      	mov	r0, r3
    203e:	6853      	ldr	r3, [r2, #4]
    2040:	9a00      	ldr	r2, [sp, #0]
    2042:	6013      	str	r3, [r2, #0]
    2044:	4770      	bx	lr
    2046:	bf00      	nop

00002048 <_Unwind_GetGR>:
    2048:	b510      	push	{r4, lr}
    204a:	b084      	sub	sp, #16
    204c:	2300      	movs	r3, #0
    204e:	ac03      	add	r4, sp, #12
    2050:	460a      	mov	r2, r1
    2052:	9400      	str	r4, [sp, #0]
    2054:	4619      	mov	r1, r3
    2056:	f7ff ffe1 	bl	201c <_Unwind_VRS_Get>
    205a:	9803      	ldr	r0, [sp, #12]
    205c:	b004      	add	sp, #16
    205e:	bd10      	pop	{r4, pc}

00002060 <_Unwind_VRS_Set>:
    2060:	2904      	cmp	r1, #4
    2062:	d807      	bhi.n	2074 <_Unwind_VRS_Set+0x14>
    2064:	e8df f001 	tbb	[pc, r1]
    2068:	08060803 	.word	0x08060803
    206c:	08          	.byte	0x08
    206d:	00          	.byte	0x00
    206e:	b90b      	cbnz	r3, 2074 <_Unwind_VRS_Set+0x14>
    2070:	2a0f      	cmp	r2, #15
    2072:	d903      	bls.n	207c <_Unwind_VRS_Set+0x1c>
    2074:	2002      	movs	r0, #2
    2076:	4770      	bx	lr
    2078:	2001      	movs	r0, #1
    207a:	4770      	bx	lr
    207c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    2080:	9a00      	ldr	r2, [sp, #0]
    2082:	6812      	ldr	r2, [r2, #0]
    2084:	6042      	str	r2, [r0, #4]
    2086:	4618      	mov	r0, r3
    2088:	4770      	bx	lr
    208a:	bf00      	nop

0000208c <_Unwind_SetGR>:
    208c:	b510      	push	{r4, lr}
    208e:	b084      	sub	sp, #16
    2090:	ac04      	add	r4, sp, #16
    2092:	2300      	movs	r3, #0
    2094:	f844 2d04 	str.w	r2, [r4, #-4]!
    2098:	460a      	mov	r2, r1
    209a:	9400      	str	r4, [sp, #0]
    209c:	4619      	mov	r1, r3
    209e:	f7ff ffdf 	bl	2060 <_Unwind_VRS_Set>
    20a2:	b004      	add	sp, #16
    20a4:	bd10      	pop	{r4, pc}
    20a6:	bf00      	nop

000020a8 <__gnu_Unwind_Backtrace>:
    20a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    20ac:	6413      	str	r3, [r2, #64]	; 0x40
    20ae:	1d15      	adds	r5, r2, #4
    20b0:	4607      	mov	r7, r0
    20b2:	460e      	mov	r6, r1
    20b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20b6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    20ba:	ac17      	add	r4, sp, #92	; 0x5c
    20bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    20be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    20c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    20c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    20ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    20ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    20d2:	9516      	str	r5, [sp, #88]	; 0x58
    20d4:	e010      	b.n	20f8 <__gnu_Unwind_Backtrace+0x50>
    20d6:	a816      	add	r0, sp, #88	; 0x58
    20d8:	f7ff ffd8 	bl	208c <_Unwind_SetGR>
    20dc:	4631      	mov	r1, r6
    20de:	a816      	add	r0, sp, #88	; 0x58
    20e0:	47b8      	blx	r7
    20e2:	aa16      	add	r2, sp, #88	; 0x58
    20e4:	4669      	mov	r1, sp
    20e6:	b978      	cbnz	r0, 2108 <__gnu_Unwind_Backtrace+0x60>
    20e8:	9b04      	ldr	r3, [sp, #16]
    20ea:	2008      	movs	r0, #8
    20ec:	4798      	blx	r3
    20ee:	2805      	cmp	r0, #5
    20f0:	4604      	mov	r4, r0
    20f2:	d00a      	beq.n	210a <__gnu_Unwind_Backtrace+0x62>
    20f4:	2809      	cmp	r0, #9
    20f6:	d007      	beq.n	2108 <__gnu_Unwind_Backtrace+0x60>
    20f8:	9926      	ldr	r1, [sp, #152]	; 0x98
    20fa:	4668      	mov	r0, sp
    20fc:	f7ff fe14 	bl	1d28 <get_eit_entry>
    2100:	466a      	mov	r2, sp
    2102:	210c      	movs	r1, #12
    2104:	2800      	cmp	r0, #0
    2106:	d0e6      	beq.n	20d6 <__gnu_Unwind_Backtrace+0x2e>
    2108:	2409      	movs	r4, #9
    210a:	a816      	add	r0, sp, #88	; 0x58
    210c:	f7ff fe5e 	bl	1dcc <restore_non_core_regs>
    2110:	4620      	mov	r0, r4
    2112:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    2116:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002118 <__gnu_unwind_pr_common>:
    2118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    211c:	460d      	mov	r5, r1
    211e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    2120:	b089      	sub	sp, #36	; 0x24
    2122:	1d0c      	adds	r4, r1, #4
    2124:	4616      	mov	r6, r2
    2126:	f000 0b03 	and.w	fp, r0, #3
    212a:	680a      	ldr	r2, [r1, #0]
    212c:	9406      	str	r4, [sp, #24]
    212e:	461f      	mov	r7, r3
    2130:	2b00      	cmp	r3, #0
    2132:	d068      	beq.n	2206 <__gnu_unwind_pr_common+0xee>
    2134:	0c13      	lsrs	r3, r2, #16
    2136:	b2d9      	uxtb	r1, r3
    2138:	0412      	lsls	r2, r2, #16
    213a:	f88d 301d 	strb.w	r3, [sp, #29]
    213e:	2302      	movs	r3, #2
    2140:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    2144:	9205      	str	r2, [sp, #20]
    2146:	f88d 301c 	strb.w	r3, [sp, #28]
    214a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    214c:	f1bb 0f02 	cmp.w	fp, #2
    2150:	bf08      	it	eq
    2152:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    2154:	f013 0301 	ands.w	r3, r3, #1
    2158:	d146      	bne.n	21e8 <__gnu_unwind_pr_common+0xd0>
    215a:	9301      	str	r3, [sp, #4]
    215c:	f000 0308 	and.w	r3, r0, #8
    2160:	9300      	str	r3, [sp, #0]
    2162:	f8d4 9000 	ldr.w	r9, [r4]
    2166:	f1b9 0f00 	cmp.w	r9, #0
    216a:	f000 80f3 	beq.w	2354 <__gnu_unwind_pr_common+0x23c>
    216e:	2f02      	cmp	r7, #2
    2170:	d045      	beq.n	21fe <__gnu_unwind_pr_common+0xe6>
    2172:	f8b4 9000 	ldrh.w	r9, [r4]
    2176:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    217a:	3404      	adds	r4, #4
    217c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    217e:	f028 0a01 	bic.w	sl, r8, #1
    2182:	210f      	movs	r1, #15
    2184:	4630      	mov	r0, r6
    2186:	449a      	add	sl, r3
    2188:	f7ff ff5e 	bl	2048 <_Unwind_GetGR>
    218c:	4582      	cmp	sl, r0
    218e:	d834      	bhi.n	21fa <__gnu_unwind_pr_common+0xe2>
    2190:	f029 0301 	bic.w	r3, r9, #1
    2194:	4453      	add	r3, sl
    2196:	4283      	cmp	r3, r0
    2198:	bf94      	ite	ls
    219a:	2000      	movls	r0, #0
    219c:	2001      	movhi	r0, #1
    219e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    21a2:	f008 0802 	and.w	r8, r8, #2
    21a6:	f009 0901 	and.w	r9, r9, #1
    21aa:	ea48 0809 	orr.w	r8, r8, r9
    21ae:	f1b8 0f01 	cmp.w	r8, #1
    21b2:	d03a      	beq.n	222a <__gnu_unwind_pr_common+0x112>
    21b4:	d331      	bcc.n	221a <__gnu_unwind_pr_common+0x102>
    21b6:	f1b8 0f02 	cmp.w	r8, #2
    21ba:	d11a      	bne.n	21f2 <__gnu_unwind_pr_common+0xda>
    21bc:	6823      	ldr	r3, [r4, #0]
    21be:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    21c2:	f1bb 0f00 	cmp.w	fp, #0
    21c6:	d166      	bne.n	2296 <__gnu_unwind_pr_common+0x17e>
    21c8:	b130      	cbz	r0, 21d8 <__gnu_unwind_pr_common+0xc0>
    21ca:	9a00      	ldr	r2, [sp, #0]
    21cc:	2a00      	cmp	r2, #0
    21ce:	d06c      	beq.n	22aa <__gnu_unwind_pr_common+0x192>
    21d0:	f1ba 0f00 	cmp.w	sl, #0
    21d4:	f000 8090 	beq.w	22f8 <__gnu_unwind_pr_common+0x1e0>
    21d8:	2b00      	cmp	r3, #0
    21da:	da00      	bge.n	21de <__gnu_unwind_pr_common+0xc6>
    21dc:	3404      	adds	r4, #4
    21de:	f10a 0301 	add.w	r3, sl, #1
    21e2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    21e6:	e7bc      	b.n	2162 <__gnu_unwind_pr_common+0x4a>
    21e8:	4630      	mov	r0, r6
    21ea:	a905      	add	r1, sp, #20
    21ec:	f000 fb46 	bl	287c <__gnu_unwind_execute>
    21f0:	b178      	cbz	r0, 2212 <__gnu_unwind_pr_common+0xfa>
    21f2:	2009      	movs	r0, #9
    21f4:	b009      	add	sp, #36	; 0x24
    21f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fa:	2000      	movs	r0, #0
    21fc:	e7cf      	b.n	219e <__gnu_unwind_pr_common+0x86>
    21fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
    2202:	3408      	adds	r4, #8
    2204:	e7ba      	b.n	217c <__gnu_unwind_pr_common+0x64>
    2206:	0212      	lsls	r2, r2, #8
    2208:	2303      	movs	r3, #3
    220a:	9205      	str	r2, [sp, #20]
    220c:	f8ad 301c 	strh.w	r3, [sp, #28]
    2210:	e79b      	b.n	214a <__gnu_unwind_pr_common+0x32>
    2212:	2008      	movs	r0, #8
    2214:	b009      	add	sp, #36	; 0x24
    2216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    221a:	f1bb 0f00 	cmp.w	fp, #0
    221e:	d002      	beq.n	2226 <__gnu_unwind_pr_common+0x10e>
    2220:	2800      	cmp	r0, #0
    2222:	f040 80b4 	bne.w	238e <__gnu_unwind_pr_common+0x276>
    2226:	3404      	adds	r4, #4
    2228:	e79b      	b.n	2162 <__gnu_unwind_pr_common+0x4a>
    222a:	f1bb 0f00 	cmp.w	fp, #0
    222e:	d118      	bne.n	2262 <__gnu_unwind_pr_common+0x14a>
    2230:	b1a8      	cbz	r0, 225e <__gnu_unwind_pr_common+0x146>
    2232:	e9d4 2300 	ldrd	r2, r3, [r4]
    2236:	1c99      	adds	r1, r3, #2
    2238:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    223c:	d0d9      	beq.n	21f2 <__gnu_unwind_pr_common+0xda>
    223e:	f105 0158 	add.w	r1, r5, #88	; 0x58
    2242:	3301      	adds	r3, #1
    2244:	9104      	str	r1, [sp, #16]
    2246:	f000 80b5 	beq.w	23b4 <__gnu_unwind_pr_common+0x29c>
    224a:	1d20      	adds	r0, r4, #4
    224c:	f7ff fdea 	bl	1e24 <_Unwind_decode_typeinfo_ptr.isra.0>
    2250:	ab04      	add	r3, sp, #16
    2252:	4601      	mov	r1, r0
    2254:	4628      	mov	r0, r5
    2256:	f3af 8000 	nop.w
    225a:	2800      	cmp	r0, #0
    225c:	d167      	bne.n	232e <__gnu_unwind_pr_common+0x216>
    225e:	3408      	adds	r4, #8
    2260:	e77f      	b.n	2162 <__gnu_unwind_pr_common+0x4a>
    2262:	210d      	movs	r1, #13
    2264:	4630      	mov	r0, r6
    2266:	f8d5 8020 	ldr.w	r8, [r5, #32]
    226a:	f7ff feed 	bl	2048 <_Unwind_GetGR>
    226e:	4580      	cmp	r8, r0
    2270:	d1f5      	bne.n	225e <__gnu_unwind_pr_common+0x146>
    2272:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2274:	429c      	cmp	r4, r3
    2276:	d1f2      	bne.n	225e <__gnu_unwind_pr_common+0x146>
    2278:	4620      	mov	r0, r4
    227a:	f7ff fd07 	bl	1c8c <selfrel_offset31>
    227e:	210f      	movs	r1, #15
    2280:	4602      	mov	r2, r0
    2282:	4630      	mov	r0, r6
    2284:	f7ff ff02 	bl	208c <_Unwind_SetGR>
    2288:	4630      	mov	r0, r6
    228a:	462a      	mov	r2, r5
    228c:	2100      	movs	r1, #0
    228e:	f7ff fefd 	bl	208c <_Unwind_SetGR>
    2292:	2007      	movs	r0, #7
    2294:	e7ae      	b.n	21f4 <__gnu_unwind_pr_common+0xdc>
    2296:	210d      	movs	r1, #13
    2298:	4630      	mov	r0, r6
    229a:	f8d5 8020 	ldr.w	r8, [r5, #32]
    229e:	f7ff fed3 	bl	2048 <_Unwind_GetGR>
    22a2:	4580      	cmp	r8, r0
    22a4:	d032      	beq.n	230c <__gnu_unwind_pr_common+0x1f4>
    22a6:	6823      	ldr	r3, [r4, #0]
    22a8:	e796      	b.n	21d8 <__gnu_unwind_pr_common+0xc0>
    22aa:	f1ba 0f00 	cmp.w	sl, #0
    22ae:	d023      	beq.n	22f8 <__gnu_unwind_pr_common+0x1e0>
    22b0:	f105 0358 	add.w	r3, r5, #88	; 0x58
    22b4:	f104 0804 	add.w	r8, r4, #4
    22b8:	f8cd b008 	str.w	fp, [sp, #8]
    22bc:	f8dd 9000 	ldr.w	r9, [sp]
    22c0:	9703      	str	r7, [sp, #12]
    22c2:	46a3      	mov	fp, r4
    22c4:	461c      	mov	r4, r3
    22c6:	e002      	b.n	22ce <__gnu_unwind_pr_common+0x1b6>
    22c8:	4557      	cmp	r7, sl
    22ca:	46b9      	mov	r9, r7
    22cc:	d040      	beq.n	2350 <__gnu_unwind_pr_common+0x238>
    22ce:	4640      	mov	r0, r8
    22d0:	9404      	str	r4, [sp, #16]
    22d2:	f7ff fda7 	bl	1e24 <_Unwind_decode_typeinfo_ptr.isra.0>
    22d6:	ab04      	add	r3, sp, #16
    22d8:	4601      	mov	r1, r0
    22da:	2200      	movs	r2, #0
    22dc:	4628      	mov	r0, r5
    22de:	f3af 8000 	nop.w
    22e2:	f109 0701 	add.w	r7, r9, #1
    22e6:	f108 0804 	add.w	r8, r8, #4
    22ea:	2800      	cmp	r0, #0
    22ec:	d0ec      	beq.n	22c8 <__gnu_unwind_pr_common+0x1b0>
    22ee:	45d1      	cmp	r9, sl
    22f0:	465c      	mov	r4, fp
    22f2:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    22f6:	d1d6      	bne.n	22a6 <__gnu_unwind_pr_common+0x18e>
    22f8:	4630      	mov	r0, r6
    22fa:	210d      	movs	r1, #13
    22fc:	f7ff fea4 	bl	2048 <_Unwind_GetGR>
    2300:	9b04      	ldr	r3, [sp, #16]
    2302:	6228      	str	r0, [r5, #32]
    2304:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    2308:	2006      	movs	r0, #6
    230a:	e773      	b.n	21f4 <__gnu_unwind_pr_common+0xdc>
    230c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    230e:	429c      	cmp	r4, r3
    2310:	d1c9      	bne.n	22a6 <__gnu_unwind_pr_common+0x18e>
    2312:	2204      	movs	r2, #4
    2314:	f04f 0800 	mov.w	r8, #0
    2318:	18a3      	adds	r3, r4, r2
    231a:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    231e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    2322:	6823      	ldr	r3, [r4, #0]
    2324:	4543      	cmp	r3, r8
    2326:	db4d      	blt.n	23c4 <__gnu_unwind_pr_common+0x2ac>
    2328:	2301      	movs	r3, #1
    232a:	9301      	str	r3, [sp, #4]
    232c:	e757      	b.n	21de <__gnu_unwind_pr_common+0xc6>
    232e:	4680      	mov	r8, r0
    2330:	210d      	movs	r1, #13
    2332:	4630      	mov	r0, r6
    2334:	f7ff fe88 	bl	2048 <_Unwind_GetGR>
    2338:	f1b8 0f02 	cmp.w	r8, #2
    233c:	6228      	str	r0, [r5, #32]
    233e:	d13e      	bne.n	23be <__gnu_unwind_pr_common+0x2a6>
    2340:	462b      	mov	r3, r5
    2342:	9a04      	ldr	r2, [sp, #16]
    2344:	f843 2f2c 	str.w	r2, [r3, #44]!
    2348:	626b      	str	r3, [r5, #36]	; 0x24
    234a:	62ac      	str	r4, [r5, #40]	; 0x28
    234c:	2006      	movs	r0, #6
    234e:	e751      	b.n	21f4 <__gnu_unwind_pr_common+0xdc>
    2350:	465c      	mov	r4, fp
    2352:	e7d1      	b.n	22f8 <__gnu_unwind_pr_common+0x1e0>
    2354:	a905      	add	r1, sp, #20
    2356:	4630      	mov	r0, r6
    2358:	f000 fa90 	bl	287c <__gnu_unwind_execute>
    235c:	2800      	cmp	r0, #0
    235e:	f47f af48 	bne.w	21f2 <__gnu_unwind_pr_common+0xda>
    2362:	9b01      	ldr	r3, [sp, #4]
    2364:	2b00      	cmp	r3, #0
    2366:	f43f af54 	beq.w	2212 <__gnu_unwind_pr_common+0xfa>
    236a:	210f      	movs	r1, #15
    236c:	4630      	mov	r0, r6
    236e:	f7ff fe6b 	bl	2048 <_Unwind_GetGR>
    2372:	210e      	movs	r1, #14
    2374:	4602      	mov	r2, r0
    2376:	4630      	mov	r0, r6
    2378:	f7ff fe88 	bl	208c <_Unwind_SetGR>
    237c:	4630      	mov	r0, r6
    237e:	4a1a      	ldr	r2, [pc, #104]	; (23e8 <__gnu_unwind_pr_common+0x2d0>)
    2380:	210f      	movs	r1, #15
    2382:	f7ff fe83 	bl	208c <_Unwind_SetGR>
    2386:	2007      	movs	r0, #7
    2388:	b009      	add	sp, #36	; 0x24
    238a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    238e:	4620      	mov	r0, r4
    2390:	f7ff fc7c 	bl	1c8c <selfrel_offset31>
    2394:	3404      	adds	r4, #4
    2396:	4607      	mov	r7, r0
    2398:	63ac      	str	r4, [r5, #56]	; 0x38
    239a:	4628      	mov	r0, r5
    239c:	f3af 8000 	nop.w
    23a0:	2800      	cmp	r0, #0
    23a2:	f43f af26 	beq.w	21f2 <__gnu_unwind_pr_common+0xda>
    23a6:	4630      	mov	r0, r6
    23a8:	463a      	mov	r2, r7
    23aa:	210f      	movs	r1, #15
    23ac:	f7ff fe6e 	bl	208c <_Unwind_SetGR>
    23b0:	2007      	movs	r0, #7
    23b2:	e71f      	b.n	21f4 <__gnu_unwind_pr_common+0xdc>
    23b4:	4630      	mov	r0, r6
    23b6:	210d      	movs	r1, #13
    23b8:	f7ff fe46 	bl	2048 <_Unwind_GetGR>
    23bc:	6228      	str	r0, [r5, #32]
    23be:	9b04      	ldr	r3, [sp, #16]
    23c0:	626b      	str	r3, [r5, #36]	; 0x24
    23c2:	e7c2      	b.n	234a <__gnu_unwind_pr_common+0x232>
    23c4:	f10a 0001 	add.w	r0, sl, #1
    23c8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    23cc:	f7ff fc5e 	bl	1c8c <selfrel_offset31>
    23d0:	210f      	movs	r1, #15
    23d2:	4602      	mov	r2, r0
    23d4:	4630      	mov	r0, r6
    23d6:	f7ff fe59 	bl	208c <_Unwind_SetGR>
    23da:	4630      	mov	r0, r6
    23dc:	462a      	mov	r2, r5
    23de:	4641      	mov	r1, r8
    23e0:	f7ff fe54 	bl	208c <_Unwind_SetGR>
    23e4:	2007      	movs	r0, #7
    23e6:	e705      	b.n	21f4 <__gnu_unwind_pr_common+0xdc>
    23e8:	00000000 	.word	0x00000000

000023ec <__aeabi_unwind_cpp_pr0>:
    23ec:	2300      	movs	r3, #0
    23ee:	e693      	b.n	2118 <__gnu_unwind_pr_common>

000023f0 <__aeabi_unwind_cpp_pr1>:
    23f0:	2301      	movs	r3, #1
    23f2:	e691      	b.n	2118 <__gnu_unwind_pr_common>

000023f4 <__aeabi_unwind_cpp_pr2>:
    23f4:	2302      	movs	r3, #2
    23f6:	e68f      	b.n	2118 <__gnu_unwind_pr_common>

000023f8 <_Unwind_VRS_Pop>:
    23f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23fc:	4605      	mov	r5, r0
    23fe:	b0c4      	sub	sp, #272	; 0x110
    2400:	2904      	cmp	r1, #4
    2402:	d806      	bhi.n	2412 <_Unwind_VRS_Pop+0x1a>
    2404:	e8df f001 	tbb	[pc, r1]
    2408:	03052b4d 	.word	0x03052b4d
    240c:	09          	.byte	0x09
    240d:	00          	.byte	0x00
    240e:	2b03      	cmp	r3, #3
    2410:	d05f      	beq.n	24d2 <_Unwind_VRS_Pop+0xda>
    2412:	2002      	movs	r0, #2
    2414:	b044      	add	sp, #272	; 0x110
    2416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    241a:	2b00      	cmp	r3, #0
    241c:	d1f9      	bne.n	2412 <_Unwind_VRS_Pop+0x1a>
    241e:	2a10      	cmp	r2, #16
    2420:	d8f7      	bhi.n	2412 <_Unwind_VRS_Pop+0x1a>
    2422:	682b      	ldr	r3, [r5, #0]
    2424:	06dc      	lsls	r4, r3, #27
    2426:	f100 80f4 	bmi.w	2612 <_Unwind_VRS_Pop+0x21a>
    242a:	ac22      	add	r4, sp, #136	; 0x88
    242c:	4620      	mov	r0, r4
    242e:	9201      	str	r2, [sp, #4]
    2430:	f000 f994 	bl	275c <__gnu_Unwind_Save_WMMXC>
    2434:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    2436:	9a01      	ldr	r2, [sp, #4]
    2438:	2300      	movs	r3, #0
    243a:	2601      	movs	r6, #1
    243c:	fa06 f103 	lsl.w	r1, r6, r3
    2440:	4211      	tst	r1, r2
    2442:	d003      	beq.n	244c <_Unwind_VRS_Pop+0x54>
    2444:	6801      	ldr	r1, [r0, #0]
    2446:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    244a:	3004      	adds	r0, #4
    244c:	3301      	adds	r3, #1
    244e:	2b04      	cmp	r3, #4
    2450:	d1f4      	bne.n	243c <_Unwind_VRS_Pop+0x44>
    2452:	63a8      	str	r0, [r5, #56]	; 0x38
    2454:	4620      	mov	r0, r4
    2456:	f000 f977 	bl	2748 <__gnu_Unwind_Restore_WMMXC>
    245a:	2000      	movs	r0, #0
    245c:	e7da      	b.n	2414 <_Unwind_VRS_Pop+0x1c>
    245e:	2b01      	cmp	r3, #1
    2460:	ea4f 4612 	mov.w	r6, r2, lsr #16
    2464:	b297      	uxth	r7, r2
    2466:	d052      	beq.n	250e <_Unwind_VRS_Pop+0x116>
    2468:	2b05      	cmp	r3, #5
    246a:	d1d2      	bne.n	2412 <_Unwind_VRS_Pop+0x1a>
    246c:	eb06 0807 	add.w	r8, r6, r7
    2470:	f1b8 0f20 	cmp.w	r8, #32
    2474:	d8cd      	bhi.n	2412 <_Unwind_VRS_Pop+0x1a>
    2476:	2e0f      	cmp	r6, #15
    2478:	f240 8099 	bls.w	25ae <_Unwind_VRS_Pop+0x1b6>
    247c:	46b8      	mov	r8, r7
    247e:	2f00      	cmp	r7, #0
    2480:	f040 80db 	bne.w	263a <_Unwind_VRS_Pop+0x242>
    2484:	6baa      	ldr	r2, [r5, #56]	; 0x38
    2486:	63aa      	str	r2, [r5, #56]	; 0x38
    2488:	2e0f      	cmp	r6, #15
    248a:	f240 80be 	bls.w	260a <_Unwind_VRS_Pop+0x212>
    248e:	f1b8 0f00 	cmp.w	r8, #0
    2492:	d002      	beq.n	249a <_Unwind_VRS_Pop+0xa2>
    2494:	a802      	add	r0, sp, #8
    2496:	f000 f90b 	bl	26b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    249a:	2000      	movs	r0, #0
    249c:	b044      	add	sp, #272	; 0x110
    249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24a2:	2b00      	cmp	r3, #0
    24a4:	d1b5      	bne.n	2412 <_Unwind_VRS_Pop+0x1a>
    24a6:	6bac      	ldr	r4, [r5, #56]	; 0x38
    24a8:	b297      	uxth	r7, r2
    24aa:	1d28      	adds	r0, r5, #4
    24ac:	2601      	movs	r6, #1
    24ae:	fa06 f103 	lsl.w	r1, r6, r3
    24b2:	4239      	tst	r1, r7
    24b4:	f103 0301 	add.w	r3, r3, #1
    24b8:	d002      	beq.n	24c0 <_Unwind_VRS_Pop+0xc8>
    24ba:	6821      	ldr	r1, [r4, #0]
    24bc:	6001      	str	r1, [r0, #0]
    24be:	3404      	adds	r4, #4
    24c0:	2b10      	cmp	r3, #16
    24c2:	f100 0004 	add.w	r0, r0, #4
    24c6:	d1f2      	bne.n	24ae <_Unwind_VRS_Pop+0xb6>
    24c8:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    24cc:	d1e5      	bne.n	249a <_Unwind_VRS_Pop+0xa2>
    24ce:	63ac      	str	r4, [r5, #56]	; 0x38
    24d0:	e7a0      	b.n	2414 <_Unwind_VRS_Pop+0x1c>
    24d2:	0c16      	lsrs	r6, r2, #16
    24d4:	b297      	uxth	r7, r2
    24d6:	19f3      	adds	r3, r6, r7
    24d8:	2b10      	cmp	r3, #16
    24da:	d89a      	bhi.n	2412 <_Unwind_VRS_Pop+0x1a>
    24dc:	682b      	ldr	r3, [r5, #0]
    24de:	071a      	lsls	r2, r3, #28
    24e0:	d45d      	bmi.n	259e <_Unwind_VRS_Pop+0x1a6>
    24e2:	ac22      	add	r4, sp, #136	; 0x88
    24e4:	4620      	mov	r0, r4
    24e6:	f000 f90d 	bl	2704 <__gnu_Unwind_Save_WMMXD>
    24ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    24ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
    24f0:	b13f      	cbz	r7, 2502 <_Unwind_VRS_Pop+0x10a>
    24f2:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    24f6:	6818      	ldr	r0, [r3, #0]
    24f8:	f841 0b04 	str.w	r0, [r1], #4
    24fc:	3304      	adds	r3, #4
    24fe:	4293      	cmp	r3, r2
    2500:	d1f9      	bne.n	24f6 <_Unwind_VRS_Pop+0xfe>
    2502:	4620      	mov	r0, r4
    2504:	63ab      	str	r3, [r5, #56]	; 0x38
    2506:	f000 f8db 	bl	26c0 <__gnu_Unwind_Restore_WMMXD>
    250a:	2000      	movs	r0, #0
    250c:	e782      	b.n	2414 <_Unwind_VRS_Pop+0x1c>
    250e:	19f2      	adds	r2, r6, r7
    2510:	2a10      	cmp	r2, #16
    2512:	f63f af7e 	bhi.w	2412 <_Unwind_VRS_Pop+0x1a>
    2516:	2e0f      	cmp	r6, #15
    2518:	f63f af7b 	bhi.w	2412 <_Unwind_VRS_Pop+0x1a>
    251c:	682a      	ldr	r2, [r5, #0]
    251e:	07d1      	lsls	r1, r2, #31
    2520:	d508      	bpl.n	2534 <_Unwind_VRS_Pop+0x13c>
    2522:	4628      	mov	r0, r5
    2524:	f022 0203 	bic.w	r2, r2, #3
    2528:	f840 2b48 	str.w	r2, [r0], #72
    252c:	9301      	str	r3, [sp, #4]
    252e:	f000 f8b3 	bl	2698 <__gnu_Unwind_Save_VFP>
    2532:	9b01      	ldr	r3, [sp, #4]
    2534:	9301      	str	r3, [sp, #4]
    2536:	ac22      	add	r4, sp, #136	; 0x88
    2538:	4620      	mov	r0, r4
    253a:	f000 f8ad 	bl	2698 <__gnu_Unwind_Save_VFP>
    253e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2540:	9b01      	ldr	r3, [sp, #4]
    2542:	2f00      	cmp	r7, #0
    2544:	f000 8095 	beq.w	2672 <_Unwind_VRS_Pop+0x27a>
    2548:	007f      	lsls	r7, r7, #1
    254a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    254e:	f04f 0800 	mov.w	r8, #0
    2552:	3c04      	subs	r4, #4
    2554:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    2558:	f851 0b04 	ldr.w	r0, [r1], #4
    255c:	f844 0f04 	str.w	r0, [r4, #4]!
    2560:	4291      	cmp	r1, r2
    2562:	d1f9      	bne.n	2558 <_Unwind_VRS_Pop+0x160>
    2564:	f1b8 0f00 	cmp.w	r8, #0
    2568:	d00f      	beq.n	258a <_Unwind_VRS_Pop+0x192>
    256a:	ac02      	add	r4, sp, #8
    256c:	2e10      	cmp	r6, #16
    256e:	4631      	mov	r1, r6
    2570:	bf38      	it	cc
    2572:	2110      	movcc	r1, #16
    2574:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    2578:	3984      	subs	r1, #132	; 0x84
    257a:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    257e:	f852 0b04 	ldr.w	r0, [r2], #4
    2582:	f841 0f04 	str.w	r0, [r1, #4]!
    2586:	4294      	cmp	r4, r2
    2588:	d1f9      	bne.n	257e <_Unwind_VRS_Pop+0x186>
    258a:	2b01      	cmp	r3, #1
    258c:	f47f af7b 	bne.w	2486 <_Unwind_VRS_Pop+0x8e>
    2590:	ac22      	add	r4, sp, #136	; 0x88
    2592:	3204      	adds	r2, #4
    2594:	63aa      	str	r2, [r5, #56]	; 0x38
    2596:	4620      	mov	r0, r4
    2598:	f000 f87a 	bl	2690 <__gnu_Unwind_Restore_VFP>
    259c:	e77d      	b.n	249a <_Unwind_VRS_Pop+0xa2>
    259e:	f023 0308 	bic.w	r3, r3, #8
    25a2:	602b      	str	r3, [r5, #0]
    25a4:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    25a8:	f000 f8ac 	bl	2704 <__gnu_Unwind_Save_WMMXD>
    25ac:	e799      	b.n	24e2 <_Unwind_VRS_Pop+0xea>
    25ae:	f1b8 0f10 	cmp.w	r8, #16
    25b2:	682a      	ldr	r2, [r5, #0]
    25b4:	d943      	bls.n	263e <_Unwind_VRS_Pop+0x246>
    25b6:	07d0      	lsls	r0, r2, #31
    25b8:	f1a8 0810 	sub.w	r8, r8, #16
    25bc:	d50b      	bpl.n	25d6 <_Unwind_VRS_Pop+0x1de>
    25be:	4628      	mov	r0, r5
    25c0:	f022 0201 	bic.w	r2, r2, #1
    25c4:	f042 0202 	orr.w	r2, r2, #2
    25c8:	f840 2b48 	str.w	r2, [r0], #72
    25cc:	9301      	str	r3, [sp, #4]
    25ce:	f000 f86b 	bl	26a8 <__gnu_Unwind_Save_VFP_D>
    25d2:	682a      	ldr	r2, [r5, #0]
    25d4:	9b01      	ldr	r3, [sp, #4]
    25d6:	0751      	lsls	r1, r2, #29
    25d8:	d425      	bmi.n	2626 <_Unwind_VRS_Pop+0x22e>
    25da:	2e0f      	cmp	r6, #15
    25dc:	d804      	bhi.n	25e8 <_Unwind_VRS_Pop+0x1f0>
    25de:	a822      	add	r0, sp, #136	; 0x88
    25e0:	9301      	str	r3, [sp, #4]
    25e2:	f000 f861 	bl	26a8 <__gnu_Unwind_Save_VFP_D>
    25e6:	9b01      	ldr	r3, [sp, #4]
    25e8:	9301      	str	r3, [sp, #4]
    25ea:	ac02      	add	r4, sp, #8
    25ec:	4620      	mov	r0, r4
    25ee:	f000 f863 	bl	26b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
    25f2:	f1c6 0110 	rsb	r1, r6, #16
    25f6:	2900      	cmp	r1, #0
    25f8:	6baa      	ldr	r2, [r5, #56]	; 0x38
    25fa:	9b01      	ldr	r3, [sp, #4]
    25fc:	ddb6      	ble.n	256c <_Unwind_VRS_Pop+0x174>
    25fe:	ac22      	add	r4, sp, #136	; 0x88
    2600:	004f      	lsls	r7, r1, #1
    2602:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    2606:	4611      	mov	r1, r2
    2608:	e7a3      	b.n	2552 <_Unwind_VRS_Pop+0x15a>
    260a:	a822      	add	r0, sp, #136	; 0x88
    260c:	f000 f848 	bl	26a0 <__gnu_Unwind_Restore_VFP_D>
    2610:	e73d      	b.n	248e <_Unwind_VRS_Pop+0x96>
    2612:	f023 0310 	bic.w	r3, r3, #16
    2616:	602b      	str	r3, [r5, #0]
    2618:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    261c:	9201      	str	r2, [sp, #4]
    261e:	f000 f89d 	bl	275c <__gnu_Unwind_Save_WMMXC>
    2622:	9a01      	ldr	r2, [sp, #4]
    2624:	e701      	b.n	242a <_Unwind_VRS_Pop+0x32>
    2626:	4628      	mov	r0, r5
    2628:	f022 0204 	bic.w	r2, r2, #4
    262c:	f840 2bd0 	str.w	r2, [r0], #208
    2630:	9301      	str	r3, [sp, #4]
    2632:	f000 f841 	bl	26b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
    2636:	9b01      	ldr	r3, [sp, #4]
    2638:	e7cf      	b.n	25da <_Unwind_VRS_Pop+0x1e2>
    263a:	682a      	ldr	r2, [r5, #0]
    263c:	e7cb      	b.n	25d6 <_Unwind_VRS_Pop+0x1de>
    263e:	07d0      	lsls	r0, r2, #31
    2640:	d50a      	bpl.n	2658 <_Unwind_VRS_Pop+0x260>
    2642:	4628      	mov	r0, r5
    2644:	f022 0201 	bic.w	r2, r2, #1
    2648:	f042 0202 	orr.w	r2, r2, #2
    264c:	f840 2b48 	str.w	r2, [r0], #72
    2650:	9301      	str	r3, [sp, #4]
    2652:	f000 f829 	bl	26a8 <__gnu_Unwind_Save_VFP_D>
    2656:	9b01      	ldr	r3, [sp, #4]
    2658:	9301      	str	r3, [sp, #4]
    265a:	ac22      	add	r4, sp, #136	; 0x88
    265c:	4620      	mov	r0, r4
    265e:	f000 f823 	bl	26a8 <__gnu_Unwind_Save_VFP_D>
    2662:	46b8      	mov	r8, r7
    2664:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2666:	9b01      	ldr	r3, [sp, #4]
    2668:	2f00      	cmp	r7, #0
    266a:	f47f af6d 	bne.w	2548 <_Unwind_VRS_Pop+0x150>
    266e:	460a      	mov	r2, r1
    2670:	e709      	b.n	2486 <_Unwind_VRS_Pop+0x8e>
    2672:	460a      	mov	r2, r1
    2674:	e78d      	b.n	2592 <_Unwind_VRS_Pop+0x19a>
    2676:	bf00      	nop

00002678 <__restore_core_regs>:
    2678:	f100 0134 	add.w	r1, r0, #52	; 0x34
    267c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    2680:	469c      	mov	ip, r3
    2682:	46a6      	mov	lr, r4
    2684:	f84c 5d04 	str.w	r5, [ip, #-4]!
    2688:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    268c:	46e5      	mov	sp, ip
    268e:	bd00      	pop	{pc}

00002690 <__gnu_Unwind_Restore_VFP>:
    2690:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    2694:	4770      	bx	lr
    2696:	bf00      	nop

00002698 <__gnu_Unwind_Save_VFP>:
    2698:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    269c:	4770      	bx	lr
    269e:	bf00      	nop

000026a0 <__gnu_Unwind_Restore_VFP_D>:
    26a0:	ec90 0b20 	vldmia	r0, {d0-d15}
    26a4:	4770      	bx	lr
    26a6:	bf00      	nop

000026a8 <__gnu_Unwind_Save_VFP_D>:
    26a8:	ec80 0b20 	vstmia	r0, {d0-d15}
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop

000026b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    26b0:	ecd0 0b20 	vldmia	r0, {d16-d31}
    26b4:	4770      	bx	lr
    26b6:	bf00      	nop

000026b8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    26b8:	ecc0 0b20 	vstmia	r0, {d16-d31}
    26bc:	4770      	bx	lr
    26be:	bf00      	nop

000026c0 <__gnu_Unwind_Restore_WMMXD>:
    26c0:	ecf0 0102 	ldfe	f0, [r0], #8
    26c4:	ecf0 1102 	ldfe	f1, [r0], #8
    26c8:	ecf0 2102 	ldfe	f2, [r0], #8
    26cc:	ecf0 3102 	ldfe	f3, [r0], #8
    26d0:	ecf0 4102 	ldfe	f4, [r0], #8
    26d4:	ecf0 5102 	ldfe	f5, [r0], #8
    26d8:	ecf0 6102 	ldfe	f6, [r0], #8
    26dc:	ecf0 7102 	ldfe	f7, [r0], #8
    26e0:	ecf0 8102 	ldfp	f0, [r0], #8
    26e4:	ecf0 9102 	ldfp	f1, [r0], #8
    26e8:	ecf0 a102 	ldfp	f2, [r0], #8
    26ec:	ecf0 b102 	ldfp	f3, [r0], #8
    26f0:	ecf0 c102 	ldfp	f4, [r0], #8
    26f4:	ecf0 d102 	ldfp	f5, [r0], #8
    26f8:	ecf0 e102 	ldfp	f6, [r0], #8
    26fc:	ecf0 f102 	ldfp	f7, [r0], #8
    2700:	4770      	bx	lr
    2702:	bf00      	nop

00002704 <__gnu_Unwind_Save_WMMXD>:
    2704:	ece0 0102 	stfe	f0, [r0], #8
    2708:	ece0 1102 	stfe	f1, [r0], #8
    270c:	ece0 2102 	stfe	f2, [r0], #8
    2710:	ece0 3102 	stfe	f3, [r0], #8
    2714:	ece0 4102 	stfe	f4, [r0], #8
    2718:	ece0 5102 	stfe	f5, [r0], #8
    271c:	ece0 6102 	stfe	f6, [r0], #8
    2720:	ece0 7102 	stfe	f7, [r0], #8
    2724:	ece0 8102 	stfp	f0, [r0], #8
    2728:	ece0 9102 	stfp	f1, [r0], #8
    272c:	ece0 a102 	stfp	f2, [r0], #8
    2730:	ece0 b102 	stfp	f3, [r0], #8
    2734:	ece0 c102 	stfp	f4, [r0], #8
    2738:	ece0 d102 	stfp	f5, [r0], #8
    273c:	ece0 e102 	stfp	f6, [r0], #8
    2740:	ece0 f102 	stfp	f7, [r0], #8
    2744:	4770      	bx	lr
    2746:	bf00      	nop

00002748 <__gnu_Unwind_Restore_WMMXC>:
    2748:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    274c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    2750:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    2754:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    2758:	4770      	bx	lr
    275a:	bf00      	nop

0000275c <__gnu_Unwind_Save_WMMXC>:
    275c:	fca0 8101 	stc2	1, cr8, [r0], #4
    2760:	fca0 9101 	stc2	1, cr9, [r0], #4
    2764:	fca0 a101 	stc2	1, cr10, [r0], #4
    2768:	fca0 b101 	stc2	1, cr11, [r0], #4
    276c:	4770      	bx	lr
    276e:	bf00      	nop

00002770 <_Unwind_RaiseException>:
    2770:	46ec      	mov	ip, sp
    2772:	b500      	push	{lr}
    2774:	e92d 5000 	stmdb	sp!, {ip, lr}
    2778:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    277c:	f04f 0300 	mov.w	r3, #0
    2780:	e92d 000c 	stmdb	sp!, {r2, r3}
    2784:	a901      	add	r1, sp, #4
    2786:	f7ff fbdd 	bl	1f44 <__gnu_Unwind_RaiseException>
    278a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    278e:	b012      	add	sp, #72	; 0x48
    2790:	4770      	bx	lr
    2792:	bf00      	nop

00002794 <_Unwind_Resume>:
    2794:	46ec      	mov	ip, sp
    2796:	b500      	push	{lr}
    2798:	e92d 5000 	stmdb	sp!, {ip, lr}
    279c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    27a0:	f04f 0300 	mov.w	r3, #0
    27a4:	e92d 000c 	stmdb	sp!, {r2, r3}
    27a8:	a901      	add	r1, sp, #4
    27aa:	f7ff fc05 	bl	1fb8 <__gnu_Unwind_Resume>
    27ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    27b2:	b012      	add	sp, #72	; 0x48
    27b4:	4770      	bx	lr
    27b6:	bf00      	nop

000027b8 <_Unwind_Resume_or_Rethrow>:
    27b8:	46ec      	mov	ip, sp
    27ba:	b500      	push	{lr}
    27bc:	e92d 5000 	stmdb	sp!, {ip, lr}
    27c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    27c4:	f04f 0300 	mov.w	r3, #0
    27c8:	e92d 000c 	stmdb	sp!, {r2, r3}
    27cc:	a901      	add	r1, sp, #4
    27ce:	f7ff fc15 	bl	1ffc <__gnu_Unwind_Resume_or_Rethrow>
    27d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    27d6:	b012      	add	sp, #72	; 0x48
    27d8:	4770      	bx	lr
    27da:	bf00      	nop

000027dc <_Unwind_ForcedUnwind>:
    27dc:	46ec      	mov	ip, sp
    27de:	b500      	push	{lr}
    27e0:	e92d 5000 	stmdb	sp!, {ip, lr}
    27e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    27e8:	f04f 0300 	mov.w	r3, #0
    27ec:	e92d 000c 	stmdb	sp!, {r2, r3}
    27f0:	ab01      	add	r3, sp, #4
    27f2:	f7ff fbd7 	bl	1fa4 <__gnu_Unwind_ForcedUnwind>
    27f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    27fa:	b012      	add	sp, #72	; 0x48
    27fc:	4770      	bx	lr
    27fe:	bf00      	nop

00002800 <_Unwind_Backtrace>:
    2800:	46ec      	mov	ip, sp
    2802:	b500      	push	{lr}
    2804:	e92d 5000 	stmdb	sp!, {ip, lr}
    2808:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    280c:	f04f 0300 	mov.w	r3, #0
    2810:	e92d 000c 	stmdb	sp!, {r2, r3}
    2814:	aa01      	add	r2, sp, #4
    2816:	f7ff fc47 	bl	20a8 <__gnu_Unwind_Backtrace>
    281a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    281e:	b012      	add	sp, #72	; 0x48
    2820:	4770      	bx	lr
    2822:	bf00      	nop

00002824 <next_unwind_byte>:
    2824:	7a02      	ldrb	r2, [r0, #8]
    2826:	b97a      	cbnz	r2, 2848 <next_unwind_byte+0x24>
    2828:	7a43      	ldrb	r3, [r0, #9]
    282a:	b1a3      	cbz	r3, 2856 <next_unwind_byte+0x32>
    282c:	6842      	ldr	r2, [r0, #4]
    282e:	3b01      	subs	r3, #1
    2830:	b410      	push	{r4}
    2832:	7243      	strb	r3, [r0, #9]
    2834:	6813      	ldr	r3, [r2, #0]
    2836:	2103      	movs	r1, #3
    2838:	1d14      	adds	r4, r2, #4
    283a:	7201      	strb	r1, [r0, #8]
    283c:	021a      	lsls	r2, r3, #8
    283e:	6044      	str	r4, [r0, #4]
    2840:	6002      	str	r2, [r0, #0]
    2842:	bc10      	pop	{r4}
    2844:	0e18      	lsrs	r0, r3, #24
    2846:	4770      	bx	lr
    2848:	6803      	ldr	r3, [r0, #0]
    284a:	3a01      	subs	r2, #1
    284c:	7202      	strb	r2, [r0, #8]
    284e:	021a      	lsls	r2, r3, #8
    2850:	6002      	str	r2, [r0, #0]
    2852:	0e18      	lsrs	r0, r3, #24
    2854:	4770      	bx	lr
    2856:	20b0      	movs	r0, #176	; 0xb0
    2858:	4770      	bx	lr
    285a:	bf00      	nop

0000285c <_Unwind_GetGR.constprop.0>:
    285c:	b500      	push	{lr}
    285e:	b085      	sub	sp, #20
    2860:	aa03      	add	r2, sp, #12
    2862:	2300      	movs	r3, #0
    2864:	9200      	str	r2, [sp, #0]
    2866:	4619      	mov	r1, r3
    2868:	220c      	movs	r2, #12
    286a:	f7ff fbd7 	bl	201c <_Unwind_VRS_Get>
    286e:	9803      	ldr	r0, [sp, #12]
    2870:	b005      	add	sp, #20
    2872:	f85d fb04 	ldr.w	pc, [sp], #4
    2876:	bf00      	nop

00002878 <unwind_UCB_from_context>:
    2878:	e7f0      	b.n	285c <_Unwind_GetGR.constprop.0>
    287a:	bf00      	nop

0000287c <__gnu_unwind_execute>:
    287c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2880:	4605      	mov	r5, r0
    2882:	b085      	sub	sp, #20
    2884:	460e      	mov	r6, r1
    2886:	f04f 0800 	mov.w	r8, #0
    288a:	4630      	mov	r0, r6
    288c:	f7ff ffca 	bl	2824 <next_unwind_byte>
    2890:	28b0      	cmp	r0, #176	; 0xb0
    2892:	4604      	mov	r4, r0
    2894:	f000 80b1 	beq.w	29fa <__gnu_unwind_execute+0x17e>
    2898:	0607      	lsls	r7, r0, #24
    289a:	d520      	bpl.n	28de <__gnu_unwind_execute+0x62>
    289c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    28a0:	2b80      	cmp	r3, #128	; 0x80
    28a2:	d065      	beq.n	2970 <__gnu_unwind_execute+0xf4>
    28a4:	2b90      	cmp	r3, #144	; 0x90
    28a6:	d036      	beq.n	2916 <__gnu_unwind_execute+0x9a>
    28a8:	2ba0      	cmp	r3, #160	; 0xa0
    28aa:	d078      	beq.n	299e <__gnu_unwind_execute+0x122>
    28ac:	2bb0      	cmp	r3, #176	; 0xb0
    28ae:	d047      	beq.n	2940 <__gnu_unwind_execute+0xc4>
    28b0:	2bc0      	cmp	r3, #192	; 0xc0
    28b2:	f000 808a 	beq.w	29ca <__gnu_unwind_execute+0x14e>
    28b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    28ba:	2bd0      	cmp	r3, #208	; 0xd0
    28bc:	d10b      	bne.n	28d6 <__gnu_unwind_execute+0x5a>
    28be:	f000 0207 	and.w	r2, r0, #7
    28c2:	3201      	adds	r2, #1
    28c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    28c8:	2305      	movs	r3, #5
    28ca:	2101      	movs	r1, #1
    28cc:	4628      	mov	r0, r5
    28ce:	f7ff fd93 	bl	23f8 <_Unwind_VRS_Pop>
    28d2:	2800      	cmp	r0, #0
    28d4:	d0d9      	beq.n	288a <__gnu_unwind_execute+0xe>
    28d6:	2009      	movs	r0, #9
    28d8:	b005      	add	sp, #20
    28da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    28de:	f10d 090c 	add.w	r9, sp, #12
    28e2:	2300      	movs	r3, #0
    28e4:	4619      	mov	r1, r3
    28e6:	0087      	lsls	r7, r0, #2
    28e8:	f8cd 9000 	str.w	r9, [sp]
    28ec:	220d      	movs	r2, #13
    28ee:	4628      	mov	r0, r5
    28f0:	f7ff fb94 	bl	201c <_Unwind_VRS_Get>
    28f4:	b2ff      	uxtb	r7, r7
    28f6:	9b03      	ldr	r3, [sp, #12]
    28f8:	f8cd 9000 	str.w	r9, [sp]
    28fc:	3704      	adds	r7, #4
    28fe:	0660      	lsls	r0, r4, #25
    2900:	bf4c      	ite	mi
    2902:	1bdf      	submi	r7, r3, r7
    2904:	18ff      	addpl	r7, r7, r3
    2906:	2300      	movs	r3, #0
    2908:	4619      	mov	r1, r3
    290a:	220d      	movs	r2, #13
    290c:	4628      	mov	r0, r5
    290e:	9703      	str	r7, [sp, #12]
    2910:	f7ff fba6 	bl	2060 <_Unwind_VRS_Set>
    2914:	e7b9      	b.n	288a <__gnu_unwind_execute+0xe>
    2916:	f000 030d 	and.w	r3, r0, #13
    291a:	2b0d      	cmp	r3, #13
    291c:	d0db      	beq.n	28d6 <__gnu_unwind_execute+0x5a>
    291e:	af03      	add	r7, sp, #12
    2920:	2300      	movs	r3, #0
    2922:	f000 020f 	and.w	r2, r0, #15
    2926:	4619      	mov	r1, r3
    2928:	9700      	str	r7, [sp, #0]
    292a:	4628      	mov	r0, r5
    292c:	f7ff fb76 	bl	201c <_Unwind_VRS_Get>
    2930:	2300      	movs	r3, #0
    2932:	9700      	str	r7, [sp, #0]
    2934:	4619      	mov	r1, r3
    2936:	220d      	movs	r2, #13
    2938:	4628      	mov	r0, r5
    293a:	f7ff fb91 	bl	2060 <_Unwind_VRS_Set>
    293e:	e7a4      	b.n	288a <__gnu_unwind_execute+0xe>
    2940:	28b1      	cmp	r0, #177	; 0xb1
    2942:	d05f      	beq.n	2a04 <__gnu_unwind_execute+0x188>
    2944:	28b2      	cmp	r0, #178	; 0xb2
    2946:	f000 80cc 	beq.w	2ae2 <__gnu_unwind_execute+0x266>
    294a:	28b3      	cmp	r0, #179	; 0xb3
    294c:	d07e      	beq.n	2a4c <__gnu_unwind_execute+0x1d0>
    294e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    2952:	2bb4      	cmp	r3, #180	; 0xb4
    2954:	d0bf      	beq.n	28d6 <__gnu_unwind_execute+0x5a>
    2956:	f000 0207 	and.w	r2, r0, #7
    295a:	3201      	adds	r2, #1
    295c:	2301      	movs	r3, #1
    295e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    2962:	4619      	mov	r1, r3
    2964:	4628      	mov	r0, r5
    2966:	f7ff fd47 	bl	23f8 <_Unwind_VRS_Pop>
    296a:	2800      	cmp	r0, #0
    296c:	d08d      	beq.n	288a <__gnu_unwind_execute+0xe>
    296e:	e7b2      	b.n	28d6 <__gnu_unwind_execute+0x5a>
    2970:	4630      	mov	r0, r6
    2972:	f7ff ff57 	bl	2824 <next_unwind_byte>
    2976:	0224      	lsls	r4, r4, #8
    2978:	4304      	orrs	r4, r0
    297a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    297e:	d0aa      	beq.n	28d6 <__gnu_unwind_execute+0x5a>
    2980:	0124      	lsls	r4, r4, #4
    2982:	2300      	movs	r3, #0
    2984:	b2a2      	uxth	r2, r4
    2986:	4619      	mov	r1, r3
    2988:	4628      	mov	r0, r5
    298a:	f7ff fd35 	bl	23f8 <_Unwind_VRS_Pop>
    298e:	2800      	cmp	r0, #0
    2990:	d1a1      	bne.n	28d6 <__gnu_unwind_execute+0x5a>
    2992:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    2996:	bf18      	it	ne
    2998:	f04f 0801 	movne.w	r8, #1
    299c:	e775      	b.n	288a <__gnu_unwind_execute+0xe>
    299e:	43c2      	mvns	r2, r0
    29a0:	f002 0307 	and.w	r3, r2, #7
    29a4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    29a8:	411a      	asrs	r2, r3
    29aa:	0701      	lsls	r1, r0, #28
    29ac:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    29b0:	f04f 0300 	mov.w	r3, #0
    29b4:	bf48      	it	mi
    29b6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    29ba:	4619      	mov	r1, r3
    29bc:	4628      	mov	r0, r5
    29be:	f7ff fd1b 	bl	23f8 <_Unwind_VRS_Pop>
    29c2:	2800      	cmp	r0, #0
    29c4:	f43f af61 	beq.w	288a <__gnu_unwind_execute+0xe>
    29c8:	e785      	b.n	28d6 <__gnu_unwind_execute+0x5a>
    29ca:	28c6      	cmp	r0, #198	; 0xc6
    29cc:	d051      	beq.n	2a72 <__gnu_unwind_execute+0x1f6>
    29ce:	28c7      	cmp	r0, #199	; 0xc7
    29d0:	d05a      	beq.n	2a88 <__gnu_unwind_execute+0x20c>
    29d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    29d6:	2bc0      	cmp	r3, #192	; 0xc0
    29d8:	d069      	beq.n	2aae <__gnu_unwind_execute+0x232>
    29da:	28c8      	cmp	r0, #200	; 0xc8
    29dc:	d075      	beq.n	2aca <__gnu_unwind_execute+0x24e>
    29de:	28c9      	cmp	r0, #201	; 0xc9
    29e0:	f47f af79 	bne.w	28d6 <__gnu_unwind_execute+0x5a>
    29e4:	4630      	mov	r0, r6
    29e6:	f7ff ff1d 	bl	2824 <next_unwind_byte>
    29ea:	0302      	lsls	r2, r0, #12
    29ec:	f000 000f 	and.w	r0, r0, #15
    29f0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    29f4:	3001      	adds	r0, #1
    29f6:	4302      	orrs	r2, r0
    29f8:	e766      	b.n	28c8 <__gnu_unwind_execute+0x4c>
    29fa:	f1b8 0f00 	cmp.w	r8, #0
    29fe:	d014      	beq.n	2a2a <__gnu_unwind_execute+0x1ae>
    2a00:	2000      	movs	r0, #0
    2a02:	e769      	b.n	28d8 <__gnu_unwind_execute+0x5c>
    2a04:	4630      	mov	r0, r6
    2a06:	f7ff ff0d 	bl	2824 <next_unwind_byte>
    2a0a:	2800      	cmp	r0, #0
    2a0c:	f43f af63 	beq.w	28d6 <__gnu_unwind_execute+0x5a>
    2a10:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    2a14:	f47f af5f 	bne.w	28d6 <__gnu_unwind_execute+0x5a>
    2a18:	4602      	mov	r2, r0
    2a1a:	4619      	mov	r1, r3
    2a1c:	4628      	mov	r0, r5
    2a1e:	f7ff fceb 	bl	23f8 <_Unwind_VRS_Pop>
    2a22:	2800      	cmp	r0, #0
    2a24:	f43f af31 	beq.w	288a <__gnu_unwind_execute+0xe>
    2a28:	e755      	b.n	28d6 <__gnu_unwind_execute+0x5a>
    2a2a:	ac03      	add	r4, sp, #12
    2a2c:	4643      	mov	r3, r8
    2a2e:	220e      	movs	r2, #14
    2a30:	4641      	mov	r1, r8
    2a32:	9400      	str	r4, [sp, #0]
    2a34:	4628      	mov	r0, r5
    2a36:	f7ff faf1 	bl	201c <_Unwind_VRS_Get>
    2a3a:	9400      	str	r4, [sp, #0]
    2a3c:	4628      	mov	r0, r5
    2a3e:	4643      	mov	r3, r8
    2a40:	220f      	movs	r2, #15
    2a42:	4641      	mov	r1, r8
    2a44:	f7ff fb0c 	bl	2060 <_Unwind_VRS_Set>
    2a48:	4640      	mov	r0, r8
    2a4a:	e745      	b.n	28d8 <__gnu_unwind_execute+0x5c>
    2a4c:	4630      	mov	r0, r6
    2a4e:	f7ff fee9 	bl	2824 <next_unwind_byte>
    2a52:	0301      	lsls	r1, r0, #12
    2a54:	f000 000f 	and.w	r0, r0, #15
    2a58:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    2a5c:	1c42      	adds	r2, r0, #1
    2a5e:	2301      	movs	r3, #1
    2a60:	430a      	orrs	r2, r1
    2a62:	4628      	mov	r0, r5
    2a64:	4619      	mov	r1, r3
    2a66:	f7ff fcc7 	bl	23f8 <_Unwind_VRS_Pop>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	f43f af0d 	beq.w	288a <__gnu_unwind_execute+0xe>
    2a70:	e731      	b.n	28d6 <__gnu_unwind_execute+0x5a>
    2a72:	4630      	mov	r0, r6
    2a74:	f7ff fed6 	bl	2824 <next_unwind_byte>
    2a78:	0301      	lsls	r1, r0, #12
    2a7a:	f000 000f 	and.w	r0, r0, #15
    2a7e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    2a82:	1c42      	adds	r2, r0, #1
    2a84:	2303      	movs	r3, #3
    2a86:	e7eb      	b.n	2a60 <__gnu_unwind_execute+0x1e4>
    2a88:	4630      	mov	r0, r6
    2a8a:	f7ff fecb 	bl	2824 <next_unwind_byte>
    2a8e:	4602      	mov	r2, r0
    2a90:	2800      	cmp	r0, #0
    2a92:	f43f af20 	beq.w	28d6 <__gnu_unwind_execute+0x5a>
    2a96:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    2a9a:	f47f af1c 	bne.w	28d6 <__gnu_unwind_execute+0x5a>
    2a9e:	2104      	movs	r1, #4
    2aa0:	4628      	mov	r0, r5
    2aa2:	f7ff fca9 	bl	23f8 <_Unwind_VRS_Pop>
    2aa6:	2800      	cmp	r0, #0
    2aa8:	f43f aeef 	beq.w	288a <__gnu_unwind_execute+0xe>
    2aac:	e713      	b.n	28d6 <__gnu_unwind_execute+0x5a>
    2aae:	f000 020f 	and.w	r2, r0, #15
    2ab2:	3201      	adds	r2, #1
    2ab4:	2303      	movs	r3, #3
    2ab6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    2aba:	4619      	mov	r1, r3
    2abc:	4628      	mov	r0, r5
    2abe:	f7ff fc9b 	bl	23f8 <_Unwind_VRS_Pop>
    2ac2:	2800      	cmp	r0, #0
    2ac4:	f43f aee1 	beq.w	288a <__gnu_unwind_execute+0xe>
    2ac8:	e705      	b.n	28d6 <__gnu_unwind_execute+0x5a>
    2aca:	4630      	mov	r0, r6
    2acc:	f7ff feaa 	bl	2824 <next_unwind_byte>
    2ad0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    2ad4:	f000 030f 	and.w	r3, r0, #15
    2ad8:	3210      	adds	r2, #16
    2ada:	3301      	adds	r3, #1
    2adc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    2ae0:	e6f2      	b.n	28c8 <__gnu_unwind_execute+0x4c>
    2ae2:	2300      	movs	r3, #0
    2ae4:	f10d 090c 	add.w	r9, sp, #12
    2ae8:	220d      	movs	r2, #13
    2aea:	4619      	mov	r1, r3
    2aec:	f8cd 9000 	str.w	r9, [sp]
    2af0:	4628      	mov	r0, r5
    2af2:	f7ff fa93 	bl	201c <_Unwind_VRS_Get>
    2af6:	4630      	mov	r0, r6
    2af8:	f7ff fe94 	bl	2824 <next_unwind_byte>
    2afc:	0602      	lsls	r2, r0, #24
    2afe:	f04f 0702 	mov.w	r7, #2
    2b02:	d50c      	bpl.n	2b1e <__gnu_unwind_execute+0x2a2>
    2b04:	9b03      	ldr	r3, [sp, #12]
    2b06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    2b0a:	40b8      	lsls	r0, r7
    2b0c:	4403      	add	r3, r0
    2b0e:	4630      	mov	r0, r6
    2b10:	9303      	str	r3, [sp, #12]
    2b12:	f7ff fe87 	bl	2824 <next_unwind_byte>
    2b16:	0603      	lsls	r3, r0, #24
    2b18:	f107 0707 	add.w	r7, r7, #7
    2b1c:	d4f2      	bmi.n	2b04 <__gnu_unwind_execute+0x288>
    2b1e:	9b03      	ldr	r3, [sp, #12]
    2b20:	f8cd 9000 	str.w	r9, [sp]
    2b24:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    2b28:	f503 7201 	add.w	r2, r3, #516	; 0x204
    2b2c:	40bc      	lsls	r4, r7
    2b2e:	2300      	movs	r3, #0
    2b30:	4414      	add	r4, r2
    2b32:	4619      	mov	r1, r3
    2b34:	220d      	movs	r2, #13
    2b36:	4628      	mov	r0, r5
    2b38:	9403      	str	r4, [sp, #12]
    2b3a:	f7ff fa91 	bl	2060 <_Unwind_VRS_Set>
    2b3e:	e6a4      	b.n	288a <__gnu_unwind_execute+0xe>

00002b40 <__gnu_unwind_frame>:
    2b40:	b510      	push	{r4, lr}
    2b42:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    2b44:	b084      	sub	sp, #16
    2b46:	685a      	ldr	r2, [r3, #4]
    2b48:	2003      	movs	r0, #3
    2b4a:	f88d 000c 	strb.w	r0, [sp, #12]
    2b4e:	79dc      	ldrb	r4, [r3, #7]
    2b50:	f88d 400d 	strb.w	r4, [sp, #13]
    2b54:	0212      	lsls	r2, r2, #8
    2b56:	3308      	adds	r3, #8
    2b58:	4608      	mov	r0, r1
    2b5a:	a901      	add	r1, sp, #4
    2b5c:	9201      	str	r2, [sp, #4]
    2b5e:	9302      	str	r3, [sp, #8]
    2b60:	f7ff fe8c 	bl	287c <__gnu_unwind_execute>
    2b64:	b004      	add	sp, #16
    2b66:	bd10      	pop	{r4, pc}

00002b68 <_Unwind_GetRegionStart>:
    2b68:	b508      	push	{r3, lr}
    2b6a:	f7ff fe85 	bl	2878 <unwind_UCB_from_context>
    2b6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
    2b70:	bd08      	pop	{r3, pc}
    2b72:	bf00      	nop

00002b74 <_Unwind_GetLanguageSpecificData>:
    2b74:	b508      	push	{r3, lr}
    2b76:	f7ff fe7f 	bl	2878 <unwind_UCB_from_context>
    2b7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    2b7c:	79c3      	ldrb	r3, [r0, #7]
    2b7e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2b82:	3008      	adds	r0, #8
    2b84:	bd08      	pop	{r3, pc}
    2b86:	bf00      	nop

00002b88 <_Unwind_GetDataRelBase>:
    2b88:	b508      	push	{r3, lr}
    2b8a:	f000 fff3 	bl	3b74 <abort>
    2b8e:	bf00      	nop

00002b90 <_Unwind_GetTextRelBase>:
    2b90:	b508      	push	{r3, lr}
    2b92:	f7ff fff9 	bl	2b88 <_Unwind_GetDataRelBase>
    2b96:	bf00      	nop

00002b98 <__assert_func>:
    2b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2b9a:	461c      	mov	r4, r3
    2b9c:	4b09      	ldr	r3, [pc, #36]	; (2bc4 <__assert_func+0x2c>)
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	4605      	mov	r5, r0
    2ba2:	68d8      	ldr	r0, [r3, #12]
    2ba4:	b152      	cbz	r2, 2bbc <__assert_func+0x24>
    2ba6:	4b08      	ldr	r3, [pc, #32]	; (2bc8 <__assert_func+0x30>)
    2ba8:	9100      	str	r1, [sp, #0]
    2baa:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2bae:	4907      	ldr	r1, [pc, #28]	; (2bcc <__assert_func+0x34>)
    2bb0:	462b      	mov	r3, r5
    2bb2:	4622      	mov	r2, r4
    2bb4:	f000 f80e 	bl	2bd4 <fiprintf>
    2bb8:	f000 ffdc 	bl	3b74 <abort>
    2bbc:	4b04      	ldr	r3, [pc, #16]	; (2bd0 <__assert_func+0x38>)
    2bbe:	461a      	mov	r2, r3
    2bc0:	e7f2      	b.n	2ba8 <__assert_func+0x10>
    2bc2:	bf00      	nop
    2bc4:	20000004 	.word	0x20000004
    2bc8:	00004308 	.word	0x00004308
    2bcc:	00004315 	.word	0x00004315
    2bd0:	00004343 	.word	0x00004343

00002bd4 <fiprintf>:
    2bd4:	b40e      	push	{r1, r2, r3}
    2bd6:	b503      	push	{r0, r1, lr}
    2bd8:	4601      	mov	r1, r0
    2bda:	ab03      	add	r3, sp, #12
    2bdc:	4805      	ldr	r0, [pc, #20]	; (2bf4 <fiprintf+0x20>)
    2bde:	f853 2b04 	ldr.w	r2, [r3], #4
    2be2:	6800      	ldr	r0, [r0, #0]
    2be4:	9301      	str	r3, [sp, #4]
    2be6:	f000 f8d3 	bl	2d90 <_vfiprintf_r>
    2bea:	b002      	add	sp, #8
    2bec:	f85d eb04 	ldr.w	lr, [sp], #4
    2bf0:	b003      	add	sp, #12
    2bf2:	4770      	bx	lr
    2bf4:	20000004 	.word	0x20000004

00002bf8 <__libc_init_array>:
    2bf8:	b570      	push	{r4, r5, r6, lr}
    2bfa:	4e0d      	ldr	r6, [pc, #52]	; (2c30 <__libc_init_array+0x38>)
    2bfc:	4c0d      	ldr	r4, [pc, #52]	; (2c34 <__libc_init_array+0x3c>)
    2bfe:	1ba4      	subs	r4, r4, r6
    2c00:	10a4      	asrs	r4, r4, #2
    2c02:	2500      	movs	r5, #0
    2c04:	42a5      	cmp	r5, r4
    2c06:	d109      	bne.n	2c1c <__libc_init_array+0x24>
    2c08:	4e0b      	ldr	r6, [pc, #44]	; (2c38 <__libc_init_array+0x40>)
    2c0a:	4c0c      	ldr	r4, [pc, #48]	; (2c3c <__libc_init_array+0x44>)
    2c0c:	f001 fbb4 	bl	4378 <_init>
    2c10:	1ba4      	subs	r4, r4, r6
    2c12:	10a4      	asrs	r4, r4, #2
    2c14:	2500      	movs	r5, #0
    2c16:	42a5      	cmp	r5, r4
    2c18:	d105      	bne.n	2c26 <__libc_init_array+0x2e>
    2c1a:	bd70      	pop	{r4, r5, r6, pc}
    2c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2c20:	4798      	blx	r3
    2c22:	3501      	adds	r5, #1
    2c24:	e7ee      	b.n	2c04 <__libc_init_array+0xc>
    2c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2c2a:	4798      	blx	r3
    2c2c:	3501      	adds	r5, #1
    2c2e:	e7f2      	b.n	2c16 <__libc_init_array+0x1e>
    2c30:	00004388 	.word	0x00004388
    2c34:	00004388 	.word	0x00004388
    2c38:	00004388 	.word	0x00004388
    2c3c:	0000438c 	.word	0x0000438c

00002c40 <_free_r>:
    2c40:	b538      	push	{r3, r4, r5, lr}
    2c42:	4605      	mov	r5, r0
    2c44:	2900      	cmp	r1, #0
    2c46:	d045      	beq.n	2cd4 <_free_r+0x94>
    2c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2c4c:	1f0c      	subs	r4, r1, #4
    2c4e:	2b00      	cmp	r3, #0
    2c50:	bfb8      	it	lt
    2c52:	18e4      	addlt	r4, r4, r3
    2c54:	f001 f8ce 	bl	3df4 <__malloc_lock>
    2c58:	4a1f      	ldr	r2, [pc, #124]	; (2cd8 <_free_r+0x98>)
    2c5a:	6813      	ldr	r3, [r2, #0]
    2c5c:	4610      	mov	r0, r2
    2c5e:	b933      	cbnz	r3, 2c6e <_free_r+0x2e>
    2c60:	6063      	str	r3, [r4, #4]
    2c62:	6014      	str	r4, [r2, #0]
    2c64:	4628      	mov	r0, r5
    2c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c6a:	f001 b8c4 	b.w	3df6 <__malloc_unlock>
    2c6e:	42a3      	cmp	r3, r4
    2c70:	d90c      	bls.n	2c8c <_free_r+0x4c>
    2c72:	6821      	ldr	r1, [r4, #0]
    2c74:	1862      	adds	r2, r4, r1
    2c76:	4293      	cmp	r3, r2
    2c78:	bf04      	itt	eq
    2c7a:	681a      	ldreq	r2, [r3, #0]
    2c7c:	685b      	ldreq	r3, [r3, #4]
    2c7e:	6063      	str	r3, [r4, #4]
    2c80:	bf04      	itt	eq
    2c82:	1852      	addeq	r2, r2, r1
    2c84:	6022      	streq	r2, [r4, #0]
    2c86:	6004      	str	r4, [r0, #0]
    2c88:	e7ec      	b.n	2c64 <_free_r+0x24>
    2c8a:	4613      	mov	r3, r2
    2c8c:	685a      	ldr	r2, [r3, #4]
    2c8e:	b10a      	cbz	r2, 2c94 <_free_r+0x54>
    2c90:	42a2      	cmp	r2, r4
    2c92:	d9fa      	bls.n	2c8a <_free_r+0x4a>
    2c94:	6819      	ldr	r1, [r3, #0]
    2c96:	1858      	adds	r0, r3, r1
    2c98:	42a0      	cmp	r0, r4
    2c9a:	d10b      	bne.n	2cb4 <_free_r+0x74>
    2c9c:	6820      	ldr	r0, [r4, #0]
    2c9e:	4401      	add	r1, r0
    2ca0:	1858      	adds	r0, r3, r1
    2ca2:	4282      	cmp	r2, r0
    2ca4:	6019      	str	r1, [r3, #0]
    2ca6:	d1dd      	bne.n	2c64 <_free_r+0x24>
    2ca8:	6810      	ldr	r0, [r2, #0]
    2caa:	6852      	ldr	r2, [r2, #4]
    2cac:	605a      	str	r2, [r3, #4]
    2cae:	4401      	add	r1, r0
    2cb0:	6019      	str	r1, [r3, #0]
    2cb2:	e7d7      	b.n	2c64 <_free_r+0x24>
    2cb4:	d902      	bls.n	2cbc <_free_r+0x7c>
    2cb6:	230c      	movs	r3, #12
    2cb8:	602b      	str	r3, [r5, #0]
    2cba:	e7d3      	b.n	2c64 <_free_r+0x24>
    2cbc:	6820      	ldr	r0, [r4, #0]
    2cbe:	1821      	adds	r1, r4, r0
    2cc0:	428a      	cmp	r2, r1
    2cc2:	bf04      	itt	eq
    2cc4:	6811      	ldreq	r1, [r2, #0]
    2cc6:	6852      	ldreq	r2, [r2, #4]
    2cc8:	6062      	str	r2, [r4, #4]
    2cca:	bf04      	itt	eq
    2ccc:	1809      	addeq	r1, r1, r0
    2cce:	6021      	streq	r1, [r4, #0]
    2cd0:	605c      	str	r4, [r3, #4]
    2cd2:	e7c7      	b.n	2c64 <_free_r+0x24>
    2cd4:	bd38      	pop	{r3, r4, r5, pc}
    2cd6:	bf00      	nop
    2cd8:	20000084 	.word	0x20000084

00002cdc <_malloc_r>:
    2cdc:	b570      	push	{r4, r5, r6, lr}
    2cde:	1ccd      	adds	r5, r1, #3
    2ce0:	f025 0503 	bic.w	r5, r5, #3
    2ce4:	3508      	adds	r5, #8
    2ce6:	2d0c      	cmp	r5, #12
    2ce8:	bf38      	it	cc
    2cea:	250c      	movcc	r5, #12
    2cec:	2d00      	cmp	r5, #0
    2cee:	4606      	mov	r6, r0
    2cf0:	db01      	blt.n	2cf6 <_malloc_r+0x1a>
    2cf2:	42a9      	cmp	r1, r5
    2cf4:	d903      	bls.n	2cfe <_malloc_r+0x22>
    2cf6:	230c      	movs	r3, #12
    2cf8:	6033      	str	r3, [r6, #0]
    2cfa:	2000      	movs	r0, #0
    2cfc:	bd70      	pop	{r4, r5, r6, pc}
    2cfe:	f001 f879 	bl	3df4 <__malloc_lock>
    2d02:	4a21      	ldr	r2, [pc, #132]	; (2d88 <_malloc_r+0xac>)
    2d04:	6814      	ldr	r4, [r2, #0]
    2d06:	4621      	mov	r1, r4
    2d08:	b991      	cbnz	r1, 2d30 <_malloc_r+0x54>
    2d0a:	4c20      	ldr	r4, [pc, #128]	; (2d8c <_malloc_r+0xb0>)
    2d0c:	6823      	ldr	r3, [r4, #0]
    2d0e:	b91b      	cbnz	r3, 2d18 <_malloc_r+0x3c>
    2d10:	4630      	mov	r0, r6
    2d12:	f000 fa63 	bl	31dc <_sbrk_r>
    2d16:	6020      	str	r0, [r4, #0]
    2d18:	4629      	mov	r1, r5
    2d1a:	4630      	mov	r0, r6
    2d1c:	f000 fa5e 	bl	31dc <_sbrk_r>
    2d20:	1c43      	adds	r3, r0, #1
    2d22:	d124      	bne.n	2d6e <_malloc_r+0x92>
    2d24:	230c      	movs	r3, #12
    2d26:	6033      	str	r3, [r6, #0]
    2d28:	4630      	mov	r0, r6
    2d2a:	f001 f864 	bl	3df6 <__malloc_unlock>
    2d2e:	e7e4      	b.n	2cfa <_malloc_r+0x1e>
    2d30:	680b      	ldr	r3, [r1, #0]
    2d32:	1b5b      	subs	r3, r3, r5
    2d34:	d418      	bmi.n	2d68 <_malloc_r+0x8c>
    2d36:	2b0b      	cmp	r3, #11
    2d38:	d90f      	bls.n	2d5a <_malloc_r+0x7e>
    2d3a:	600b      	str	r3, [r1, #0]
    2d3c:	50cd      	str	r5, [r1, r3]
    2d3e:	18cc      	adds	r4, r1, r3
    2d40:	4630      	mov	r0, r6
    2d42:	f001 f858 	bl	3df6 <__malloc_unlock>
    2d46:	f104 000b 	add.w	r0, r4, #11
    2d4a:	1d23      	adds	r3, r4, #4
    2d4c:	f020 0007 	bic.w	r0, r0, #7
    2d50:	1ac3      	subs	r3, r0, r3
    2d52:	d0d3      	beq.n	2cfc <_malloc_r+0x20>
    2d54:	425a      	negs	r2, r3
    2d56:	50e2      	str	r2, [r4, r3]
    2d58:	e7d0      	b.n	2cfc <_malloc_r+0x20>
    2d5a:	428c      	cmp	r4, r1
    2d5c:	684b      	ldr	r3, [r1, #4]
    2d5e:	bf16      	itet	ne
    2d60:	6063      	strne	r3, [r4, #4]
    2d62:	6013      	streq	r3, [r2, #0]
    2d64:	460c      	movne	r4, r1
    2d66:	e7eb      	b.n	2d40 <_malloc_r+0x64>
    2d68:	460c      	mov	r4, r1
    2d6a:	6849      	ldr	r1, [r1, #4]
    2d6c:	e7cc      	b.n	2d08 <_malloc_r+0x2c>
    2d6e:	1cc4      	adds	r4, r0, #3
    2d70:	f024 0403 	bic.w	r4, r4, #3
    2d74:	42a0      	cmp	r0, r4
    2d76:	d005      	beq.n	2d84 <_malloc_r+0xa8>
    2d78:	1a21      	subs	r1, r4, r0
    2d7a:	4630      	mov	r0, r6
    2d7c:	f000 fa2e 	bl	31dc <_sbrk_r>
    2d80:	3001      	adds	r0, #1
    2d82:	d0cf      	beq.n	2d24 <_malloc_r+0x48>
    2d84:	6025      	str	r5, [r4, #0]
    2d86:	e7db      	b.n	2d40 <_malloc_r+0x64>
    2d88:	20000084 	.word	0x20000084
    2d8c:	20000088 	.word	0x20000088

00002d90 <_vfiprintf_r>:
    2d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d94:	b09d      	sub	sp, #116	; 0x74
    2d96:	460c      	mov	r4, r1
    2d98:	4617      	mov	r7, r2
    2d9a:	9303      	str	r3, [sp, #12]
    2d9c:	4606      	mov	r6, r0
    2d9e:	b118      	cbz	r0, 2da8 <_vfiprintf_r+0x18>
    2da0:	6983      	ldr	r3, [r0, #24]
    2da2:	b90b      	cbnz	r3, 2da8 <_vfiprintf_r+0x18>
    2da4:	f000 fbde 	bl	3564 <__sinit>
    2da8:	4b7b      	ldr	r3, [pc, #492]	; (2f98 <_vfiprintf_r+0x208>)
    2daa:	429c      	cmp	r4, r3
    2dac:	d157      	bne.n	2e5e <_vfiprintf_r+0xce>
    2dae:	6874      	ldr	r4, [r6, #4]
    2db0:	89a3      	ldrh	r3, [r4, #12]
    2db2:	0718      	lsls	r0, r3, #28
    2db4:	d55d      	bpl.n	2e72 <_vfiprintf_r+0xe2>
    2db6:	6923      	ldr	r3, [r4, #16]
    2db8:	2b00      	cmp	r3, #0
    2dba:	d05a      	beq.n	2e72 <_vfiprintf_r+0xe2>
    2dbc:	2300      	movs	r3, #0
    2dbe:	9309      	str	r3, [sp, #36]	; 0x24
    2dc0:	2320      	movs	r3, #32
    2dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2dc6:	2330      	movs	r3, #48	; 0x30
    2dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2dcc:	f04f 0b01 	mov.w	fp, #1
    2dd0:	46b8      	mov	r8, r7
    2dd2:	4645      	mov	r5, r8
    2dd4:	f815 3b01 	ldrb.w	r3, [r5], #1
    2dd8:	b10b      	cbz	r3, 2dde <_vfiprintf_r+0x4e>
    2dda:	2b25      	cmp	r3, #37	; 0x25
    2ddc:	d154      	bne.n	2e88 <_vfiprintf_r+0xf8>
    2dde:	ebb8 0a07 	subs.w	sl, r8, r7
    2de2:	d00b      	beq.n	2dfc <_vfiprintf_r+0x6c>
    2de4:	4653      	mov	r3, sl
    2de6:	463a      	mov	r2, r7
    2de8:	4621      	mov	r1, r4
    2dea:	4630      	mov	r0, r6
    2dec:	f000 fef1 	bl	3bd2 <__sfputs_r>
    2df0:	3001      	adds	r0, #1
    2df2:	f000 80c2 	beq.w	2f7a <_vfiprintf_r+0x1ea>
    2df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2df8:	4453      	add	r3, sl
    2dfa:	9309      	str	r3, [sp, #36]	; 0x24
    2dfc:	f898 3000 	ldrb.w	r3, [r8]
    2e00:	2b00      	cmp	r3, #0
    2e02:	f000 80ba 	beq.w	2f7a <_vfiprintf_r+0x1ea>
    2e06:	2300      	movs	r3, #0
    2e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    2e10:	9304      	str	r3, [sp, #16]
    2e12:	9307      	str	r3, [sp, #28]
    2e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2e18:	931a      	str	r3, [sp, #104]	; 0x68
    2e1a:	46a8      	mov	r8, r5
    2e1c:	2205      	movs	r2, #5
    2e1e:	f818 1b01 	ldrb.w	r1, [r8], #1
    2e22:	485e      	ldr	r0, [pc, #376]	; (2f9c <_vfiprintf_r+0x20c>)
    2e24:	f7fd faf4 	bl	410 <memchr>
    2e28:	9b04      	ldr	r3, [sp, #16]
    2e2a:	bb78      	cbnz	r0, 2e8c <_vfiprintf_r+0xfc>
    2e2c:	06d9      	lsls	r1, r3, #27
    2e2e:	bf44      	itt	mi
    2e30:	2220      	movmi	r2, #32
    2e32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2e36:	071a      	lsls	r2, r3, #28
    2e38:	bf44      	itt	mi
    2e3a:	222b      	movmi	r2, #43	; 0x2b
    2e3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2e40:	782a      	ldrb	r2, [r5, #0]
    2e42:	2a2a      	cmp	r2, #42	; 0x2a
    2e44:	d02a      	beq.n	2e9c <_vfiprintf_r+0x10c>
    2e46:	9a07      	ldr	r2, [sp, #28]
    2e48:	46a8      	mov	r8, r5
    2e4a:	2000      	movs	r0, #0
    2e4c:	250a      	movs	r5, #10
    2e4e:	4641      	mov	r1, r8
    2e50:	f811 3b01 	ldrb.w	r3, [r1], #1
    2e54:	3b30      	subs	r3, #48	; 0x30
    2e56:	2b09      	cmp	r3, #9
    2e58:	d969      	bls.n	2f2e <_vfiprintf_r+0x19e>
    2e5a:	b360      	cbz	r0, 2eb6 <_vfiprintf_r+0x126>
    2e5c:	e024      	b.n	2ea8 <_vfiprintf_r+0x118>
    2e5e:	4b50      	ldr	r3, [pc, #320]	; (2fa0 <_vfiprintf_r+0x210>)
    2e60:	429c      	cmp	r4, r3
    2e62:	d101      	bne.n	2e68 <_vfiprintf_r+0xd8>
    2e64:	68b4      	ldr	r4, [r6, #8]
    2e66:	e7a3      	b.n	2db0 <_vfiprintf_r+0x20>
    2e68:	4b4e      	ldr	r3, [pc, #312]	; (2fa4 <_vfiprintf_r+0x214>)
    2e6a:	429c      	cmp	r4, r3
    2e6c:	bf08      	it	eq
    2e6e:	68f4      	ldreq	r4, [r6, #12]
    2e70:	e79e      	b.n	2db0 <_vfiprintf_r+0x20>
    2e72:	4621      	mov	r1, r4
    2e74:	4630      	mov	r0, r6
    2e76:	f000 fa2d 	bl	32d4 <__swsetup_r>
    2e7a:	2800      	cmp	r0, #0
    2e7c:	d09e      	beq.n	2dbc <_vfiprintf_r+0x2c>
    2e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e82:	b01d      	add	sp, #116	; 0x74
    2e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e88:	46a8      	mov	r8, r5
    2e8a:	e7a2      	b.n	2dd2 <_vfiprintf_r+0x42>
    2e8c:	4a43      	ldr	r2, [pc, #268]	; (2f9c <_vfiprintf_r+0x20c>)
    2e8e:	1a80      	subs	r0, r0, r2
    2e90:	fa0b f000 	lsl.w	r0, fp, r0
    2e94:	4318      	orrs	r0, r3
    2e96:	9004      	str	r0, [sp, #16]
    2e98:	4645      	mov	r5, r8
    2e9a:	e7be      	b.n	2e1a <_vfiprintf_r+0x8a>
    2e9c:	9a03      	ldr	r2, [sp, #12]
    2e9e:	1d11      	adds	r1, r2, #4
    2ea0:	6812      	ldr	r2, [r2, #0]
    2ea2:	9103      	str	r1, [sp, #12]
    2ea4:	2a00      	cmp	r2, #0
    2ea6:	db01      	blt.n	2eac <_vfiprintf_r+0x11c>
    2ea8:	9207      	str	r2, [sp, #28]
    2eaa:	e004      	b.n	2eb6 <_vfiprintf_r+0x126>
    2eac:	4252      	negs	r2, r2
    2eae:	f043 0302 	orr.w	r3, r3, #2
    2eb2:	9207      	str	r2, [sp, #28]
    2eb4:	9304      	str	r3, [sp, #16]
    2eb6:	f898 3000 	ldrb.w	r3, [r8]
    2eba:	2b2e      	cmp	r3, #46	; 0x2e
    2ebc:	d10e      	bne.n	2edc <_vfiprintf_r+0x14c>
    2ebe:	f898 3001 	ldrb.w	r3, [r8, #1]
    2ec2:	2b2a      	cmp	r3, #42	; 0x2a
    2ec4:	d138      	bne.n	2f38 <_vfiprintf_r+0x1a8>
    2ec6:	9b03      	ldr	r3, [sp, #12]
    2ec8:	1d1a      	adds	r2, r3, #4
    2eca:	681b      	ldr	r3, [r3, #0]
    2ecc:	9203      	str	r2, [sp, #12]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	bfb8      	it	lt
    2ed2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    2ed6:	f108 0802 	add.w	r8, r8, #2
    2eda:	9305      	str	r3, [sp, #20]
    2edc:	4d32      	ldr	r5, [pc, #200]	; (2fa8 <_vfiprintf_r+0x218>)
    2ede:	f898 1000 	ldrb.w	r1, [r8]
    2ee2:	2203      	movs	r2, #3
    2ee4:	4628      	mov	r0, r5
    2ee6:	f7fd fa93 	bl	410 <memchr>
    2eea:	b140      	cbz	r0, 2efe <_vfiprintf_r+0x16e>
    2eec:	2340      	movs	r3, #64	; 0x40
    2eee:	1b40      	subs	r0, r0, r5
    2ef0:	fa03 f000 	lsl.w	r0, r3, r0
    2ef4:	9b04      	ldr	r3, [sp, #16]
    2ef6:	4303      	orrs	r3, r0
    2ef8:	f108 0801 	add.w	r8, r8, #1
    2efc:	9304      	str	r3, [sp, #16]
    2efe:	f898 1000 	ldrb.w	r1, [r8]
    2f02:	482a      	ldr	r0, [pc, #168]	; (2fac <_vfiprintf_r+0x21c>)
    2f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2f08:	2206      	movs	r2, #6
    2f0a:	f108 0701 	add.w	r7, r8, #1
    2f0e:	f7fd fa7f 	bl	410 <memchr>
    2f12:	2800      	cmp	r0, #0
    2f14:	d037      	beq.n	2f86 <_vfiprintf_r+0x1f6>
    2f16:	4b26      	ldr	r3, [pc, #152]	; (2fb0 <_vfiprintf_r+0x220>)
    2f18:	bb1b      	cbnz	r3, 2f62 <_vfiprintf_r+0x1d2>
    2f1a:	9b03      	ldr	r3, [sp, #12]
    2f1c:	3307      	adds	r3, #7
    2f1e:	f023 0307 	bic.w	r3, r3, #7
    2f22:	3308      	adds	r3, #8
    2f24:	9303      	str	r3, [sp, #12]
    2f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f28:	444b      	add	r3, r9
    2f2a:	9309      	str	r3, [sp, #36]	; 0x24
    2f2c:	e750      	b.n	2dd0 <_vfiprintf_r+0x40>
    2f2e:	fb05 3202 	mla	r2, r5, r2, r3
    2f32:	2001      	movs	r0, #1
    2f34:	4688      	mov	r8, r1
    2f36:	e78a      	b.n	2e4e <_vfiprintf_r+0xbe>
    2f38:	2300      	movs	r3, #0
    2f3a:	f108 0801 	add.w	r8, r8, #1
    2f3e:	9305      	str	r3, [sp, #20]
    2f40:	4619      	mov	r1, r3
    2f42:	250a      	movs	r5, #10
    2f44:	4640      	mov	r0, r8
    2f46:	f810 2b01 	ldrb.w	r2, [r0], #1
    2f4a:	3a30      	subs	r2, #48	; 0x30
    2f4c:	2a09      	cmp	r2, #9
    2f4e:	d903      	bls.n	2f58 <_vfiprintf_r+0x1c8>
    2f50:	2b00      	cmp	r3, #0
    2f52:	d0c3      	beq.n	2edc <_vfiprintf_r+0x14c>
    2f54:	9105      	str	r1, [sp, #20]
    2f56:	e7c1      	b.n	2edc <_vfiprintf_r+0x14c>
    2f58:	fb05 2101 	mla	r1, r5, r1, r2
    2f5c:	2301      	movs	r3, #1
    2f5e:	4680      	mov	r8, r0
    2f60:	e7f0      	b.n	2f44 <_vfiprintf_r+0x1b4>
    2f62:	ab03      	add	r3, sp, #12
    2f64:	9300      	str	r3, [sp, #0]
    2f66:	4622      	mov	r2, r4
    2f68:	4b12      	ldr	r3, [pc, #72]	; (2fb4 <_vfiprintf_r+0x224>)
    2f6a:	a904      	add	r1, sp, #16
    2f6c:	4630      	mov	r0, r6
    2f6e:	f3af 8000 	nop.w
    2f72:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2f76:	4681      	mov	r9, r0
    2f78:	d1d5      	bne.n	2f26 <_vfiprintf_r+0x196>
    2f7a:	89a3      	ldrh	r3, [r4, #12]
    2f7c:	065b      	lsls	r3, r3, #25
    2f7e:	f53f af7e 	bmi.w	2e7e <_vfiprintf_r+0xee>
    2f82:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f84:	e77d      	b.n	2e82 <_vfiprintf_r+0xf2>
    2f86:	ab03      	add	r3, sp, #12
    2f88:	9300      	str	r3, [sp, #0]
    2f8a:	4622      	mov	r2, r4
    2f8c:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <_vfiprintf_r+0x224>)
    2f8e:	a904      	add	r1, sp, #16
    2f90:	4630      	mov	r0, r6
    2f92:	f000 f811 	bl	2fb8 <_printf_i>
    2f96:	e7ec      	b.n	2f72 <_vfiprintf_r+0x1e2>
    2f98:	000042c8 	.word	0x000042c8
    2f9c:	00004344 	.word	0x00004344
    2fa0:	000042e8 	.word	0x000042e8
    2fa4:	000042a8 	.word	0x000042a8
    2fa8:	0000434a 	.word	0x0000434a
    2fac:	0000434e 	.word	0x0000434e
    2fb0:	00000000 	.word	0x00000000
    2fb4:	00003bd3 	.word	0x00003bd3

00002fb8 <_printf_i>:
    2fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    2fc0:	460c      	mov	r4, r1
    2fc2:	7e09      	ldrb	r1, [r1, #24]
    2fc4:	b085      	sub	sp, #20
    2fc6:	296e      	cmp	r1, #110	; 0x6e
    2fc8:	4617      	mov	r7, r2
    2fca:	4606      	mov	r6, r0
    2fcc:	4698      	mov	r8, r3
    2fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2fd0:	f000 80b3 	beq.w	313a <_printf_i+0x182>
    2fd4:	d822      	bhi.n	301c <_printf_i+0x64>
    2fd6:	2963      	cmp	r1, #99	; 0x63
    2fd8:	d036      	beq.n	3048 <_printf_i+0x90>
    2fda:	d80a      	bhi.n	2ff2 <_printf_i+0x3a>
    2fdc:	2900      	cmp	r1, #0
    2fde:	f000 80b9 	beq.w	3154 <_printf_i+0x19c>
    2fe2:	2958      	cmp	r1, #88	; 0x58
    2fe4:	f000 8083 	beq.w	30ee <_printf_i+0x136>
    2fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2ff0:	e032      	b.n	3058 <_printf_i+0xa0>
    2ff2:	2964      	cmp	r1, #100	; 0x64
    2ff4:	d001      	beq.n	2ffa <_printf_i+0x42>
    2ff6:	2969      	cmp	r1, #105	; 0x69
    2ff8:	d1f6      	bne.n	2fe8 <_printf_i+0x30>
    2ffa:	6820      	ldr	r0, [r4, #0]
    2ffc:	6813      	ldr	r3, [r2, #0]
    2ffe:	0605      	lsls	r5, r0, #24
    3000:	f103 0104 	add.w	r1, r3, #4
    3004:	d52a      	bpl.n	305c <_printf_i+0xa4>
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	6011      	str	r1, [r2, #0]
    300a:	2b00      	cmp	r3, #0
    300c:	da03      	bge.n	3016 <_printf_i+0x5e>
    300e:	222d      	movs	r2, #45	; 0x2d
    3010:	425b      	negs	r3, r3
    3012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3016:	486f      	ldr	r0, [pc, #444]	; (31d4 <_printf_i+0x21c>)
    3018:	220a      	movs	r2, #10
    301a:	e039      	b.n	3090 <_printf_i+0xd8>
    301c:	2973      	cmp	r1, #115	; 0x73
    301e:	f000 809d 	beq.w	315c <_printf_i+0x1a4>
    3022:	d808      	bhi.n	3036 <_printf_i+0x7e>
    3024:	296f      	cmp	r1, #111	; 0x6f
    3026:	d020      	beq.n	306a <_printf_i+0xb2>
    3028:	2970      	cmp	r1, #112	; 0x70
    302a:	d1dd      	bne.n	2fe8 <_printf_i+0x30>
    302c:	6823      	ldr	r3, [r4, #0]
    302e:	f043 0320 	orr.w	r3, r3, #32
    3032:	6023      	str	r3, [r4, #0]
    3034:	e003      	b.n	303e <_printf_i+0x86>
    3036:	2975      	cmp	r1, #117	; 0x75
    3038:	d017      	beq.n	306a <_printf_i+0xb2>
    303a:	2978      	cmp	r1, #120	; 0x78
    303c:	d1d4      	bne.n	2fe8 <_printf_i+0x30>
    303e:	2378      	movs	r3, #120	; 0x78
    3040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    3044:	4864      	ldr	r0, [pc, #400]	; (31d8 <_printf_i+0x220>)
    3046:	e055      	b.n	30f4 <_printf_i+0x13c>
    3048:	6813      	ldr	r3, [r2, #0]
    304a:	1d19      	adds	r1, r3, #4
    304c:	681b      	ldr	r3, [r3, #0]
    304e:	6011      	str	r1, [r2, #0]
    3050:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3058:	2301      	movs	r3, #1
    305a:	e08c      	b.n	3176 <_printf_i+0x1be>
    305c:	681b      	ldr	r3, [r3, #0]
    305e:	6011      	str	r1, [r2, #0]
    3060:	f010 0f40 	tst.w	r0, #64	; 0x40
    3064:	bf18      	it	ne
    3066:	b21b      	sxthne	r3, r3
    3068:	e7cf      	b.n	300a <_printf_i+0x52>
    306a:	6813      	ldr	r3, [r2, #0]
    306c:	6825      	ldr	r5, [r4, #0]
    306e:	1d18      	adds	r0, r3, #4
    3070:	6010      	str	r0, [r2, #0]
    3072:	0628      	lsls	r0, r5, #24
    3074:	d501      	bpl.n	307a <_printf_i+0xc2>
    3076:	681b      	ldr	r3, [r3, #0]
    3078:	e002      	b.n	3080 <_printf_i+0xc8>
    307a:	0668      	lsls	r0, r5, #25
    307c:	d5fb      	bpl.n	3076 <_printf_i+0xbe>
    307e:	881b      	ldrh	r3, [r3, #0]
    3080:	4854      	ldr	r0, [pc, #336]	; (31d4 <_printf_i+0x21c>)
    3082:	296f      	cmp	r1, #111	; 0x6f
    3084:	bf14      	ite	ne
    3086:	220a      	movne	r2, #10
    3088:	2208      	moveq	r2, #8
    308a:	2100      	movs	r1, #0
    308c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    3090:	6865      	ldr	r5, [r4, #4]
    3092:	60a5      	str	r5, [r4, #8]
    3094:	2d00      	cmp	r5, #0
    3096:	f2c0 8095 	blt.w	31c4 <_printf_i+0x20c>
    309a:	6821      	ldr	r1, [r4, #0]
    309c:	f021 0104 	bic.w	r1, r1, #4
    30a0:	6021      	str	r1, [r4, #0]
    30a2:	2b00      	cmp	r3, #0
    30a4:	d13d      	bne.n	3122 <_printf_i+0x16a>
    30a6:	2d00      	cmp	r5, #0
    30a8:	f040 808e 	bne.w	31c8 <_printf_i+0x210>
    30ac:	4665      	mov	r5, ip
    30ae:	2a08      	cmp	r2, #8
    30b0:	d10b      	bne.n	30ca <_printf_i+0x112>
    30b2:	6823      	ldr	r3, [r4, #0]
    30b4:	07db      	lsls	r3, r3, #31
    30b6:	d508      	bpl.n	30ca <_printf_i+0x112>
    30b8:	6923      	ldr	r3, [r4, #16]
    30ba:	6862      	ldr	r2, [r4, #4]
    30bc:	429a      	cmp	r2, r3
    30be:	bfde      	ittt	le
    30c0:	2330      	movle	r3, #48	; 0x30
    30c2:	f805 3c01 	strble.w	r3, [r5, #-1]
    30c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    30ca:	ebac 0305 	sub.w	r3, ip, r5
    30ce:	6123      	str	r3, [r4, #16]
    30d0:	f8cd 8000 	str.w	r8, [sp]
    30d4:	463b      	mov	r3, r7
    30d6:	aa03      	add	r2, sp, #12
    30d8:	4621      	mov	r1, r4
    30da:	4630      	mov	r0, r6
    30dc:	f000 fd8b 	bl	3bf6 <_printf_common>
    30e0:	3001      	adds	r0, #1
    30e2:	d14d      	bne.n	3180 <_printf_i+0x1c8>
    30e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30e8:	b005      	add	sp, #20
    30ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    30ee:	4839      	ldr	r0, [pc, #228]	; (31d4 <_printf_i+0x21c>)
    30f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    30f4:	6813      	ldr	r3, [r2, #0]
    30f6:	6821      	ldr	r1, [r4, #0]
    30f8:	1d1d      	adds	r5, r3, #4
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	6015      	str	r5, [r2, #0]
    30fe:	060a      	lsls	r2, r1, #24
    3100:	d50b      	bpl.n	311a <_printf_i+0x162>
    3102:	07ca      	lsls	r2, r1, #31
    3104:	bf44      	itt	mi
    3106:	f041 0120 	orrmi.w	r1, r1, #32
    310a:	6021      	strmi	r1, [r4, #0]
    310c:	b91b      	cbnz	r3, 3116 <_printf_i+0x15e>
    310e:	6822      	ldr	r2, [r4, #0]
    3110:	f022 0220 	bic.w	r2, r2, #32
    3114:	6022      	str	r2, [r4, #0]
    3116:	2210      	movs	r2, #16
    3118:	e7b7      	b.n	308a <_printf_i+0xd2>
    311a:	064d      	lsls	r5, r1, #25
    311c:	bf48      	it	mi
    311e:	b29b      	uxthmi	r3, r3
    3120:	e7ef      	b.n	3102 <_printf_i+0x14a>
    3122:	4665      	mov	r5, ip
    3124:	fbb3 f1f2 	udiv	r1, r3, r2
    3128:	fb02 3311 	mls	r3, r2, r1, r3
    312c:	5cc3      	ldrb	r3, [r0, r3]
    312e:	f805 3d01 	strb.w	r3, [r5, #-1]!
    3132:	460b      	mov	r3, r1
    3134:	2900      	cmp	r1, #0
    3136:	d1f5      	bne.n	3124 <_printf_i+0x16c>
    3138:	e7b9      	b.n	30ae <_printf_i+0xf6>
    313a:	6813      	ldr	r3, [r2, #0]
    313c:	6825      	ldr	r5, [r4, #0]
    313e:	6961      	ldr	r1, [r4, #20]
    3140:	1d18      	adds	r0, r3, #4
    3142:	6010      	str	r0, [r2, #0]
    3144:	0628      	lsls	r0, r5, #24
    3146:	681b      	ldr	r3, [r3, #0]
    3148:	d501      	bpl.n	314e <_printf_i+0x196>
    314a:	6019      	str	r1, [r3, #0]
    314c:	e002      	b.n	3154 <_printf_i+0x19c>
    314e:	066a      	lsls	r2, r5, #25
    3150:	d5fb      	bpl.n	314a <_printf_i+0x192>
    3152:	8019      	strh	r1, [r3, #0]
    3154:	2300      	movs	r3, #0
    3156:	6123      	str	r3, [r4, #16]
    3158:	4665      	mov	r5, ip
    315a:	e7b9      	b.n	30d0 <_printf_i+0x118>
    315c:	6813      	ldr	r3, [r2, #0]
    315e:	1d19      	adds	r1, r3, #4
    3160:	6011      	str	r1, [r2, #0]
    3162:	681d      	ldr	r5, [r3, #0]
    3164:	6862      	ldr	r2, [r4, #4]
    3166:	2100      	movs	r1, #0
    3168:	4628      	mov	r0, r5
    316a:	f7fd f951 	bl	410 <memchr>
    316e:	b108      	cbz	r0, 3174 <_printf_i+0x1bc>
    3170:	1b40      	subs	r0, r0, r5
    3172:	6060      	str	r0, [r4, #4]
    3174:	6863      	ldr	r3, [r4, #4]
    3176:	6123      	str	r3, [r4, #16]
    3178:	2300      	movs	r3, #0
    317a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    317e:	e7a7      	b.n	30d0 <_printf_i+0x118>
    3180:	6923      	ldr	r3, [r4, #16]
    3182:	462a      	mov	r2, r5
    3184:	4639      	mov	r1, r7
    3186:	4630      	mov	r0, r6
    3188:	47c0      	blx	r8
    318a:	3001      	adds	r0, #1
    318c:	d0aa      	beq.n	30e4 <_printf_i+0x12c>
    318e:	6823      	ldr	r3, [r4, #0]
    3190:	079b      	lsls	r3, r3, #30
    3192:	d413      	bmi.n	31bc <_printf_i+0x204>
    3194:	68e0      	ldr	r0, [r4, #12]
    3196:	9b03      	ldr	r3, [sp, #12]
    3198:	4298      	cmp	r0, r3
    319a:	bfb8      	it	lt
    319c:	4618      	movlt	r0, r3
    319e:	e7a3      	b.n	30e8 <_printf_i+0x130>
    31a0:	2301      	movs	r3, #1
    31a2:	464a      	mov	r2, r9
    31a4:	4639      	mov	r1, r7
    31a6:	4630      	mov	r0, r6
    31a8:	47c0      	blx	r8
    31aa:	3001      	adds	r0, #1
    31ac:	d09a      	beq.n	30e4 <_printf_i+0x12c>
    31ae:	3501      	adds	r5, #1
    31b0:	68e3      	ldr	r3, [r4, #12]
    31b2:	9a03      	ldr	r2, [sp, #12]
    31b4:	1a9b      	subs	r3, r3, r2
    31b6:	42ab      	cmp	r3, r5
    31b8:	dcf2      	bgt.n	31a0 <_printf_i+0x1e8>
    31ba:	e7eb      	b.n	3194 <_printf_i+0x1dc>
    31bc:	2500      	movs	r5, #0
    31be:	f104 0919 	add.w	r9, r4, #25
    31c2:	e7f5      	b.n	31b0 <_printf_i+0x1f8>
    31c4:	2b00      	cmp	r3, #0
    31c6:	d1ac      	bne.n	3122 <_printf_i+0x16a>
    31c8:	7803      	ldrb	r3, [r0, #0]
    31ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    31ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
    31d2:	e76c      	b.n	30ae <_printf_i+0xf6>
    31d4:	00004355 	.word	0x00004355
    31d8:	00004366 	.word	0x00004366

000031dc <_sbrk_r>:
    31dc:	b538      	push	{r3, r4, r5, lr}
    31de:	4c06      	ldr	r4, [pc, #24]	; (31f8 <_sbrk_r+0x1c>)
    31e0:	2300      	movs	r3, #0
    31e2:	4605      	mov	r5, r0
    31e4:	4608      	mov	r0, r1
    31e6:	6023      	str	r3, [r4, #0]
    31e8:	f000 fad0 	bl	378c <_sbrk>
    31ec:	1c43      	adds	r3, r0, #1
    31ee:	d102      	bne.n	31f6 <_sbrk_r+0x1a>
    31f0:	6823      	ldr	r3, [r4, #0]
    31f2:	b103      	cbz	r3, 31f6 <_sbrk_r+0x1a>
    31f4:	602b      	str	r3, [r5, #0]
    31f6:	bd38      	pop	{r3, r4, r5, pc}
    31f8:	200000ac 	.word	0x200000ac

000031fc <raise>:
    31fc:	4b02      	ldr	r3, [pc, #8]	; (3208 <raise+0xc>)
    31fe:	4601      	mov	r1, r0
    3200:	6818      	ldr	r0, [r3, #0]
    3202:	f000 bd6d 	b.w	3ce0 <_raise_r>
    3206:	bf00      	nop
    3208:	20000004 	.word	0x20000004

0000320c <_kill_r>:
    320c:	b538      	push	{r3, r4, r5, lr}
    320e:	4c07      	ldr	r4, [pc, #28]	; (322c <_kill_r+0x20>)
    3210:	2300      	movs	r3, #0
    3212:	4605      	mov	r5, r0
    3214:	4608      	mov	r0, r1
    3216:	4611      	mov	r1, r2
    3218:	6023      	str	r3, [r4, #0]
    321a:	f000 faf5 	bl	3808 <_kill>
    321e:	1c43      	adds	r3, r0, #1
    3220:	d102      	bne.n	3228 <_kill_r+0x1c>
    3222:	6823      	ldr	r3, [r4, #0]
    3224:	b103      	cbz	r3, 3228 <_kill_r+0x1c>
    3226:	602b      	str	r3, [r5, #0]
    3228:	bd38      	pop	{r3, r4, r5, pc}
    322a:	bf00      	nop
    322c:	200000ac 	.word	0x200000ac

00003230 <__swbuf_r>:
    3230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3232:	460e      	mov	r6, r1
    3234:	4614      	mov	r4, r2
    3236:	4605      	mov	r5, r0
    3238:	b118      	cbz	r0, 3242 <__swbuf_r+0x12>
    323a:	6983      	ldr	r3, [r0, #24]
    323c:	b90b      	cbnz	r3, 3242 <__swbuf_r+0x12>
    323e:	f000 f991 	bl	3564 <__sinit>
    3242:	4b21      	ldr	r3, [pc, #132]	; (32c8 <__swbuf_r+0x98>)
    3244:	429c      	cmp	r4, r3
    3246:	d12a      	bne.n	329e <__swbuf_r+0x6e>
    3248:	686c      	ldr	r4, [r5, #4]
    324a:	69a3      	ldr	r3, [r4, #24]
    324c:	60a3      	str	r3, [r4, #8]
    324e:	89a3      	ldrh	r3, [r4, #12]
    3250:	071a      	lsls	r2, r3, #28
    3252:	d52e      	bpl.n	32b2 <__swbuf_r+0x82>
    3254:	6923      	ldr	r3, [r4, #16]
    3256:	b363      	cbz	r3, 32b2 <__swbuf_r+0x82>
    3258:	6923      	ldr	r3, [r4, #16]
    325a:	6820      	ldr	r0, [r4, #0]
    325c:	1ac0      	subs	r0, r0, r3
    325e:	6963      	ldr	r3, [r4, #20]
    3260:	b2f6      	uxtb	r6, r6
    3262:	4283      	cmp	r3, r0
    3264:	4637      	mov	r7, r6
    3266:	dc04      	bgt.n	3272 <__swbuf_r+0x42>
    3268:	4621      	mov	r1, r4
    326a:	4628      	mov	r0, r5
    326c:	f000 f926 	bl	34bc <_fflush_r>
    3270:	bb28      	cbnz	r0, 32be <__swbuf_r+0x8e>
    3272:	68a3      	ldr	r3, [r4, #8]
    3274:	3b01      	subs	r3, #1
    3276:	60a3      	str	r3, [r4, #8]
    3278:	6823      	ldr	r3, [r4, #0]
    327a:	1c5a      	adds	r2, r3, #1
    327c:	6022      	str	r2, [r4, #0]
    327e:	701e      	strb	r6, [r3, #0]
    3280:	6963      	ldr	r3, [r4, #20]
    3282:	3001      	adds	r0, #1
    3284:	4283      	cmp	r3, r0
    3286:	d004      	beq.n	3292 <__swbuf_r+0x62>
    3288:	89a3      	ldrh	r3, [r4, #12]
    328a:	07db      	lsls	r3, r3, #31
    328c:	d519      	bpl.n	32c2 <__swbuf_r+0x92>
    328e:	2e0a      	cmp	r6, #10
    3290:	d117      	bne.n	32c2 <__swbuf_r+0x92>
    3292:	4621      	mov	r1, r4
    3294:	4628      	mov	r0, r5
    3296:	f000 f911 	bl	34bc <_fflush_r>
    329a:	b190      	cbz	r0, 32c2 <__swbuf_r+0x92>
    329c:	e00f      	b.n	32be <__swbuf_r+0x8e>
    329e:	4b0b      	ldr	r3, [pc, #44]	; (32cc <__swbuf_r+0x9c>)
    32a0:	429c      	cmp	r4, r3
    32a2:	d101      	bne.n	32a8 <__swbuf_r+0x78>
    32a4:	68ac      	ldr	r4, [r5, #8]
    32a6:	e7d0      	b.n	324a <__swbuf_r+0x1a>
    32a8:	4b09      	ldr	r3, [pc, #36]	; (32d0 <__swbuf_r+0xa0>)
    32aa:	429c      	cmp	r4, r3
    32ac:	bf08      	it	eq
    32ae:	68ec      	ldreq	r4, [r5, #12]
    32b0:	e7cb      	b.n	324a <__swbuf_r+0x1a>
    32b2:	4621      	mov	r1, r4
    32b4:	4628      	mov	r0, r5
    32b6:	f000 f80d 	bl	32d4 <__swsetup_r>
    32ba:	2800      	cmp	r0, #0
    32bc:	d0cc      	beq.n	3258 <__swbuf_r+0x28>
    32be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    32c2:	4638      	mov	r0, r7
    32c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32c6:	bf00      	nop
    32c8:	000042c8 	.word	0x000042c8
    32cc:	000042e8 	.word	0x000042e8
    32d0:	000042a8 	.word	0x000042a8

000032d4 <__swsetup_r>:
    32d4:	4b32      	ldr	r3, [pc, #200]	; (33a0 <__swsetup_r+0xcc>)
    32d6:	b570      	push	{r4, r5, r6, lr}
    32d8:	681d      	ldr	r5, [r3, #0]
    32da:	4606      	mov	r6, r0
    32dc:	460c      	mov	r4, r1
    32de:	b125      	cbz	r5, 32ea <__swsetup_r+0x16>
    32e0:	69ab      	ldr	r3, [r5, #24]
    32e2:	b913      	cbnz	r3, 32ea <__swsetup_r+0x16>
    32e4:	4628      	mov	r0, r5
    32e6:	f000 f93d 	bl	3564 <__sinit>
    32ea:	4b2e      	ldr	r3, [pc, #184]	; (33a4 <__swsetup_r+0xd0>)
    32ec:	429c      	cmp	r4, r3
    32ee:	d10f      	bne.n	3310 <__swsetup_r+0x3c>
    32f0:	686c      	ldr	r4, [r5, #4]
    32f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    32f6:	b29a      	uxth	r2, r3
    32f8:	0715      	lsls	r5, r2, #28
    32fa:	d42c      	bmi.n	3356 <__swsetup_r+0x82>
    32fc:	06d0      	lsls	r0, r2, #27
    32fe:	d411      	bmi.n	3324 <__swsetup_r+0x50>
    3300:	2209      	movs	r2, #9
    3302:	6032      	str	r2, [r6, #0]
    3304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3308:	81a3      	strh	r3, [r4, #12]
    330a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    330e:	e03e      	b.n	338e <__swsetup_r+0xba>
    3310:	4b25      	ldr	r3, [pc, #148]	; (33a8 <__swsetup_r+0xd4>)
    3312:	429c      	cmp	r4, r3
    3314:	d101      	bne.n	331a <__swsetup_r+0x46>
    3316:	68ac      	ldr	r4, [r5, #8]
    3318:	e7eb      	b.n	32f2 <__swsetup_r+0x1e>
    331a:	4b24      	ldr	r3, [pc, #144]	; (33ac <__swsetup_r+0xd8>)
    331c:	429c      	cmp	r4, r3
    331e:	bf08      	it	eq
    3320:	68ec      	ldreq	r4, [r5, #12]
    3322:	e7e6      	b.n	32f2 <__swsetup_r+0x1e>
    3324:	0751      	lsls	r1, r2, #29
    3326:	d512      	bpl.n	334e <__swsetup_r+0x7a>
    3328:	6b61      	ldr	r1, [r4, #52]	; 0x34
    332a:	b141      	cbz	r1, 333e <__swsetup_r+0x6a>
    332c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3330:	4299      	cmp	r1, r3
    3332:	d002      	beq.n	333a <__swsetup_r+0x66>
    3334:	4630      	mov	r0, r6
    3336:	f7ff fc83 	bl	2c40 <_free_r>
    333a:	2300      	movs	r3, #0
    333c:	6363      	str	r3, [r4, #52]	; 0x34
    333e:	89a3      	ldrh	r3, [r4, #12]
    3340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    3344:	81a3      	strh	r3, [r4, #12]
    3346:	2300      	movs	r3, #0
    3348:	6063      	str	r3, [r4, #4]
    334a:	6923      	ldr	r3, [r4, #16]
    334c:	6023      	str	r3, [r4, #0]
    334e:	89a3      	ldrh	r3, [r4, #12]
    3350:	f043 0308 	orr.w	r3, r3, #8
    3354:	81a3      	strh	r3, [r4, #12]
    3356:	6923      	ldr	r3, [r4, #16]
    3358:	b94b      	cbnz	r3, 336e <__swsetup_r+0x9a>
    335a:	89a3      	ldrh	r3, [r4, #12]
    335c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    3360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3364:	d003      	beq.n	336e <__swsetup_r+0x9a>
    3366:	4621      	mov	r1, r4
    3368:	4630      	mov	r0, r6
    336a:	f000 f967 	bl	363c <__smakebuf_r>
    336e:	89a2      	ldrh	r2, [r4, #12]
    3370:	f012 0301 	ands.w	r3, r2, #1
    3374:	d00c      	beq.n	3390 <__swsetup_r+0xbc>
    3376:	2300      	movs	r3, #0
    3378:	60a3      	str	r3, [r4, #8]
    337a:	6963      	ldr	r3, [r4, #20]
    337c:	425b      	negs	r3, r3
    337e:	61a3      	str	r3, [r4, #24]
    3380:	6923      	ldr	r3, [r4, #16]
    3382:	b953      	cbnz	r3, 339a <__swsetup_r+0xc6>
    3384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3388:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    338c:	d1ba      	bne.n	3304 <__swsetup_r+0x30>
    338e:	bd70      	pop	{r4, r5, r6, pc}
    3390:	0792      	lsls	r2, r2, #30
    3392:	bf58      	it	pl
    3394:	6963      	ldrpl	r3, [r4, #20]
    3396:	60a3      	str	r3, [r4, #8]
    3398:	e7f2      	b.n	3380 <__swsetup_r+0xac>
    339a:	2000      	movs	r0, #0
    339c:	e7f7      	b.n	338e <__swsetup_r+0xba>
    339e:	bf00      	nop
    33a0:	20000004 	.word	0x20000004
    33a4:	000042c8 	.word	0x000042c8
    33a8:	000042e8 	.word	0x000042e8
    33ac:	000042a8 	.word	0x000042a8

000033b0 <__sflush_r>:
    33b0:	898a      	ldrh	r2, [r1, #12]
    33b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33b6:	4605      	mov	r5, r0
    33b8:	0710      	lsls	r0, r2, #28
    33ba:	460c      	mov	r4, r1
    33bc:	d458      	bmi.n	3470 <__sflush_r+0xc0>
    33be:	684b      	ldr	r3, [r1, #4]
    33c0:	2b00      	cmp	r3, #0
    33c2:	dc05      	bgt.n	33d0 <__sflush_r+0x20>
    33c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    33c6:	2b00      	cmp	r3, #0
    33c8:	dc02      	bgt.n	33d0 <__sflush_r+0x20>
    33ca:	2000      	movs	r0, #0
    33cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    33d2:	2e00      	cmp	r6, #0
    33d4:	d0f9      	beq.n	33ca <__sflush_r+0x1a>
    33d6:	2300      	movs	r3, #0
    33d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    33dc:	682f      	ldr	r7, [r5, #0]
    33de:	6a21      	ldr	r1, [r4, #32]
    33e0:	602b      	str	r3, [r5, #0]
    33e2:	d032      	beq.n	344a <__sflush_r+0x9a>
    33e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    33e6:	89a3      	ldrh	r3, [r4, #12]
    33e8:	075a      	lsls	r2, r3, #29
    33ea:	d505      	bpl.n	33f8 <__sflush_r+0x48>
    33ec:	6863      	ldr	r3, [r4, #4]
    33ee:	1ac0      	subs	r0, r0, r3
    33f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    33f2:	b10b      	cbz	r3, 33f8 <__sflush_r+0x48>
    33f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    33f6:	1ac0      	subs	r0, r0, r3
    33f8:	2300      	movs	r3, #0
    33fa:	4602      	mov	r2, r0
    33fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    33fe:	6a21      	ldr	r1, [r4, #32]
    3400:	4628      	mov	r0, r5
    3402:	47b0      	blx	r6
    3404:	1c43      	adds	r3, r0, #1
    3406:	89a3      	ldrh	r3, [r4, #12]
    3408:	d106      	bne.n	3418 <__sflush_r+0x68>
    340a:	6829      	ldr	r1, [r5, #0]
    340c:	291d      	cmp	r1, #29
    340e:	d848      	bhi.n	34a2 <__sflush_r+0xf2>
    3410:	4a29      	ldr	r2, [pc, #164]	; (34b8 <__sflush_r+0x108>)
    3412:	40ca      	lsrs	r2, r1
    3414:	07d6      	lsls	r6, r2, #31
    3416:	d544      	bpl.n	34a2 <__sflush_r+0xf2>
    3418:	2200      	movs	r2, #0
    341a:	6062      	str	r2, [r4, #4]
    341c:	04d9      	lsls	r1, r3, #19
    341e:	6922      	ldr	r2, [r4, #16]
    3420:	6022      	str	r2, [r4, #0]
    3422:	d504      	bpl.n	342e <__sflush_r+0x7e>
    3424:	1c42      	adds	r2, r0, #1
    3426:	d101      	bne.n	342c <__sflush_r+0x7c>
    3428:	682b      	ldr	r3, [r5, #0]
    342a:	b903      	cbnz	r3, 342e <__sflush_r+0x7e>
    342c:	6560      	str	r0, [r4, #84]	; 0x54
    342e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3430:	602f      	str	r7, [r5, #0]
    3432:	2900      	cmp	r1, #0
    3434:	d0c9      	beq.n	33ca <__sflush_r+0x1a>
    3436:	f104 0344 	add.w	r3, r4, #68	; 0x44
    343a:	4299      	cmp	r1, r3
    343c:	d002      	beq.n	3444 <__sflush_r+0x94>
    343e:	4628      	mov	r0, r5
    3440:	f7ff fbfe 	bl	2c40 <_free_r>
    3444:	2000      	movs	r0, #0
    3446:	6360      	str	r0, [r4, #52]	; 0x34
    3448:	e7c0      	b.n	33cc <__sflush_r+0x1c>
    344a:	2301      	movs	r3, #1
    344c:	4628      	mov	r0, r5
    344e:	47b0      	blx	r6
    3450:	1c41      	adds	r1, r0, #1
    3452:	d1c8      	bne.n	33e6 <__sflush_r+0x36>
    3454:	682b      	ldr	r3, [r5, #0]
    3456:	2b00      	cmp	r3, #0
    3458:	d0c5      	beq.n	33e6 <__sflush_r+0x36>
    345a:	2b1d      	cmp	r3, #29
    345c:	d001      	beq.n	3462 <__sflush_r+0xb2>
    345e:	2b16      	cmp	r3, #22
    3460:	d101      	bne.n	3466 <__sflush_r+0xb6>
    3462:	602f      	str	r7, [r5, #0]
    3464:	e7b1      	b.n	33ca <__sflush_r+0x1a>
    3466:	89a3      	ldrh	r3, [r4, #12]
    3468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    346c:	81a3      	strh	r3, [r4, #12]
    346e:	e7ad      	b.n	33cc <__sflush_r+0x1c>
    3470:	690f      	ldr	r7, [r1, #16]
    3472:	2f00      	cmp	r7, #0
    3474:	d0a9      	beq.n	33ca <__sflush_r+0x1a>
    3476:	0793      	lsls	r3, r2, #30
    3478:	680e      	ldr	r6, [r1, #0]
    347a:	bf08      	it	eq
    347c:	694b      	ldreq	r3, [r1, #20]
    347e:	600f      	str	r7, [r1, #0]
    3480:	bf18      	it	ne
    3482:	2300      	movne	r3, #0
    3484:	eba6 0807 	sub.w	r8, r6, r7
    3488:	608b      	str	r3, [r1, #8]
    348a:	f1b8 0f00 	cmp.w	r8, #0
    348e:	dd9c      	ble.n	33ca <__sflush_r+0x1a>
    3490:	4643      	mov	r3, r8
    3492:	463a      	mov	r2, r7
    3494:	6a21      	ldr	r1, [r4, #32]
    3496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3498:	4628      	mov	r0, r5
    349a:	47b0      	blx	r6
    349c:	2800      	cmp	r0, #0
    349e:	dc06      	bgt.n	34ae <__sflush_r+0xfe>
    34a0:	89a3      	ldrh	r3, [r4, #12]
    34a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    34a6:	81a3      	strh	r3, [r4, #12]
    34a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34ac:	e78e      	b.n	33cc <__sflush_r+0x1c>
    34ae:	4407      	add	r7, r0
    34b0:	eba8 0800 	sub.w	r8, r8, r0
    34b4:	e7e9      	b.n	348a <__sflush_r+0xda>
    34b6:	bf00      	nop
    34b8:	20400001 	.word	0x20400001

000034bc <_fflush_r>:
    34bc:	b538      	push	{r3, r4, r5, lr}
    34be:	690b      	ldr	r3, [r1, #16]
    34c0:	4605      	mov	r5, r0
    34c2:	460c      	mov	r4, r1
    34c4:	b1db      	cbz	r3, 34fe <_fflush_r+0x42>
    34c6:	b118      	cbz	r0, 34d0 <_fflush_r+0x14>
    34c8:	6983      	ldr	r3, [r0, #24]
    34ca:	b90b      	cbnz	r3, 34d0 <_fflush_r+0x14>
    34cc:	f000 f84a 	bl	3564 <__sinit>
    34d0:	4b0c      	ldr	r3, [pc, #48]	; (3504 <_fflush_r+0x48>)
    34d2:	429c      	cmp	r4, r3
    34d4:	d109      	bne.n	34ea <_fflush_r+0x2e>
    34d6:	686c      	ldr	r4, [r5, #4]
    34d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34dc:	b17b      	cbz	r3, 34fe <_fflush_r+0x42>
    34de:	4621      	mov	r1, r4
    34e0:	4628      	mov	r0, r5
    34e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    34e6:	f7ff bf63 	b.w	33b0 <__sflush_r>
    34ea:	4b07      	ldr	r3, [pc, #28]	; (3508 <_fflush_r+0x4c>)
    34ec:	429c      	cmp	r4, r3
    34ee:	d101      	bne.n	34f4 <_fflush_r+0x38>
    34f0:	68ac      	ldr	r4, [r5, #8]
    34f2:	e7f1      	b.n	34d8 <_fflush_r+0x1c>
    34f4:	4b05      	ldr	r3, [pc, #20]	; (350c <_fflush_r+0x50>)
    34f6:	429c      	cmp	r4, r3
    34f8:	bf08      	it	eq
    34fa:	68ec      	ldreq	r4, [r5, #12]
    34fc:	e7ec      	b.n	34d8 <_fflush_r+0x1c>
    34fe:	2000      	movs	r0, #0
    3500:	bd38      	pop	{r3, r4, r5, pc}
    3502:	bf00      	nop
    3504:	000042c8 	.word	0x000042c8
    3508:	000042e8 	.word	0x000042e8
    350c:	000042a8 	.word	0x000042a8

00003510 <std>:
    3510:	2300      	movs	r3, #0
    3512:	b510      	push	{r4, lr}
    3514:	4604      	mov	r4, r0
    3516:	e9c0 3300 	strd	r3, r3, [r0]
    351a:	6083      	str	r3, [r0, #8]
    351c:	8181      	strh	r1, [r0, #12]
    351e:	6643      	str	r3, [r0, #100]	; 0x64
    3520:	81c2      	strh	r2, [r0, #14]
    3522:	e9c0 3304 	strd	r3, r3, [r0, #16]
    3526:	6183      	str	r3, [r0, #24]
    3528:	4619      	mov	r1, r3
    352a:	2208      	movs	r2, #8
    352c:	305c      	adds	r0, #92	; 0x5c
    352e:	f000 fb33 	bl	3b98 <memset>
    3532:	4b05      	ldr	r3, [pc, #20]	; (3548 <std+0x38>)
    3534:	6263      	str	r3, [r4, #36]	; 0x24
    3536:	4b05      	ldr	r3, [pc, #20]	; (354c <std+0x3c>)
    3538:	62a3      	str	r3, [r4, #40]	; 0x28
    353a:	4b05      	ldr	r3, [pc, #20]	; (3550 <std+0x40>)
    353c:	62e3      	str	r3, [r4, #44]	; 0x2c
    353e:	4b05      	ldr	r3, [pc, #20]	; (3554 <std+0x44>)
    3540:	6224      	str	r4, [r4, #32]
    3542:	6323      	str	r3, [r4, #48]	; 0x30
    3544:	bd10      	pop	{r4, pc}
    3546:	bf00      	nop
    3548:	00003df9 	.word	0x00003df9
    354c:	00003e1b 	.word	0x00003e1b
    3550:	00003e53 	.word	0x00003e53
    3554:	00003e77 	.word	0x00003e77

00003558 <_cleanup_r>:
    3558:	4901      	ldr	r1, [pc, #4]	; (3560 <_cleanup_r+0x8>)
    355a:	f000 bc09 	b.w	3d70 <_fwalk_reent>
    355e:	bf00      	nop
    3560:	000034bd 	.word	0x000034bd

00003564 <__sinit>:
    3564:	6983      	ldr	r3, [r0, #24]
    3566:	b510      	push	{r4, lr}
    3568:	4604      	mov	r4, r0
    356a:	bb33      	cbnz	r3, 35ba <__sinit+0x56>
    356c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    3570:	6503      	str	r3, [r0, #80]	; 0x50
    3572:	4b12      	ldr	r3, [pc, #72]	; (35bc <__sinit+0x58>)
    3574:	4a12      	ldr	r2, [pc, #72]	; (35c0 <__sinit+0x5c>)
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	6282      	str	r2, [r0, #40]	; 0x28
    357a:	4298      	cmp	r0, r3
    357c:	bf04      	itt	eq
    357e:	2301      	moveq	r3, #1
    3580:	6183      	streq	r3, [r0, #24]
    3582:	f000 f81f 	bl	35c4 <__sfp>
    3586:	6060      	str	r0, [r4, #4]
    3588:	4620      	mov	r0, r4
    358a:	f000 f81b 	bl	35c4 <__sfp>
    358e:	60a0      	str	r0, [r4, #8]
    3590:	4620      	mov	r0, r4
    3592:	f000 f817 	bl	35c4 <__sfp>
    3596:	2200      	movs	r2, #0
    3598:	60e0      	str	r0, [r4, #12]
    359a:	2104      	movs	r1, #4
    359c:	6860      	ldr	r0, [r4, #4]
    359e:	f7ff ffb7 	bl	3510 <std>
    35a2:	2201      	movs	r2, #1
    35a4:	2109      	movs	r1, #9
    35a6:	68a0      	ldr	r0, [r4, #8]
    35a8:	f7ff ffb2 	bl	3510 <std>
    35ac:	2202      	movs	r2, #2
    35ae:	2112      	movs	r1, #18
    35b0:	68e0      	ldr	r0, [r4, #12]
    35b2:	f7ff ffad 	bl	3510 <std>
    35b6:	2301      	movs	r3, #1
    35b8:	61a3      	str	r3, [r4, #24]
    35ba:	bd10      	pop	{r4, pc}
    35bc:	000042a4 	.word	0x000042a4
    35c0:	00003559 	.word	0x00003559

000035c4 <__sfp>:
    35c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35c6:	4b1b      	ldr	r3, [pc, #108]	; (3634 <__sfp+0x70>)
    35c8:	681e      	ldr	r6, [r3, #0]
    35ca:	69b3      	ldr	r3, [r6, #24]
    35cc:	4607      	mov	r7, r0
    35ce:	b913      	cbnz	r3, 35d6 <__sfp+0x12>
    35d0:	4630      	mov	r0, r6
    35d2:	f7ff ffc7 	bl	3564 <__sinit>
    35d6:	3648      	adds	r6, #72	; 0x48
    35d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    35dc:	3b01      	subs	r3, #1
    35de:	d503      	bpl.n	35e8 <__sfp+0x24>
    35e0:	6833      	ldr	r3, [r6, #0]
    35e2:	b133      	cbz	r3, 35f2 <__sfp+0x2e>
    35e4:	6836      	ldr	r6, [r6, #0]
    35e6:	e7f7      	b.n	35d8 <__sfp+0x14>
    35e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    35ec:	b16d      	cbz	r5, 360a <__sfp+0x46>
    35ee:	3468      	adds	r4, #104	; 0x68
    35f0:	e7f4      	b.n	35dc <__sfp+0x18>
    35f2:	2104      	movs	r1, #4
    35f4:	4638      	mov	r0, r7
    35f6:	f000 fba5 	bl	3d44 <__sfmoreglue>
    35fa:	6030      	str	r0, [r6, #0]
    35fc:	2800      	cmp	r0, #0
    35fe:	d1f1      	bne.n	35e4 <__sfp+0x20>
    3600:	230c      	movs	r3, #12
    3602:	603b      	str	r3, [r7, #0]
    3604:	4604      	mov	r4, r0
    3606:	4620      	mov	r0, r4
    3608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    360a:	4b0b      	ldr	r3, [pc, #44]	; (3638 <__sfp+0x74>)
    360c:	6665      	str	r5, [r4, #100]	; 0x64
    360e:	e9c4 5500 	strd	r5, r5, [r4]
    3612:	60a5      	str	r5, [r4, #8]
    3614:	e9c4 3503 	strd	r3, r5, [r4, #12]
    3618:	e9c4 5505 	strd	r5, r5, [r4, #20]
    361c:	2208      	movs	r2, #8
    361e:	4629      	mov	r1, r5
    3620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3624:	f000 fab8 	bl	3b98 <memset>
    3628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    362c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    3630:	e7e9      	b.n	3606 <__sfp+0x42>
    3632:	bf00      	nop
    3634:	000042a4 	.word	0x000042a4
    3638:	ffff0001 	.word	0xffff0001

0000363c <__smakebuf_r>:
    363c:	898b      	ldrh	r3, [r1, #12]
    363e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3640:	079d      	lsls	r5, r3, #30
    3642:	4606      	mov	r6, r0
    3644:	460c      	mov	r4, r1
    3646:	d507      	bpl.n	3658 <__smakebuf_r+0x1c>
    3648:	f104 0347 	add.w	r3, r4, #71	; 0x47
    364c:	6023      	str	r3, [r4, #0]
    364e:	6123      	str	r3, [r4, #16]
    3650:	2301      	movs	r3, #1
    3652:	6163      	str	r3, [r4, #20]
    3654:	b002      	add	sp, #8
    3656:	bd70      	pop	{r4, r5, r6, pc}
    3658:	ab01      	add	r3, sp, #4
    365a:	466a      	mov	r2, sp
    365c:	f000 fba6 	bl	3dac <__swhatbuf_r>
    3660:	9900      	ldr	r1, [sp, #0]
    3662:	4605      	mov	r5, r0
    3664:	4630      	mov	r0, r6
    3666:	f7ff fb39 	bl	2cdc <_malloc_r>
    366a:	b948      	cbnz	r0, 3680 <__smakebuf_r+0x44>
    366c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3670:	059a      	lsls	r2, r3, #22
    3672:	d4ef      	bmi.n	3654 <__smakebuf_r+0x18>
    3674:	f023 0303 	bic.w	r3, r3, #3
    3678:	f043 0302 	orr.w	r3, r3, #2
    367c:	81a3      	strh	r3, [r4, #12]
    367e:	e7e3      	b.n	3648 <__smakebuf_r+0xc>
    3680:	4b0d      	ldr	r3, [pc, #52]	; (36b8 <__smakebuf_r+0x7c>)
    3682:	62b3      	str	r3, [r6, #40]	; 0x28
    3684:	89a3      	ldrh	r3, [r4, #12]
    3686:	6020      	str	r0, [r4, #0]
    3688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    368c:	81a3      	strh	r3, [r4, #12]
    368e:	9b00      	ldr	r3, [sp, #0]
    3690:	6163      	str	r3, [r4, #20]
    3692:	9b01      	ldr	r3, [sp, #4]
    3694:	6120      	str	r0, [r4, #16]
    3696:	b15b      	cbz	r3, 36b0 <__smakebuf_r+0x74>
    3698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    369c:	4630      	mov	r0, r6
    369e:	f000 f841 	bl	3724 <_isatty_r>
    36a2:	b128      	cbz	r0, 36b0 <__smakebuf_r+0x74>
    36a4:	89a3      	ldrh	r3, [r4, #12]
    36a6:	f023 0303 	bic.w	r3, r3, #3
    36aa:	f043 0301 	orr.w	r3, r3, #1
    36ae:	81a3      	strh	r3, [r4, #12]
    36b0:	89a3      	ldrh	r3, [r4, #12]
    36b2:	431d      	orrs	r5, r3
    36b4:	81a5      	strh	r5, [r4, #12]
    36b6:	e7cd      	b.n	3654 <__smakebuf_r+0x18>
    36b8:	00003559 	.word	0x00003559

000036bc <_write_r>:
    36bc:	b538      	push	{r3, r4, r5, lr}
    36be:	4c07      	ldr	r4, [pc, #28]	; (36dc <_write_r+0x20>)
    36c0:	4605      	mov	r5, r0
    36c2:	4608      	mov	r0, r1
    36c4:	4611      	mov	r1, r2
    36c6:	2200      	movs	r2, #0
    36c8:	6022      	str	r2, [r4, #0]
    36ca:	461a      	mov	r2, r3
    36cc:	f000 f8b4 	bl	3838 <_write>
    36d0:	1c43      	adds	r3, r0, #1
    36d2:	d102      	bne.n	36da <_write_r+0x1e>
    36d4:	6823      	ldr	r3, [r4, #0]
    36d6:	b103      	cbz	r3, 36da <_write_r+0x1e>
    36d8:	602b      	str	r3, [r5, #0]
    36da:	bd38      	pop	{r3, r4, r5, pc}
    36dc:	200000ac 	.word	0x200000ac

000036e0 <_close_r>:
    36e0:	b538      	push	{r3, r4, r5, lr}
    36e2:	4c06      	ldr	r4, [pc, #24]	; (36fc <_close_r+0x1c>)
    36e4:	2300      	movs	r3, #0
    36e6:	4605      	mov	r5, r0
    36e8:	4608      	mov	r0, r1
    36ea:	6023      	str	r3, [r4, #0]
    36ec:	f000 f86c 	bl	37c8 <_close>
    36f0:	1c43      	adds	r3, r0, #1
    36f2:	d102      	bne.n	36fa <_close_r+0x1a>
    36f4:	6823      	ldr	r3, [r4, #0]
    36f6:	b103      	cbz	r3, 36fa <_close_r+0x1a>
    36f8:	602b      	str	r3, [r5, #0]
    36fa:	bd38      	pop	{r3, r4, r5, pc}
    36fc:	200000ac 	.word	0x200000ac

00003700 <_fstat_r>:
    3700:	b538      	push	{r3, r4, r5, lr}
    3702:	4c07      	ldr	r4, [pc, #28]	; (3720 <_fstat_r+0x20>)
    3704:	2300      	movs	r3, #0
    3706:	4605      	mov	r5, r0
    3708:	4608      	mov	r0, r1
    370a:	4611      	mov	r1, r2
    370c:	6023      	str	r3, [r4, #0]
    370e:	f000 f863 	bl	37d8 <_fstat>
    3712:	1c43      	adds	r3, r0, #1
    3714:	d102      	bne.n	371c <_fstat_r+0x1c>
    3716:	6823      	ldr	r3, [r4, #0]
    3718:	b103      	cbz	r3, 371c <_fstat_r+0x1c>
    371a:	602b      	str	r3, [r5, #0]
    371c:	bd38      	pop	{r3, r4, r5, pc}
    371e:	bf00      	nop
    3720:	200000ac 	.word	0x200000ac

00003724 <_isatty_r>:
    3724:	b538      	push	{r3, r4, r5, lr}
    3726:	4c06      	ldr	r4, [pc, #24]	; (3740 <_isatty_r+0x1c>)
    3728:	2300      	movs	r3, #0
    372a:	4605      	mov	r5, r0
    372c:	4608      	mov	r0, r1
    372e:	6023      	str	r3, [r4, #0]
    3730:	f000 f862 	bl	37f8 <_isatty>
    3734:	1c43      	adds	r3, r0, #1
    3736:	d102      	bne.n	373e <_isatty_r+0x1a>
    3738:	6823      	ldr	r3, [r4, #0]
    373a:	b103      	cbz	r3, 373e <_isatty_r+0x1a>
    373c:	602b      	str	r3, [r5, #0]
    373e:	bd38      	pop	{r3, r4, r5, pc}
    3740:	200000ac 	.word	0x200000ac

00003744 <_lseek_r>:
    3744:	b538      	push	{r3, r4, r5, lr}
    3746:	4c07      	ldr	r4, [pc, #28]	; (3764 <_lseek_r+0x20>)
    3748:	4605      	mov	r5, r0
    374a:	4608      	mov	r0, r1
    374c:	4611      	mov	r1, r2
    374e:	2200      	movs	r2, #0
    3750:	6022      	str	r2, [r4, #0]
    3752:	461a      	mov	r2, r3
    3754:	f000 f860 	bl	3818 <_lseek>
    3758:	1c43      	adds	r3, r0, #1
    375a:	d102      	bne.n	3762 <_lseek_r+0x1e>
    375c:	6823      	ldr	r3, [r4, #0]
    375e:	b103      	cbz	r3, 3762 <_lseek_r+0x1e>
    3760:	602b      	str	r3, [r5, #0]
    3762:	bd38      	pop	{r3, r4, r5, pc}
    3764:	200000ac 	.word	0x200000ac

00003768 <_read_r>:
    3768:	b538      	push	{r3, r4, r5, lr}
    376a:	4c07      	ldr	r4, [pc, #28]	; (3788 <_read_r+0x20>)
    376c:	4605      	mov	r5, r0
    376e:	4608      	mov	r0, r1
    3770:	4611      	mov	r1, r2
    3772:	2200      	movs	r2, #0
    3774:	6022      	str	r2, [r4, #0]
    3776:	461a      	mov	r2, r3
    3778:	f000 f856 	bl	3828 <_read>
    377c:	1c43      	adds	r3, r0, #1
    377e:	d102      	bne.n	3786 <_read_r+0x1e>
    3780:	6823      	ldr	r3, [r4, #0]
    3782:	b103      	cbz	r3, 3786 <_read_r+0x1e>
    3784:	602b      	str	r3, [r5, #0]
    3786:	bd38      	pop	{r3, r4, r5, pc}
    3788:	200000ac 	.word	0x200000ac

0000378c <_sbrk>:
    378c:	b570      	push	{r4, r5, r6, lr}
    378e:	4d0c      	ldr	r5, [pc, #48]	; (37c0 <_sbrk+0x34>)
    3790:	682b      	ldr	r3, [r5, #0]
    3792:	b90b      	cbnz	r3, 3798 <_sbrk+0xc>
    3794:	4b0b      	ldr	r3, [pc, #44]	; (37c4 <_sbrk+0x38>)
    3796:	602b      	str	r3, [r5, #0]
    3798:	1cc4      	adds	r4, r0, #3
    379a:	682e      	ldr	r6, [r5, #0]
    379c:	f024 0403 	bic.w	r4, r4, #3
    37a0:	4434      	add	r4, r6
    37a2:	4620      	mov	r0, r4
    37a4:	f000 f850 	bl	3848 <__check_heap_overflow>
    37a8:	b910      	cbnz	r0, 37b0 <_sbrk+0x24>
    37aa:	602c      	str	r4, [r5, #0]
    37ac:	4630      	mov	r0, r6
    37ae:	bd70      	pop	{r4, r5, r6, pc}
    37b0:	f000 f876 	bl	38a0 <__errno>
    37b4:	230c      	movs	r3, #12
    37b6:	6003      	str	r3, [r0, #0]
    37b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    37bc:	e7f6      	b.n	37ac <_sbrk+0x20>
    37be:	bf00      	nop
    37c0:	2000008c 	.word	0x2000008c
    37c4:	200000b0 	.word	0x200000b0

000037c8 <_close>:
    37c8:	4b02      	ldr	r3, [pc, #8]	; (37d4 <_close+0xc>)
    37ca:	2258      	movs	r2, #88	; 0x58
    37cc:	601a      	str	r2, [r3, #0]
    37ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37d2:	4770      	bx	lr
    37d4:	200000ac 	.word	0x200000ac

000037d8 <_fstat>:
    37d8:	4b02      	ldr	r3, [pc, #8]	; (37e4 <_fstat+0xc>)
    37da:	2258      	movs	r2, #88	; 0x58
    37dc:	601a      	str	r2, [r3, #0]
    37de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37e2:	4770      	bx	lr
    37e4:	200000ac 	.word	0x200000ac

000037e8 <_getpid>:
    37e8:	4b02      	ldr	r3, [pc, #8]	; (37f4 <_getpid+0xc>)
    37ea:	2258      	movs	r2, #88	; 0x58
    37ec:	601a      	str	r2, [r3, #0]
    37ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37f2:	4770      	bx	lr
    37f4:	200000ac 	.word	0x200000ac

000037f8 <_isatty>:
    37f8:	4b02      	ldr	r3, [pc, #8]	; (3804 <_isatty+0xc>)
    37fa:	2258      	movs	r2, #88	; 0x58
    37fc:	601a      	str	r2, [r3, #0]
    37fe:	2000      	movs	r0, #0
    3800:	4770      	bx	lr
    3802:	bf00      	nop
    3804:	200000ac 	.word	0x200000ac

00003808 <_kill>:
    3808:	4b02      	ldr	r3, [pc, #8]	; (3814 <_kill+0xc>)
    380a:	2258      	movs	r2, #88	; 0x58
    380c:	601a      	str	r2, [r3, #0]
    380e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3812:	4770      	bx	lr
    3814:	200000ac 	.word	0x200000ac

00003818 <_lseek>:
    3818:	4b02      	ldr	r3, [pc, #8]	; (3824 <_lseek+0xc>)
    381a:	2258      	movs	r2, #88	; 0x58
    381c:	601a      	str	r2, [r3, #0]
    381e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3822:	4770      	bx	lr
    3824:	200000ac 	.word	0x200000ac

00003828 <_read>:
    3828:	4b02      	ldr	r3, [pc, #8]	; (3834 <_read+0xc>)
    382a:	2258      	movs	r2, #88	; 0x58
    382c:	601a      	str	r2, [r3, #0]
    382e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3832:	4770      	bx	lr
    3834:	200000ac 	.word	0x200000ac

00003838 <_write>:
    3838:	4b02      	ldr	r3, [pc, #8]	; (3844 <_write+0xc>)
    383a:	2258      	movs	r2, #88	; 0x58
    383c:	601a      	str	r2, [r3, #0]
    383e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3842:	4770      	bx	lr
    3844:	200000ac 	.word	0x200000ac

00003848 <__check_heap_overflow>:
    3848:	4b04      	ldr	r3, [pc, #16]	; (385c <__check_heap_overflow+0x14>)
    384a:	b123      	cbz	r3, 3856 <__check_heap_overflow+0xe>
    384c:	4298      	cmp	r0, r3
    384e:	bf34      	ite	cc
    3850:	2000      	movcc	r0, #0
    3852:	2001      	movcs	r0, #1
    3854:	4770      	bx	lr
    3856:	4618      	mov	r0, r3
    3858:	4770      	bx	lr
    385a:	bf00      	nop
    385c:	200008b0 	.word	0x200008b0

00003860 <__do_global_dtors_aux>:
    3860:	b510      	push	{r4, lr}
    3862:	4c05      	ldr	r4, [pc, #20]	; (3878 <__do_global_dtors_aux+0x18>)
    3864:	7823      	ldrb	r3, [r4, #0]
    3866:	b933      	cbnz	r3, 3876 <__do_global_dtors_aux+0x16>
    3868:	4b04      	ldr	r3, [pc, #16]	; (387c <__do_global_dtors_aux+0x1c>)
    386a:	b113      	cbz	r3, 3872 <__do_global_dtors_aux+0x12>
    386c:	4804      	ldr	r0, [pc, #16]	; (3880 <__do_global_dtors_aux+0x20>)
    386e:	f3af 8000 	nop.w
    3872:	2301      	movs	r3, #1
    3874:	7023      	strb	r3, [r4, #0]
    3876:	bd10      	pop	{r4, pc}
    3878:	20000090 	.word	0x20000090
    387c:	00000000 	.word	0x00000000
    3880:	000047e8 	.word	0x000047e8

00003884 <frame_dummy>:
    3884:	b508      	push	{r3, lr}
    3886:	4b03      	ldr	r3, [pc, #12]	; (3894 <frame_dummy+0x10>)
    3888:	b11b      	cbz	r3, 3892 <frame_dummy+0xe>
    388a:	4903      	ldr	r1, [pc, #12]	; (3898 <frame_dummy+0x14>)
    388c:	4803      	ldr	r0, [pc, #12]	; (389c <frame_dummy+0x18>)
    388e:	f3af 8000 	nop.w
    3892:	bd08      	pop	{r3, pc}
    3894:	00000000 	.word	0x00000000
    3898:	20000094 	.word	0x20000094
    389c:	000047e8 	.word	0x000047e8

000038a0 <__errno>:
    38a0:	4b01      	ldr	r3, [pc, #4]	; (38a8 <__errno+0x8>)
    38a2:	6818      	ldr	r0, [r3, #0]
    38a4:	4770      	bx	lr
    38a6:	bf00      	nop
    38a8:	20000004 	.word	0x20000004

000038ac <DMA0_IRQHandler>:
// your own handler routines in your application code. These routines call
// driver exception handlers or IntDefaultHandler() if no driver exception
// handler is included.
//*****************************************************************************
WEAK void DMA0_IRQHandler(void)
{   DMA0_DriverIRQHandler();
    38ac:	b508      	push	{r3, lr}
    38ae:	f7fc fcca 	bl	246 <ADC0_DriverIRQHandler>
}
    38b2:	bd08      	pop	{r3, pc}

000038b4 <DMA1_IRQHandler>:

WEAK void DMA1_IRQHandler(void)
{   DMA1_DriverIRQHandler();
    38b4:	b508      	push	{r3, lr}
    38b6:	f7fc fcc6 	bl	246 <ADC0_DriverIRQHandler>
}
    38ba:	bd08      	pop	{r3, pc}

000038bc <DMA2_IRQHandler>:

WEAK void DMA2_IRQHandler(void)
{   DMA2_DriverIRQHandler();
    38bc:	b508      	push	{r3, lr}
    38be:	f7fc fcc2 	bl	246 <ADC0_DriverIRQHandler>
}
    38c2:	bd08      	pop	{r3, pc}

000038c4 <DMA3_IRQHandler>:

WEAK void DMA3_IRQHandler(void)
{   DMA3_DriverIRQHandler();
    38c4:	b508      	push	{r3, lr}
    38c6:	f7fc fcbe 	bl	246 <ADC0_DriverIRQHandler>
}
    38ca:	bd08      	pop	{r3, pc}

000038cc <DMA4_IRQHandler>:

WEAK void DMA4_IRQHandler(void)
{   DMA4_DriverIRQHandler();
    38cc:	b508      	push	{r3, lr}
    38ce:	f7fc fcba 	bl	246 <ADC0_DriverIRQHandler>
}
    38d2:	bd08      	pop	{r3, pc}

000038d4 <DMA5_IRQHandler>:

WEAK void DMA5_IRQHandler(void)
{   DMA5_DriverIRQHandler();
    38d4:	b508      	push	{r3, lr}
    38d6:	f7fc fcb6 	bl	246 <ADC0_DriverIRQHandler>
}
    38da:	bd08      	pop	{r3, pc}

000038dc <DMA6_IRQHandler>:

WEAK void DMA6_IRQHandler(void)
{   DMA6_DriverIRQHandler();
    38dc:	b508      	push	{r3, lr}
    38de:	f7fc fcb2 	bl	246 <ADC0_DriverIRQHandler>
}
    38e2:	bd08      	pop	{r3, pc}

000038e4 <DMA7_IRQHandler>:

WEAK void DMA7_IRQHandler(void)
{   DMA7_DriverIRQHandler();
    38e4:	b508      	push	{r3, lr}
    38e6:	f7fc fcae 	bl	246 <ADC0_DriverIRQHandler>
}
    38ea:	bd08      	pop	{r3, pc}

000038ec <DMA8_IRQHandler>:

WEAK void DMA8_IRQHandler(void)
{   DMA8_DriverIRQHandler();
    38ec:	b508      	push	{r3, lr}
    38ee:	f7fc fcaa 	bl	246 <ADC0_DriverIRQHandler>
}
    38f2:	bd08      	pop	{r3, pc}

000038f4 <DMA9_IRQHandler>:

WEAK void DMA9_IRQHandler(void)
{   DMA9_DriverIRQHandler();
    38f4:	b508      	push	{r3, lr}
    38f6:	f7fc fca6 	bl	246 <ADC0_DriverIRQHandler>
}
    38fa:	bd08      	pop	{r3, pc}

000038fc <DMA10_IRQHandler>:

WEAK void DMA10_IRQHandler(void)
{   DMA10_DriverIRQHandler();
    38fc:	b508      	push	{r3, lr}
    38fe:	f7fc fca2 	bl	246 <ADC0_DriverIRQHandler>
}
    3902:	bd08      	pop	{r3, pc}

00003904 <DMA11_IRQHandler>:

WEAK void DMA11_IRQHandler(void)
{   DMA11_DriverIRQHandler();
    3904:	b508      	push	{r3, lr}
    3906:	f7fc fc9e 	bl	246 <ADC0_DriverIRQHandler>
}
    390a:	bd08      	pop	{r3, pc}

0000390c <DMA12_IRQHandler>:

WEAK void DMA12_IRQHandler(void)
{   DMA12_DriverIRQHandler();
    390c:	b508      	push	{r3, lr}
    390e:	f7fc fc9a 	bl	246 <ADC0_DriverIRQHandler>
}
    3912:	bd08      	pop	{r3, pc}

00003914 <DMA13_IRQHandler>:

WEAK void DMA13_IRQHandler(void)
{   DMA13_DriverIRQHandler();
    3914:	b508      	push	{r3, lr}
    3916:	f7fc fc96 	bl	246 <ADC0_DriverIRQHandler>
}
    391a:	bd08      	pop	{r3, pc}

0000391c <DMA14_IRQHandler>:

WEAK void DMA14_IRQHandler(void)
{   DMA14_DriverIRQHandler();
    391c:	b508      	push	{r3, lr}
    391e:	f7fc fc92 	bl	246 <ADC0_DriverIRQHandler>
}
    3922:	bd08      	pop	{r3, pc}

00003924 <DMA15_IRQHandler>:

WEAK void DMA15_IRQHandler(void)
{   DMA15_DriverIRQHandler();
    3924:	b508      	push	{r3, lr}
    3926:	f7fc fc8e 	bl	246 <ADC0_DriverIRQHandler>
}
    392a:	bd08      	pop	{r3, pc}

0000392c <DMA_Error_IRQHandler>:

WEAK void DMA_Error_IRQHandler(void)
{   DMA_Error_DriverIRQHandler();
    392c:	b508      	push	{r3, lr}
    392e:	f7fc fc8a 	bl	246 <ADC0_DriverIRQHandler>
}
    3932:	bd08      	pop	{r3, pc}

00003934 <MCM_IRQHandler>:

WEAK void MCM_IRQHandler(void)
{   MCM_DriverIRQHandler();
    3934:	b508      	push	{r3, lr}
    3936:	f7fc fc86 	bl	246 <ADC0_DriverIRQHandler>
}
    393a:	bd08      	pop	{r3, pc}

0000393c <FTFE_IRQHandler>:

WEAK void FTFE_IRQHandler(void)
{   FTFE_DriverIRQHandler();
    393c:	b508      	push	{r3, lr}
    393e:	f7fc fc82 	bl	246 <ADC0_DriverIRQHandler>
}
    3942:	bd08      	pop	{r3, pc}

00003944 <Read_Collision_IRQHandler>:

WEAK void Read_Collision_IRQHandler(void)
{   Read_Collision_DriverIRQHandler();
    3944:	b508      	push	{r3, lr}
    3946:	f7fc fc7e 	bl	246 <ADC0_DriverIRQHandler>
}
    394a:	bd08      	pop	{r3, pc}

0000394c <LVD_LVW_IRQHandler>:

WEAK void LVD_LVW_IRQHandler(void)
{   LVD_LVW_DriverIRQHandler();
    394c:	b508      	push	{r3, lr}
    394e:	f7fc fc7a 	bl	246 <ADC0_DriverIRQHandler>
}
    3952:	bd08      	pop	{r3, pc}

00003954 <Doublebit_Fault_IRQHandler>:

WEAK void Doublebit_Fault_IRQHandler(void)
{   Doublebit_Fault_DriverIRQHandler();
    3954:	b508      	push	{r3, lr}
    3956:	f7fc fc76 	bl	246 <ADC0_DriverIRQHandler>
}
    395a:	bd08      	pop	{r3, pc}

0000395c <WDOG_EWM_IRQHandler>:

WEAK void WDOG_EWM_IRQHandler(void)
{   WDOG_EWM_DriverIRQHandler();
    395c:	b508      	push	{r3, lr}
    395e:	f7fc fc72 	bl	246 <ADC0_DriverIRQHandler>
}
    3962:	bd08      	pop	{r3, pc}

00003964 <Reserved39_IRQHandler>:

WEAK void Reserved39_IRQHandler(void)
{   Reserved39_DriverIRQHandler();
    3964:	b508      	push	{r3, lr}
    3966:	f7fc fc6e 	bl	246 <ADC0_DriverIRQHandler>
}
    396a:	bd08      	pop	{r3, pc}

0000396c <LPI2C0_IRQHandler>:

WEAK void LPI2C0_IRQHandler(void)
{   LPI2C0_DriverIRQHandler();
    396c:	b508      	push	{r3, lr}
    396e:	f7fc fc6a 	bl	246 <ADC0_DriverIRQHandler>
}
    3972:	bd08      	pop	{r3, pc}

00003974 <LPI2C1_IRQHandler>:

WEAK void LPI2C1_IRQHandler(void)
{   LPI2C1_DriverIRQHandler();
    3974:	b508      	push	{r3, lr}
    3976:	f7fc fc66 	bl	246 <ADC0_DriverIRQHandler>
}
    397a:	bd08      	pop	{r3, pc}

0000397c <LPSPI0_IRQHandler>:

WEAK void LPSPI0_IRQHandler(void)
{   LPSPI0_DriverIRQHandler();
    397c:	b508      	push	{r3, lr}
    397e:	f7fc fc62 	bl	246 <ADC0_DriverIRQHandler>
}
    3982:	bd08      	pop	{r3, pc}

00003984 <LPSPI1_IRQHandler>:

WEAK void LPSPI1_IRQHandler(void)
{   LPSPI1_DriverIRQHandler();
    3984:	b508      	push	{r3, lr}
    3986:	f7fc fc5e 	bl	246 <ADC0_DriverIRQHandler>
}
    398a:	bd08      	pop	{r3, pc}

0000398c <Reserved44_IRQHandler>:

WEAK void Reserved44_IRQHandler(void)
{   Reserved44_DriverIRQHandler();
    398c:	b508      	push	{r3, lr}
    398e:	f7fc fc5a 	bl	246 <ADC0_DriverIRQHandler>
}
    3992:	bd08      	pop	{r3, pc}

00003994 <PWT_IRQHandler>:

WEAK void PWT_IRQHandler(void)
{   PWT_DriverIRQHandler();
    3994:	b508      	push	{r3, lr}
    3996:	f7fc fc56 	bl	246 <ADC0_DriverIRQHandler>
}
    399a:	bd08      	pop	{r3, pc}

0000399c <Reserved46_IRQHandler>:

WEAK void Reserved46_IRQHandler(void)
{   Reserved46_DriverIRQHandler();
    399c:	b508      	push	{r3, lr}
    399e:	f7fc fc52 	bl	246 <ADC0_DriverIRQHandler>
}
    39a2:	bd08      	pop	{r3, pc}

000039a4 <LPUART0_TX_IRQHandler>:

WEAK void LPUART0_TX_IRQHandler(void)
{   LPUART0_TX_DriverIRQHandler();
    39a4:	b508      	push	{r3, lr}
    39a6:	f7fd fcff 	bl	13a8 <LPUART0_TX_DriverIRQHandler>
}
    39aa:	bd08      	pop	{r3, pc}

000039ac <LPUART0_RX_IRQHandler>:

WEAK void LPUART0_RX_IRQHandler(void)
{   LPUART0_RX_DriverIRQHandler();
    39ac:	b508      	push	{r3, lr}
    39ae:	f7fd fd0b 	bl	13c8 <LPUART0_RX_DriverIRQHandler>
}
    39b2:	bd08      	pop	{r3, pc}

000039b4 <LPUART1_TX_IRQHandler>:

WEAK void LPUART1_TX_IRQHandler(void)
{   LPUART1_TX_DriverIRQHandler();
    39b4:	b508      	push	{r3, lr}
    39b6:	f7fd fd09 	bl	13cc <LPUART1_TX_DriverIRQHandler>
}
    39ba:	bd08      	pop	{r3, pc}

000039bc <LPUART1_RX_IRQHandler>:

WEAK void LPUART1_RX_IRQHandler(void)
{   LPUART1_RX_DriverIRQHandler();
    39bc:	b508      	push	{r3, lr}
    39be:	f7fd fd15 	bl	13ec <LPUART1_RX_DriverIRQHandler>
}
    39c2:	bd08      	pop	{r3, pc}

000039c4 <LPUART2_TX_IRQHandler>:

WEAK void LPUART2_TX_IRQHandler(void)
{   LPUART2_TX_DriverIRQHandler();
    39c4:	b508      	push	{r3, lr}
    39c6:	f7fd fd13 	bl	13f0 <LPUART2_TX_DriverIRQHandler>
}
    39ca:	bd08      	pop	{r3, pc}

000039cc <LPUART2_RX_IRQHandler>:

WEAK void LPUART2_RX_IRQHandler(void)
{   LPUART2_RX_DriverIRQHandler();
    39cc:	b508      	push	{r3, lr}
    39ce:	f7fd fd1f 	bl	1410 <LPUART2_RX_DriverIRQHandler>
}
    39d2:	bd08      	pop	{r3, pc}

000039d4 <Reserved53_IRQHandler>:

WEAK void Reserved53_IRQHandler(void)
{   Reserved53_DriverIRQHandler();
    39d4:	b508      	push	{r3, lr}
    39d6:	f7fc fc36 	bl	246 <ADC0_DriverIRQHandler>
}
    39da:	bd08      	pop	{r3, pc}

000039dc <Reserved54_IRQHandler>:

WEAK void Reserved54_IRQHandler(void)
{   Reserved54_DriverIRQHandler();
    39dc:	b508      	push	{r3, lr}
    39de:	f7fc fc32 	bl	246 <ADC0_DriverIRQHandler>
}
    39e2:	bd08      	pop	{r3, pc}

000039e4 <ADC0_IRQHandler>:

WEAK void ADC0_IRQHandler(void)
{   ADC0_DriverIRQHandler();
    39e4:	b508      	push	{r3, lr}
    39e6:	f7fc fc2e 	bl	246 <ADC0_DriverIRQHandler>
}
    39ea:	bd08      	pop	{r3, pc}

000039ec <CMP0_IRQHandler>:

WEAK void CMP0_IRQHandler(void)
{   CMP0_DriverIRQHandler();
    39ec:	b508      	push	{r3, lr}
    39ee:	f7fc fc2a 	bl	246 <ADC0_DriverIRQHandler>
}
    39f2:	bd08      	pop	{r3, pc}

000039f4 <CMP1_IRQHandler>:

WEAK void CMP1_IRQHandler(void)
{   CMP1_DriverIRQHandler();
    39f4:	b508      	push	{r3, lr}
    39f6:	f7fc fc26 	bl	246 <ADC0_DriverIRQHandler>
}
    39fa:	bd08      	pop	{r3, pc}

000039fc <FTM0_IRQHandler>:

WEAK void FTM0_IRQHandler(void)
{   FTM0_DriverIRQHandler();
    39fc:	b508      	push	{r3, lr}
    39fe:	f7fc fc22 	bl	246 <ADC0_DriverIRQHandler>
}
    3a02:	bd08      	pop	{r3, pc}

00003a04 <FTM1_IRQHandler>:

WEAK void FTM1_IRQHandler(void)
{   FTM1_DriverIRQHandler();
    3a04:	b508      	push	{r3, lr}
    3a06:	f7fc fc1e 	bl	246 <ADC0_DriverIRQHandler>
}
    3a0a:	bd08      	pop	{r3, pc}

00003a0c <FTM2_IRQHandler>:

WEAK void FTM2_IRQHandler(void)
{   FTM2_DriverIRQHandler();
    3a0c:	b508      	push	{r3, lr}
    3a0e:	f7fc fc1a 	bl	246 <ADC0_DriverIRQHandler>
}
    3a12:	bd08      	pop	{r3, pc}

00003a14 <Reserved61_IRQHandler>:

WEAK void Reserved61_IRQHandler(void)
{   Reserved61_DriverIRQHandler();
    3a14:	b508      	push	{r3, lr}
    3a16:	f7fc fc16 	bl	246 <ADC0_DriverIRQHandler>
}
    3a1a:	bd08      	pop	{r3, pc}

00003a1c <RTC_IRQHandler>:

WEAK void RTC_IRQHandler(void)
{   RTC_DriverIRQHandler();
    3a1c:	b508      	push	{r3, lr}
    3a1e:	f7fc fc12 	bl	246 <ADC0_DriverIRQHandler>
}
    3a22:	bd08      	pop	{r3, pc}

00003a24 <RTC_Seconds_IRQHandler>:

WEAK void RTC_Seconds_IRQHandler(void)
{   RTC_Seconds_DriverIRQHandler();
    3a24:	b508      	push	{r3, lr}
    3a26:	f7fc fc0e 	bl	246 <ADC0_DriverIRQHandler>
}
    3a2a:	bd08      	pop	{r3, pc}

00003a2c <LPIT0_Ch0_IRQHandler>:

WEAK void LPIT0_Ch0_IRQHandler(void)
{   LPIT0_Ch0_DriverIRQHandler();
    3a2c:	b508      	push	{r3, lr}
    3a2e:	f7fc fc0a 	bl	246 <ADC0_DriverIRQHandler>
}
    3a32:	bd08      	pop	{r3, pc}

00003a34 <LPIT0_Ch1_IRQHandler>:

WEAK void LPIT0_Ch1_IRQHandler(void)
{   LPIT0_Ch1_DriverIRQHandler();
    3a34:	b508      	push	{r3, lr}
    3a36:	f7fc fc06 	bl	246 <ADC0_DriverIRQHandler>
}
    3a3a:	bd08      	pop	{r3, pc}

00003a3c <LPIT0_Ch2_IRQHandler>:

WEAK void LPIT0_Ch2_IRQHandler(void)
{   LPIT0_Ch2_DriverIRQHandler();
    3a3c:	b508      	push	{r3, lr}
    3a3e:	f7fc fc02 	bl	246 <ADC0_DriverIRQHandler>
}
    3a42:	bd08      	pop	{r3, pc}

00003a44 <LPIT0_Ch3_IRQHandler>:

WEAK void LPIT0_Ch3_IRQHandler(void)
{   LPIT0_Ch3_DriverIRQHandler();
    3a44:	b508      	push	{r3, lr}
    3a46:	f7fc fbfe 	bl	246 <ADC0_DriverIRQHandler>
}
    3a4a:	bd08      	pop	{r3, pc}

00003a4c <PDB0_IRQHandler>:

WEAK void PDB0_IRQHandler(void)
{   PDB0_DriverIRQHandler();
    3a4c:	b508      	push	{r3, lr}
    3a4e:	f7fc fbfa 	bl	246 <ADC0_DriverIRQHandler>
}
    3a52:	bd08      	pop	{r3, pc}

00003a54 <Reserved69_IRQHandler>:

WEAK void Reserved69_IRQHandler(void)
{   Reserved69_DriverIRQHandler();
    3a54:	b508      	push	{r3, lr}
    3a56:	f7fc fbf6 	bl	246 <ADC0_DriverIRQHandler>
}
    3a5a:	bd08      	pop	{r3, pc}

00003a5c <Reserved70_IRQHandler>:

WEAK void Reserved70_IRQHandler(void)
{   Reserved70_DriverIRQHandler();
    3a5c:	b508      	push	{r3, lr}
    3a5e:	f7fc fbf2 	bl	246 <ADC0_DriverIRQHandler>
}
    3a62:	bd08      	pop	{r3, pc}

00003a64 <Reserved71_IRQHandler>:

WEAK void Reserved71_IRQHandler(void)
{   Reserved71_DriverIRQHandler();
    3a64:	b508      	push	{r3, lr}
    3a66:	f7fc fbee 	bl	246 <ADC0_DriverIRQHandler>
}
    3a6a:	bd08      	pop	{r3, pc}

00003a6c <DAC0_IRQHandler>:

WEAK void DAC0_IRQHandler(void)
{   DAC0_DriverIRQHandler();
    3a6c:	b508      	push	{r3, lr}
    3a6e:	f7fc fbea 	bl	246 <ADC0_DriverIRQHandler>
}
    3a72:	bd08      	pop	{r3, pc}

00003a74 <SCG_RCM_IRQHandler>:

WEAK void SCG_RCM_IRQHandler(void)
{   SCG_RCM_DriverIRQHandler();
    3a74:	b508      	push	{r3, lr}
    3a76:	f7fc fbe6 	bl	246 <ADC0_DriverIRQHandler>
}
    3a7a:	bd08      	pop	{r3, pc}

00003a7c <LPTMR0_IRQHandler>:

WEAK void LPTMR0_IRQHandler(void)
{   LPTMR0_DriverIRQHandler();
    3a7c:	b508      	push	{r3, lr}
    3a7e:	f7fc fbe2 	bl	246 <ADC0_DriverIRQHandler>
}
    3a82:	bd08      	pop	{r3, pc}

00003a84 <PORTA_IRQHandler>:

WEAK void PORTA_IRQHandler(void)
{   PORTA_DriverIRQHandler();
    3a84:	b508      	push	{r3, lr}
    3a86:	f7fc fbde 	bl	246 <ADC0_DriverIRQHandler>
}
    3a8a:	bd08      	pop	{r3, pc}

00003a8c <PORTB_IRQHandler>:

WEAK void PORTB_IRQHandler(void)
{   PORTB_DriverIRQHandler();
    3a8c:	b508      	push	{r3, lr}
    3a8e:	f7fc fbda 	bl	246 <ADC0_DriverIRQHandler>
}
    3a92:	bd08      	pop	{r3, pc}

00003a94 <PORTC_IRQHandler>:

WEAK void PORTC_IRQHandler(void)
{   PORTC_DriverIRQHandler();
    3a94:	b508      	push	{r3, lr}
    3a96:	f7fc fbd6 	bl	246 <ADC0_DriverIRQHandler>
}
    3a9a:	bd08      	pop	{r3, pc}

00003a9c <PORTD_IRQHandler>:

WEAK void PORTD_IRQHandler(void)
{   PORTD_DriverIRQHandler();
    3a9c:	b508      	push	{r3, lr}
    3a9e:	f7fc fbd2 	bl	246 <ADC0_DriverIRQHandler>
}
    3aa2:	bd08      	pop	{r3, pc}

00003aa4 <PORTE_IRQHandler>:

WEAK void PORTE_IRQHandler(void)
{   PORTE_DriverIRQHandler();
    3aa4:	b508      	push	{r3, lr}
    3aa6:	f7fc fbce 	bl	246 <ADC0_DriverIRQHandler>
}
    3aaa:	bd08      	pop	{r3, pc}

00003aac <SWI_IRQHandler>:

WEAK void SWI_IRQHandler(void)
{   SWI_DriverIRQHandler();
    3aac:	b508      	push	{r3, lr}
    3aae:	f7fc fbca 	bl	246 <ADC0_DriverIRQHandler>
}
    3ab2:	bd08      	pop	{r3, pc}

00003ab4 <Reserved81_IRQHandler>:

WEAK void Reserved81_IRQHandler(void)
{   Reserved81_DriverIRQHandler();
    3ab4:	b508      	push	{r3, lr}
    3ab6:	f7fc fbc6 	bl	246 <ADC0_DriverIRQHandler>
}
    3aba:	bd08      	pop	{r3, pc}

00003abc <Reserved82_IRQHandler>:

WEAK void Reserved82_IRQHandler(void)
{   Reserved82_DriverIRQHandler();
    3abc:	b508      	push	{r3, lr}
    3abe:	f7fc fbc2 	bl	246 <ADC0_DriverIRQHandler>
}
    3ac2:	bd08      	pop	{r3, pc}

00003ac4 <Reserved83_IRQHandler>:

WEAK void Reserved83_IRQHandler(void)
{   Reserved83_DriverIRQHandler();
    3ac4:	b508      	push	{r3, lr}
    3ac6:	f7fc fbbe 	bl	246 <ADC0_DriverIRQHandler>
}
    3aca:	bd08      	pop	{r3, pc}

00003acc <PDB1_IRQHandler>:

WEAK void PDB1_IRQHandler(void)
{   PDB1_DriverIRQHandler();
    3acc:	b508      	push	{r3, lr}
    3ace:	f7fc fbba 	bl	246 <ADC0_DriverIRQHandler>
}
    3ad2:	bd08      	pop	{r3, pc}

00003ad4 <FLEXIO_IRQHandler>:

WEAK void FLEXIO_IRQHandler(void)
{   FLEXIO_DriverIRQHandler();
    3ad4:	b508      	push	{r3, lr}
    3ad6:	f7fc fbb6 	bl	246 <ADC0_DriverIRQHandler>
}
    3ada:	bd08      	pop	{r3, pc}

00003adc <CMP2_IRQHandler>:

WEAK void CMP2_IRQHandler(void)
{   CMP2_DriverIRQHandler();
    3adc:	b508      	push	{r3, lr}
    3ade:	f7fc fbb2 	bl	246 <ADC0_DriverIRQHandler>
}
    3ae2:	bd08      	pop	{r3, pc}

00003ae4 <FTM3_IRQHandler>:

WEAK void FTM3_IRQHandler(void)
{   FTM3_DriverIRQHandler();
    3ae4:	b508      	push	{r3, lr}
    3ae6:	f7fc fbae 	bl	246 <ADC0_DriverIRQHandler>
}
    3aea:	bd08      	pop	{r3, pc}

00003aec <Reserved88_IRQHandler>:

WEAK void Reserved88_IRQHandler(void)
{   Reserved88_DriverIRQHandler();
    3aec:	b508      	push	{r3, lr}
    3aee:	f7fc fbaa 	bl	246 <ADC0_DriverIRQHandler>
}
    3af2:	bd08      	pop	{r3, pc}

00003af4 <ADC1_IRQHandler>:

WEAK void ADC1_IRQHandler(void)
{   ADC1_DriverIRQHandler();
    3af4:	b508      	push	{r3, lr}
    3af6:	f7fc fba6 	bl	246 <ADC0_DriverIRQHandler>
}
    3afa:	bd08      	pop	{r3, pc}

00003afc <ADC2_IRQHandler>:

WEAK void ADC2_IRQHandler(void)
{   ADC2_DriverIRQHandler();
    3afc:	b508      	push	{r3, lr}
    3afe:	f7fc fba2 	bl	246 <ADC0_DriverIRQHandler>
}
    3b02:	bd08      	pop	{r3, pc}

00003b04 <Reserved91_IRQHandler>:

WEAK void Reserved91_IRQHandler(void)
{   Reserved91_DriverIRQHandler();
    3b04:	b508      	push	{r3, lr}
    3b06:	f7fc fb9e 	bl	246 <ADC0_DriverIRQHandler>
}
    3b0a:	bd08      	pop	{r3, pc}

00003b0c <Reserved92_IRQHandler>:

WEAK void Reserved92_IRQHandler(void)
{   Reserved92_DriverIRQHandler();
    3b0c:	b508      	push	{r3, lr}
    3b0e:	f7fc fb9a 	bl	246 <ADC0_DriverIRQHandler>
}
    3b12:	bd08      	pop	{r3, pc}

00003b14 <PDB2_IRQHandler>:

WEAK void PDB2_IRQHandler(void)
{   PDB2_DriverIRQHandler();
    3b14:	b508      	push	{r3, lr}
    3b16:	f7fc fb96 	bl	246 <ADC0_DriverIRQHandler>
}
    3b1a:	bd08      	pop	{r3, pc}

00003b1c <CAN0_ORed_IRQHandler>:

WEAK void CAN0_ORed_IRQHandler(void)
{   CAN0_DriverIRQHandler();
    3b1c:	b508      	push	{r3, lr}
    3b1e:	f7fc fb92 	bl	246 <ADC0_DriverIRQHandler>
}
    3b22:	bd08      	pop	{r3, pc}

00003b24 <CAN0_Error_IRQHandler>:
    3b24:	b508      	push	{r3, lr}
    3b26:	f7ff fff9 	bl	3b1c <CAN0_ORed_IRQHandler>
    3b2a:	bd08      	pop	{r3, pc}

00003b2c <CAN0_Wake_Up_IRQHandler>:
    3b2c:	b508      	push	{r3, lr}
    3b2e:	f7ff fff5 	bl	3b1c <CAN0_ORed_IRQHandler>
    3b32:	bd08      	pop	{r3, pc}

00003b34 <CAN0_ORed_Message_buffer_IRQHandler>:
    3b34:	b508      	push	{r3, lr}
    3b36:	f7ff fff1 	bl	3b1c <CAN0_ORed_IRQHandler>
    3b3a:	bd08      	pop	{r3, pc}

00003b3c <Reserved98_IRQHandler>:
WEAK void CAN0_ORed_Message_buffer_IRQHandler(void)
{   CAN0_DriverIRQHandler();
}

WEAK void Reserved98_IRQHandler(void)
{   Reserved98_DriverIRQHandler();
    3b3c:	b508      	push	{r3, lr}
    3b3e:	f7fc fb82 	bl	246 <ADC0_DriverIRQHandler>
}
    3b42:	bd08      	pop	{r3, pc}

00003b44 <Reserved99_IRQHandler>:

WEAK void Reserved99_IRQHandler(void)
{   Reserved99_DriverIRQHandler();
    3b44:	b508      	push	{r3, lr}
    3b46:	f7fc fb7e 	bl	246 <ADC0_DriverIRQHandler>
}
    3b4a:	bd08      	pop	{r3, pc}

00003b4c <Reserved100_IRQHandler>:

WEAK void Reserved100_IRQHandler(void)
{   Reserved100_DriverIRQHandler();
    3b4c:	b508      	push	{r3, lr}
    3b4e:	f7fc fb7a 	bl	246 <ADC0_DriverIRQHandler>
}
    3b52:	bd08      	pop	{r3, pc}

00003b54 <CAN1_ORed_IRQHandler>:

WEAK void CAN1_ORed_IRQHandler(void)
{   CAN1_DriverIRQHandler();
    3b54:	b508      	push	{r3, lr}
    3b56:	f7fc fb76 	bl	246 <ADC0_DriverIRQHandler>
}
    3b5a:	bd08      	pop	{r3, pc}

00003b5c <CAN1_Error_IRQHandler>:
    3b5c:	b508      	push	{r3, lr}
    3b5e:	f7ff fff9 	bl	3b54 <CAN1_ORed_IRQHandler>
    3b62:	bd08      	pop	{r3, pc}

00003b64 <CAN1_Wake_Up_IRQHandler>:
    3b64:	b508      	push	{r3, lr}
    3b66:	f7ff fff5 	bl	3b54 <CAN1_ORed_IRQHandler>
    3b6a:	bd08      	pop	{r3, pc}

00003b6c <CAN1_ORed_Message_buffer_IRQHandler>:
    3b6c:	b508      	push	{r3, lr}
    3b6e:	f7ff fff1 	bl	3b54 <CAN1_ORed_IRQHandler>
    3b72:	bd08      	pop	{r3, pc}

00003b74 <abort>:
    3b74:	b508      	push	{r3, lr}
    3b76:	2006      	movs	r0, #6
    3b78:	f7ff fb40 	bl	31fc <raise>
    3b7c:	2001      	movs	r0, #1
    3b7e:	f000 f97e 	bl	3e7e <_exit>

00003b82 <memcpy>:
    3b82:	b510      	push	{r4, lr}
    3b84:	1e43      	subs	r3, r0, #1
    3b86:	440a      	add	r2, r1
    3b88:	4291      	cmp	r1, r2
    3b8a:	d100      	bne.n	3b8e <memcpy+0xc>
    3b8c:	bd10      	pop	{r4, pc}
    3b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3b92:	f803 4f01 	strb.w	r4, [r3, #1]!
    3b96:	e7f7      	b.n	3b88 <memcpy+0x6>

00003b98 <memset>:
    3b98:	4402      	add	r2, r0
    3b9a:	4603      	mov	r3, r0
    3b9c:	4293      	cmp	r3, r2
    3b9e:	d100      	bne.n	3ba2 <memset+0xa>
    3ba0:	4770      	bx	lr
    3ba2:	f803 1b01 	strb.w	r1, [r3], #1
    3ba6:	e7f9      	b.n	3b9c <memset+0x4>

00003ba8 <__sfputc_r>:
    3ba8:	6893      	ldr	r3, [r2, #8]
    3baa:	3b01      	subs	r3, #1
    3bac:	2b00      	cmp	r3, #0
    3bae:	b410      	push	{r4}
    3bb0:	6093      	str	r3, [r2, #8]
    3bb2:	da07      	bge.n	3bc4 <__sfputc_r+0x1c>
    3bb4:	6994      	ldr	r4, [r2, #24]
    3bb6:	42a3      	cmp	r3, r4
    3bb8:	db01      	blt.n	3bbe <__sfputc_r+0x16>
    3bba:	290a      	cmp	r1, #10
    3bbc:	d102      	bne.n	3bc4 <__sfputc_r+0x1c>
    3bbe:	bc10      	pop	{r4}
    3bc0:	f7ff bb36 	b.w	3230 <__swbuf_r>
    3bc4:	6813      	ldr	r3, [r2, #0]
    3bc6:	1c58      	adds	r0, r3, #1
    3bc8:	6010      	str	r0, [r2, #0]
    3bca:	7019      	strb	r1, [r3, #0]
    3bcc:	4608      	mov	r0, r1
    3bce:	bc10      	pop	{r4}
    3bd0:	4770      	bx	lr

00003bd2 <__sfputs_r>:
    3bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bd4:	4606      	mov	r6, r0
    3bd6:	460f      	mov	r7, r1
    3bd8:	4614      	mov	r4, r2
    3bda:	18d5      	adds	r5, r2, r3
    3bdc:	42ac      	cmp	r4, r5
    3bde:	d101      	bne.n	3be4 <__sfputs_r+0x12>
    3be0:	2000      	movs	r0, #0
    3be2:	e007      	b.n	3bf4 <__sfputs_r+0x22>
    3be4:	463a      	mov	r2, r7
    3be6:	f814 1b01 	ldrb.w	r1, [r4], #1
    3bea:	4630      	mov	r0, r6
    3bec:	f7ff ffdc 	bl	3ba8 <__sfputc_r>
    3bf0:	1c43      	adds	r3, r0, #1
    3bf2:	d1f3      	bne.n	3bdc <__sfputs_r+0xa>
    3bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003bf6 <_printf_common>:
    3bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bfa:	4691      	mov	r9, r2
    3bfc:	461f      	mov	r7, r3
    3bfe:	688a      	ldr	r2, [r1, #8]
    3c00:	690b      	ldr	r3, [r1, #16]
    3c02:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3c06:	4293      	cmp	r3, r2
    3c08:	bfb8      	it	lt
    3c0a:	4613      	movlt	r3, r2
    3c0c:	f8c9 3000 	str.w	r3, [r9]
    3c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3c14:	4606      	mov	r6, r0
    3c16:	460c      	mov	r4, r1
    3c18:	b112      	cbz	r2, 3c20 <_printf_common+0x2a>
    3c1a:	3301      	adds	r3, #1
    3c1c:	f8c9 3000 	str.w	r3, [r9]
    3c20:	6823      	ldr	r3, [r4, #0]
    3c22:	0699      	lsls	r1, r3, #26
    3c24:	bf42      	ittt	mi
    3c26:	f8d9 3000 	ldrmi.w	r3, [r9]
    3c2a:	3302      	addmi	r3, #2
    3c2c:	f8c9 3000 	strmi.w	r3, [r9]
    3c30:	6825      	ldr	r5, [r4, #0]
    3c32:	f015 0506 	ands.w	r5, r5, #6
    3c36:	d107      	bne.n	3c48 <_printf_common+0x52>
    3c38:	f104 0a19 	add.w	sl, r4, #25
    3c3c:	68e3      	ldr	r3, [r4, #12]
    3c3e:	f8d9 2000 	ldr.w	r2, [r9]
    3c42:	1a9b      	subs	r3, r3, r2
    3c44:	42ab      	cmp	r3, r5
    3c46:	dc28      	bgt.n	3c9a <_printf_common+0xa4>
    3c48:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    3c4c:	6822      	ldr	r2, [r4, #0]
    3c4e:	3300      	adds	r3, #0
    3c50:	bf18      	it	ne
    3c52:	2301      	movne	r3, #1
    3c54:	0692      	lsls	r2, r2, #26
    3c56:	d42d      	bmi.n	3cb4 <_printf_common+0xbe>
    3c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
    3c5c:	4639      	mov	r1, r7
    3c5e:	4630      	mov	r0, r6
    3c60:	47c0      	blx	r8
    3c62:	3001      	adds	r0, #1
    3c64:	d020      	beq.n	3ca8 <_printf_common+0xb2>
    3c66:	6823      	ldr	r3, [r4, #0]
    3c68:	68e5      	ldr	r5, [r4, #12]
    3c6a:	f8d9 2000 	ldr.w	r2, [r9]
    3c6e:	f003 0306 	and.w	r3, r3, #6
    3c72:	2b04      	cmp	r3, #4
    3c74:	bf08      	it	eq
    3c76:	1aad      	subeq	r5, r5, r2
    3c78:	68a3      	ldr	r3, [r4, #8]
    3c7a:	6922      	ldr	r2, [r4, #16]
    3c7c:	bf0c      	ite	eq
    3c7e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3c82:	2500      	movne	r5, #0
    3c84:	4293      	cmp	r3, r2
    3c86:	bfc4      	itt	gt
    3c88:	1a9b      	subgt	r3, r3, r2
    3c8a:	18ed      	addgt	r5, r5, r3
    3c8c:	f04f 0900 	mov.w	r9, #0
    3c90:	341a      	adds	r4, #26
    3c92:	454d      	cmp	r5, r9
    3c94:	d11a      	bne.n	3ccc <_printf_common+0xd6>
    3c96:	2000      	movs	r0, #0
    3c98:	e008      	b.n	3cac <_printf_common+0xb6>
    3c9a:	2301      	movs	r3, #1
    3c9c:	4652      	mov	r2, sl
    3c9e:	4639      	mov	r1, r7
    3ca0:	4630      	mov	r0, r6
    3ca2:	47c0      	blx	r8
    3ca4:	3001      	adds	r0, #1
    3ca6:	d103      	bne.n	3cb0 <_printf_common+0xba>
    3ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3cb0:	3501      	adds	r5, #1
    3cb2:	e7c3      	b.n	3c3c <_printf_common+0x46>
    3cb4:	18e1      	adds	r1, r4, r3
    3cb6:	1c5a      	adds	r2, r3, #1
    3cb8:	2030      	movs	r0, #48	; 0x30
    3cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    3cbe:	4422      	add	r2, r4
    3cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3cc8:	3302      	adds	r3, #2
    3cca:	e7c5      	b.n	3c58 <_printf_common+0x62>
    3ccc:	2301      	movs	r3, #1
    3cce:	4622      	mov	r2, r4
    3cd0:	4639      	mov	r1, r7
    3cd2:	4630      	mov	r0, r6
    3cd4:	47c0      	blx	r8
    3cd6:	3001      	adds	r0, #1
    3cd8:	d0e6      	beq.n	3ca8 <_printf_common+0xb2>
    3cda:	f109 0901 	add.w	r9, r9, #1
    3cde:	e7d8      	b.n	3c92 <_printf_common+0x9c>

00003ce0 <_raise_r>:
    3ce0:	291f      	cmp	r1, #31
    3ce2:	b538      	push	{r3, r4, r5, lr}
    3ce4:	4604      	mov	r4, r0
    3ce6:	460d      	mov	r5, r1
    3ce8:	d904      	bls.n	3cf4 <_raise_r+0x14>
    3cea:	2316      	movs	r3, #22
    3cec:	6003      	str	r3, [r0, #0]
    3cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3cf2:	bd38      	pop	{r3, r4, r5, pc}
    3cf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
    3cf6:	b112      	cbz	r2, 3cfe <_raise_r+0x1e>
    3cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3cfc:	b94b      	cbnz	r3, 3d12 <_raise_r+0x32>
    3cfe:	4620      	mov	r0, r4
    3d00:	f000 f816 	bl	3d30 <_getpid_r>
    3d04:	462a      	mov	r2, r5
    3d06:	4601      	mov	r1, r0
    3d08:	4620      	mov	r0, r4
    3d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3d0e:	f7ff ba7d 	b.w	320c <_kill_r>
    3d12:	2b01      	cmp	r3, #1
    3d14:	d00a      	beq.n	3d2c <_raise_r+0x4c>
    3d16:	1c59      	adds	r1, r3, #1
    3d18:	d103      	bne.n	3d22 <_raise_r+0x42>
    3d1a:	2316      	movs	r3, #22
    3d1c:	6003      	str	r3, [r0, #0]
    3d1e:	2001      	movs	r0, #1
    3d20:	e7e7      	b.n	3cf2 <_raise_r+0x12>
    3d22:	2400      	movs	r4, #0
    3d24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    3d28:	4628      	mov	r0, r5
    3d2a:	4798      	blx	r3
    3d2c:	2000      	movs	r0, #0
    3d2e:	e7e0      	b.n	3cf2 <_raise_r+0x12>

00003d30 <_getpid_r>:
    3d30:	f7ff bd5a 	b.w	37e8 <_getpid>

00003d34 <strlen>:
    3d34:	4603      	mov	r3, r0
    3d36:	f813 2b01 	ldrb.w	r2, [r3], #1
    3d3a:	2a00      	cmp	r2, #0
    3d3c:	d1fb      	bne.n	3d36 <strlen+0x2>
    3d3e:	1a18      	subs	r0, r3, r0
    3d40:	3801      	subs	r0, #1
    3d42:	4770      	bx	lr

00003d44 <__sfmoreglue>:
    3d44:	b570      	push	{r4, r5, r6, lr}
    3d46:	1e4a      	subs	r2, r1, #1
    3d48:	2568      	movs	r5, #104	; 0x68
    3d4a:	4355      	muls	r5, r2
    3d4c:	460e      	mov	r6, r1
    3d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    3d52:	f7fe ffc3 	bl	2cdc <_malloc_r>
    3d56:	4604      	mov	r4, r0
    3d58:	b140      	cbz	r0, 3d6c <__sfmoreglue+0x28>
    3d5a:	2100      	movs	r1, #0
    3d5c:	e9c0 1600 	strd	r1, r6, [r0]
    3d60:	300c      	adds	r0, #12
    3d62:	60a0      	str	r0, [r4, #8]
    3d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
    3d68:	f7ff ff16 	bl	3b98 <memset>
    3d6c:	4620      	mov	r0, r4
    3d6e:	bd70      	pop	{r4, r5, r6, pc}

00003d70 <_fwalk_reent>:
    3d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d74:	4680      	mov	r8, r0
    3d76:	4689      	mov	r9, r1
    3d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
    3d7c:	2600      	movs	r6, #0
    3d7e:	b914      	cbnz	r4, 3d86 <_fwalk_reent+0x16>
    3d80:	4630      	mov	r0, r6
    3d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    3d8a:	3f01      	subs	r7, #1
    3d8c:	d501      	bpl.n	3d92 <_fwalk_reent+0x22>
    3d8e:	6824      	ldr	r4, [r4, #0]
    3d90:	e7f5      	b.n	3d7e <_fwalk_reent+0xe>
    3d92:	89ab      	ldrh	r3, [r5, #12]
    3d94:	2b01      	cmp	r3, #1
    3d96:	d907      	bls.n	3da8 <_fwalk_reent+0x38>
    3d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    3d9c:	3301      	adds	r3, #1
    3d9e:	d003      	beq.n	3da8 <_fwalk_reent+0x38>
    3da0:	4629      	mov	r1, r5
    3da2:	4640      	mov	r0, r8
    3da4:	47c8      	blx	r9
    3da6:	4306      	orrs	r6, r0
    3da8:	3568      	adds	r5, #104	; 0x68
    3daa:	e7ee      	b.n	3d8a <_fwalk_reent+0x1a>

00003dac <__swhatbuf_r>:
    3dac:	b570      	push	{r4, r5, r6, lr}
    3dae:	460e      	mov	r6, r1
    3db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3db4:	2900      	cmp	r1, #0
    3db6:	b096      	sub	sp, #88	; 0x58
    3db8:	4614      	mov	r4, r2
    3dba:	461d      	mov	r5, r3
    3dbc:	da07      	bge.n	3dce <__swhatbuf_r+0x22>
    3dbe:	2300      	movs	r3, #0
    3dc0:	602b      	str	r3, [r5, #0]
    3dc2:	89b3      	ldrh	r3, [r6, #12]
    3dc4:	061a      	lsls	r2, r3, #24
    3dc6:	d410      	bmi.n	3dea <__swhatbuf_r+0x3e>
    3dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3dcc:	e00e      	b.n	3dec <__swhatbuf_r+0x40>
    3dce:	466a      	mov	r2, sp
    3dd0:	f7ff fc96 	bl	3700 <_fstat_r>
    3dd4:	2800      	cmp	r0, #0
    3dd6:	dbf2      	blt.n	3dbe <__swhatbuf_r+0x12>
    3dd8:	9a01      	ldr	r2, [sp, #4]
    3dda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3dde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    3de2:	425a      	negs	r2, r3
    3de4:	415a      	adcs	r2, r3
    3de6:	602a      	str	r2, [r5, #0]
    3de8:	e7ee      	b.n	3dc8 <__swhatbuf_r+0x1c>
    3dea:	2340      	movs	r3, #64	; 0x40
    3dec:	2000      	movs	r0, #0
    3dee:	6023      	str	r3, [r4, #0]
    3df0:	b016      	add	sp, #88	; 0x58
    3df2:	bd70      	pop	{r4, r5, r6, pc}

00003df4 <__malloc_lock>:
    3df4:	4770      	bx	lr

00003df6 <__malloc_unlock>:
    3df6:	4770      	bx	lr

00003df8 <__sread>:
    3df8:	b510      	push	{r4, lr}
    3dfa:	460c      	mov	r4, r1
    3dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e00:	f7ff fcb2 	bl	3768 <_read_r>
    3e04:	2800      	cmp	r0, #0
    3e06:	bfab      	itete	ge
    3e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3e0a:	89a3      	ldrhlt	r3, [r4, #12]
    3e0c:	181b      	addge	r3, r3, r0
    3e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    3e12:	bfac      	ite	ge
    3e14:	6563      	strge	r3, [r4, #84]	; 0x54
    3e16:	81a3      	strhlt	r3, [r4, #12]
    3e18:	bd10      	pop	{r4, pc}

00003e1a <__swrite>:
    3e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e1e:	461f      	mov	r7, r3
    3e20:	898b      	ldrh	r3, [r1, #12]
    3e22:	05db      	lsls	r3, r3, #23
    3e24:	4605      	mov	r5, r0
    3e26:	460c      	mov	r4, r1
    3e28:	4616      	mov	r6, r2
    3e2a:	d505      	bpl.n	3e38 <__swrite+0x1e>
    3e2c:	2302      	movs	r3, #2
    3e2e:	2200      	movs	r2, #0
    3e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e34:	f7ff fc86 	bl	3744 <_lseek_r>
    3e38:	89a3      	ldrh	r3, [r4, #12]
    3e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e42:	81a3      	strh	r3, [r4, #12]
    3e44:	4632      	mov	r2, r6
    3e46:	463b      	mov	r3, r7
    3e48:	4628      	mov	r0, r5
    3e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e4e:	f7ff bc35 	b.w	36bc <_write_r>

00003e52 <__sseek>:
    3e52:	b510      	push	{r4, lr}
    3e54:	460c      	mov	r4, r1
    3e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e5a:	f7ff fc73 	bl	3744 <_lseek_r>
    3e5e:	1c43      	adds	r3, r0, #1
    3e60:	89a3      	ldrh	r3, [r4, #12]
    3e62:	bf15      	itete	ne
    3e64:	6560      	strne	r0, [r4, #84]	; 0x54
    3e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3e6e:	81a3      	strheq	r3, [r4, #12]
    3e70:	bf18      	it	ne
    3e72:	81a3      	strhne	r3, [r4, #12]
    3e74:	bd10      	pop	{r4, pc}

00003e76 <__sclose>:
    3e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e7a:	f7ff bc31 	b.w	36e0 <_close_r>

00003e7e <_exit>:
    3e7e:	e7fe      	b.n	3e7e <_exit>
    3e80:	69766564 	.word	0x69766564
    3e84:	21206563 	.word	0x21206563
    3e88:	4544203d 	.word	0x4544203d
    3e8c:	5f475542 	.word	0x5f475542
    3e90:	534e4f43 	.word	0x534e4f43
    3e94:	5f454c4f 	.word	0x5f454c4f
    3e98:	49564544 	.word	0x49564544
    3e9c:	545f4543 	.word	0x545f4543
    3ea0:	5f455059 	.word	0x5f455059
    3ea4:	454e4f4e 	.word	0x454e4f4e
    3ea8:	00000000 	.word	0x00000000
    3eac:	752f2e2e 	.word	0x752f2e2e
    3eb0:	696c6974 	.word	0x696c6974
    3eb4:	73656974 	.word	0x73656974
    3eb8:	6c73662f 	.word	0x6c73662f
    3ebc:	6265645f 	.word	0x6265645f
    3ec0:	635f6775 	.word	0x635f6775
    3ec4:	6f736e6f 	.word	0x6f736e6f
    3ec8:	632e656c 	.word	0x632e656c
    3ecc:	ffffff00 	.word	0xffffff00

00003ed0 <__func__.6764>:
    3ed0:	43676244 6f736e6f 495f656c 0074696e     DbgConsole_Init.
    3ee0:	4c4c554e 203d2120 00006f69 752f2e2e     NULL != io..../u
    3ef0:	696c6974 73656974 6c73662f 2e6f695f     tilities/fsl_io.
    3f00:	ffff0063                                c...

00003f04 <__func__.6966>:
    3f04:	495f4f49 0074696e 20667562 4e203d21     IO_Init.buf != N
    3f14:	004c4c55 752f2e2e 696c6974 73656974     ULL.../utilities
    3f24:	6c73662f 676f6c5f ff00632e              /fsl_log.c..

00003f30 <__func__.6760>:
    3f30:	5f474f4c 68737550 ffffff00 58343025     LOG_Push....%04X
    3f40:	3430252d 52432058 30253d43 0a0d5834     -%04X CRC=%04X..
    3f50:	00000000 626e6950 206c6c61 204d4f52     ....Pinball ROM 
    3f60:	20435243 63656863 000a0d6b 74785f67     CRC check...g_xt
    3f70:	46306c61 00716572 642f2e2e 65766972     al0Freq.../drive
    3f80:	662f7372 635f6c73 6b636f6c ff00632e     rs/fsl_clock.c..
    3f90:	20676572 43502026 4c435f43 4746434b     reg & PCC_CLKCFG
    3fa0:	5f52505f 4b53414d ffffff00 666e6f63     _PR_MASK....conf
    3fb0:	ff006769                                ig..

00003fb4 <__func__.6751>:
    3fb4:	434f4c43 65475f4b 46704974 00716572     CLOCK_GetIpFreq.

00003fc4 <__func__.6798>:
    3fc4:	434f4c43 65475f4b 73795374 4663734f     CLOCK_GetSysOscF
    3fd4:	00716572                                req.

00003fd8 <__func__.6811>:
    3fd8:	434f4c43 6e495f4b 69537469 ff006372     CLOCK_InitSirc..

00003fe8 <__func__.6836>:
    3fe8:	434f4c43 6e495f4b 69467469 ff006372     CLOCK_InitFirc..

00003ff8 <__func__.6880>:
    3ff8:	434f4c43 6e495f4b 79537469 6c6c5073     CLOCK_InitSysPll
    4008:	ffffff00                                ....

0000400c <fircFreq.6848>:
    400c:	02dc6c00 03197500 03567e00 03938700     .l...u...~V.....

0000401c <sircFreq.6823>:
    401c:	001e8480 007a1200 76282a28 74616c6f     ......z.(*(volat
    402c:	20656c69 746e6975 745f3233 6e292a20     ile uint32_t *)n
    403c:	29656d61 50202620 435f4343 46434b4c     ame) & PCC_CLKCF
    404c:	52505f47 53414d5f 0000004b 642f2e2e     G_PR_MASK...../d
    405c:	65766972 662f7372 635f6c73 6b636f6c     rivers/fsl_clock
    406c:	ff00682e                                .h..

00004070 <__func__.6514>:
    4070:	434f4c43 6e455f4b 656c6261 636f6c43     CLOCK_EnableCloc
    4080:	ffff006b 74736e69 65636e61 41203c20     k...instance < A
    4090:	59415252 5a49535f 5f732845 6f697067     RRAY_SIZE(s_gpio
    40a0:	65736142 00002973 642f2e2e 65766972     Bases)..../drive
    40b0:	662f7372 675f6c73 2e6f6970 ffff0063     rs/fsl_gpio.c...

000040c0 <__func__.6783>:
    40c0:	4f495047 6e69505f 74696e49 ffffff00     GPIO_PinInit....
    40d0:	74736e69 65636e61 41203c20 59415252     instance < ARRAY
    40e0:	5a49535f 5f732845 6175706c 61427472     _SIZE(s_lpuartBa
    40f0:	29736573 ffffff00 666e6f63 3e2d6769     ses)....config->
    4100:	64756162 65746152 7370425f 00000000     baudRate_Bps....
    4110:	5f4c5346 54414546 5f455255 4155504c     FSL_FEATURE_LPUA
    4120:	465f5452 5f4f4649 455a4953 6162286e     RT_FIFO_SIZEn(ba
    4130:	20296573 63203d3e 69666e6f 743e2d67     se) >= config->t
    4140:	66694678 7461576f 616d7265 00006b72     xFifoWatermark..
    4150:	5f4c5346 54414546 5f455255 4155504c     FSL_FEATURE_LPUA
    4160:	465f5452 5f4f4649 455a4953 6162286e     RT_FIFO_SIZEn(ba
    4170:	20296573 63203d3e 69666e6f 723e2d67     se) >= config->r
    4180:	66694678 7461576f 616d7265 ff006b72     xFifoWatermark..
    4190:	61746164 00000000 642f2e2e 65766972     data....../drive
    41a0:	662f7372 6c5f6c73 72617570 00632e74     rs/fsl_lpuart.c.

000041b0 <__func__.6514>:
    41b0:	434f4c43 6e455f4b 656c6261 636f6c43     CLOCK_EnableCloc
    41c0:	ffff006b                                k...

000041c4 <__func__.6970>:
    41c4:	4155504c 475f5452 6e497465 6e617473     LPUART_GetInstan
    41d4:	ff006563                                ce..

000041d8 <__func__.7010>:
    41d8:	4155504c 495f5452 0074696e              LPUART_Init.

000041e4 <__func__.7037>:
    41e4:	4155504c 475f5452 65447465 6c756166     LPUART_GetDefaul
    41f4:	6e6f4374 00676966                       tConfig.

000041fc <__func__.7083>:
    41fc:	4155504c 575f5452 65746972 636f6c42     LPUART_WriteBloc
    420c:	676e696b ffffff00                       king....

00004214 <__func__.7095>:
    4214:	4155504c 525f5452 42646165 6b636f6c     LPUART_ReadBlock
    4224:	00676e69 65722821 20262067 5f434350     ing.!(reg & PCC_
    4234:	434b4c43 495f4746 4553554e 53414d5f     CLKCFG_INUSE_MAS
    4244:	0000294b                                K)..

00004248 <__func__.6528>:
    4248:	434f4c43 65535f4b 53704974 ff006372     CLOCK_SetIpSrc..

00004258 <g_scgFircConfig_BOARD_FastClock>:
    4258:	00000001 00030200 00000000              ............

00004264 <g_scgSircConfig_BOARD_FastClock>:
    4264:	00000005 00010000                       ........

0000426c <g_scgSircConfig_BOARD_SlowClock>:
    426c:	00000005 00010000                       ........

00004274 <g_scgSysPllConfig_BOARD_FastClock>:
    4274:	00000001 00000000 04010000 0000000c     ................

00004284 <g_sysClkConfig_BOARD_FastClock>:
    4284:	06000086                                ....

00004288 <g_sysClkConfig_BOARD_SlowClock>:
    4288:	02010004 ffff0101                       ........

00004290 <__func__.6514>:
    4290:	434f4c43 6e455f4b 656c6261 636f6c43     CLOCK_EnableCloc
    42a0:	ffff006b                                k...

000042a4 <_global_impure_ptr>:
    42a4:	20000008                                ... 

000042a8 <__sf_fake_stderr>:
	...

000042c8 <__sf_fake_stdin>:
	...

000042e8 <__sf_fake_stdout>:
	...
    4308:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
    4318:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
    4328:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
    4338:	20656e69 73256425 000a7325 2b302d23     ine %d%s%s..#-0+
    4348:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    4358:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    4368:	35343332 39383736 64636261 ff006665     23456789abcdef..

00004378 <_init>:
    4378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    437a:	bf00      	nop
    437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    437e:	bc08      	pop	{r3}
    4380:	469e      	mov	lr, r3
    4382:	4770      	bx	lr
    4384:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004388 <__init_array_start>:
    4388:	00003885 	.word	0x00003885

0000438c <_fini>:
    438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    438e:	bf00      	nop
    4390:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4392:	bc08      	pop	{r3}
    4394:	469e      	mov	lr, r3
    4396:	4770      	bx	lr
